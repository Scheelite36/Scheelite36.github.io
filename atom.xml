<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只柑の博客</title>
  
  
  <link href="http://123.57.158.5/atom.xml" rel="self"/>
  
  <link href="http://123.57.158.5/"/>
  <updated>2021-08-26T16:21:31.070Z</updated>
  <id>http://123.57.158.5/</id>
  
  <author>
    <name>一只柑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring-ioc</title>
    <link href="http://123.57.158.5/2021/08/27/spring-ioc/"/>
    <id>http://123.57.158.5/2021/08/27/spring-ioc/</id>
    <published>2021-08-26T16:12:59.000Z</published>
    <updated>2021-08-26T16:21:31.070Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用反射简单模拟Spring的ioc容器</span><br><span class="line">使用依赖dom4j</span><br></pre></td></tr></table></figure><p>项目结构：</p><p><img src="/2021/08/27/spring-ioc/image-20210827001816735.png" alt="image-20210827001816735"></p><h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orange.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruits</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象，添加getset方法</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String origin;</span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写toString方法方便进行输出</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Fruits&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, origin=&#x27;&quot;</span> + origin + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrigin</span><span class="params">(String origin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.origin = origin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(Float price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!--关联entity中对象进行配置，property指的是通过对象getset方法进行初始化--&gt;</span><br><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;durian&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.orange.entity.Fruits&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;durian&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;origin&quot;</span> value=<span class="string">&quot;Thailand&quot;</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;price&quot;</span> value=<span class="string">&quot;99.0&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orange.context;</span><br><span class="line"><span class="comment">// 创建接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orange.context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Node;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line"><span class="comment">//    使用hashmap保存ioc容器的数据，数据以beanid 和 Fruits对象形式保存</span></span><br><span class="line">    Map&lt;String, Object&gt; iocContainer = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            使用dom4j读取配置文件</span></span><br><span class="line">            String filePath = <span class="keyword">this</span>.getClass().getResource(<span class="string">&quot;/applicationContext.xml&quot;</span>).getPath();</span><br><span class="line">            filePath = <span class="keyword">new</span> URLDecoder().decode(filePath, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            Document document = <span class="keyword">new</span> SAXReader().read(<span class="keyword">new</span> File(filePath));</span><br><span class="line"><span class="comment">//            获取配置文件下的bean</span></span><br><span class="line">            List&lt;Node&gt; nodes = document.getRootElement().selectNodes(<span class="string">&quot;bean&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Node node : nodes) &#123;</span><br><span class="line"><span class="comment">//                获取到beanid和class，使用反射创建对象</span></span><br><span class="line">                Element el = (Element) node;</span><br><span class="line">                String beanId = el.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String className = el.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                Class c = Class.forName(className);</span><br><span class="line">                Object obj = c.getConstructor().newInstance();</span><br><span class="line"><span class="comment">//                获取每一个bean下的property 获取name和value 反射给对象注入属性</span></span><br><span class="line">                List&lt;Node&gt; props = el.selectNodes(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Node prop : props) &#123;</span><br><span class="line">                    Element pro = (Element) prop;</span><br><span class="line">                    String propertyName = pro.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    Object propertyValue = pro.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    String setMethodName = <span class="string">&quot;set&quot;</span> + propertyName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + propertyName.substring(<span class="number">1</span>);</span><br><span class="line">                    Type fieldType = c.getDeclaredField(propertyName).getGenericType();</span><br><span class="line">                    Method setMethod = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (fieldType.toString().equals(<span class="string">&quot;class java.lang.String&quot;</span>)) &#123;</span><br><span class="line">                        setMethod = c.getMethod(setMethodName, String.class);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldType.toString().equals(<span class="string">&quot;class java.lang.Float&quot;</span>)) &#123;</span><br><span class="line">                        setMethod = c.getMethod(setMethodName, Float.class);</span><br><span class="line">                        propertyValue = Float.parseFloat((String) propertyValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setMethod.invoke(obj, propertyValue);</span><br><span class="line">                &#125;</span><br><span class="line">                iocContainer.put(beanId, obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String beanId)</span> </span>&#123;</span><br><span class="line">        Object obj = iocContainer.get(beanId);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="IocApplication-java"><a href="#IocApplication-java" class="headerlink" title="IocApplication.java"></a>IocApplication.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.orange;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.orange.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.orange.context.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.orange.entity.Fruits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext();</span><br><span class="line">        Fruits durian = (Fruits) context.getBean(<span class="string">&quot;durian&quot;</span>);</span><br><span class="line">        System.out.println(durian);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/</summary>
      
    
    
    
    <category term="Java" scheme="http://123.57.158.5/categories/Java/"/>
    
    
    <category term="Java" scheme="http://123.57.158.5/tags/Java/"/>
    
    <category term="Spring" scheme="http://123.57.158.5/tags/Spring/"/>
    
    <category term="IOC" scheme="http://123.57.158.5/tags/IOC/"/>
    
  </entry>
  
  <entry>
    <title>ssm部分笔记</title>
    <link href="http://123.57.158.5/2021/08/15/ssm/"/>
    <id>http://123.57.158.5/2021/08/15/ssm/</id>
    <published>2021-08-15T02:26:30.000Z</published>
    <updated>2021-08-26T16:15:09.078Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis 默认开启一级缓存，只在一个sqlsession中使用，不论进行多少次相同的sql查询，结果都在同一个内存地址中。</p><p>commit操作会强制清空一二级缓存</p><p>二次缓存在mapper的namespace中生效，二级缓存的设置：</p><p><img src="/2021/08/15/ssm/image-20210815103904479.png" alt="image-20210815103904479"></p><p>对于列表中存储多个查询对象的，会被当作一个对象存储进缓存，缓存命中率低，所以不推荐使用缓存。</p><p><img src="/2021/08/15/ssm/image-20210815104627699.png" alt="image-20210815104627699"></p><p>一对多（one to many）的one表的xml配置</p><p><img src="/2021/08/15/ssm/image-20210815202133723.png" alt="image-20210815202133723"></p><p>多对一查询（many to one） many表的xml配置</p><p><img src="/2021/08/15/ssm/image-20210815223023718.png" alt="image-20210815223023718"></p><p>xxxx 略，暂时不更新笔记内容了</p><h3 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h3><p>尤其注意xml的配置问题，特别容易导致错误</p><p>例如xml中mysql数据库的引入，注意是在cj.jdbc包下面，引用错误会导致NoClassDefFoundError</p><h3 id="bean-scope中的单例与多例模式对比"><a href="#bean-scope中的单例与多例模式对比" class="headerlink" title="bean scope中的单例与多例模式对比"></a>bean scope中的单例与多例模式对比</h3><p><img src="/2021/08/15/ssm/Snipaste_2021-08-25_15-13-31.png" alt="Snipaste_2021-08-25_15-13-31"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Mybatis 默认开启一级缓存，只在一个sqlsession中使用，不论进行多少次相同的sql查询，结果都在同一个内存地址中。&lt;/p&gt;
&lt;p&gt;commit操作会强制清空一二级缓存&lt;/p&gt;
&lt;p&gt;二次缓存在mapper的namespace中生效，二级缓存的设置：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="Java" scheme="http://123.57.158.5/categories/Java/"/>
    
    
    <category term="Java" scheme="http://123.57.158.5/tags/Java/"/>
    
    <category term="Spring" scheme="http://123.57.158.5/tags/Spring/"/>
    
    <category term="MyBatis" scheme="http://123.57.158.5/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>IDEA下新建Servlet项目与Tomcat10不兼容问题</title>
    <link href="http://123.57.158.5/2021/08/03/servlet-tomcat-problem/"/>
    <id>http://123.57.158.5/2021/08/03/servlet-tomcat-problem/</id>
    <published>2021-08-03T14:28:13.000Z</published>
    <updated>2021-08-03T14:54:58.004Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习java后端，在使用IDEA新建Servlet+Tomcat项目的时候，碰到了问题。tomcat是通过<code>brew install tomcat</code>安装的。启动项目后可以看到首页内容，但是首页出现的所有超链接页面全部报错404。</p><p>花了一个晚上没查明白，第二天切换为了tomcat@9的最新版，就解决了！太离谱了</p><p><code>brew install tomcat</code>安装的是最新版Tomcat10最新版，但是可能是与Servlet不兼容。后使用<code>brew install tomact@9</code>安装了9的最新版9.0.46，然后将其添加到idea的tomcat路径中</p><p><img src="/2021/08/03/servlet-tomcat-problem/image-20210803225349780.png" alt="image-20210803225349780"></p><p><img src="/2021/08/03/servlet-tomcat-problem/image-20210803225439855.png" alt="image-20210803225439855"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在学习java后端，在使用IDEA新建Servlet+Tomcat项目的时候，碰到了问题。tomcat是通过&lt;code&gt;brew install tomcat&lt;/code&gt;安装的。启动项目后可以看到首页内容，但是首页出现的所有超链接页面全部报错404。&lt;/p&gt;
&lt;p&gt;花</summary>
      
    
    
    
    
    <category term="Java" scheme="http://123.57.158.5/tags/Java/"/>
    
    <category term="Servlet" scheme="http://123.57.158.5/tags/Servlet/"/>
    
    <category term="Tomcat" scheme="http://123.57.158.5/tags/Tomcat/"/>
    
    <category term="IDEA" scheme="http://123.57.158.5/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Java部分学习笔记3（接口、继承、多态到异常处理）</title>
    <link href="http://123.57.158.5/2021/07/14/java3/"/>
    <id>http://123.57.158.5/2021/07/14/java3/</id>
    <published>2021-07-13T16:26:15.000Z</published>
    <updated>2021-07-18T05:13:13.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口、继承与多态"><a href="#接口、继承与多态" class="headerlink" title="接口、继承与多态"></a>接口、继承与多态</h2><p>继承中重写父类的方法时候，修饰权限只能从小的范围到大的范围，比如父方法的protected权限，子方法不可以为private，可以为public。</p><h3 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h3><p>java中所有的类都继承于Object</p><p>几个重要方法：</p><ul><li><p><code>getClass()</code>方法</p><p>返回对象执行时的Class实例，使用此实例可以调用<code>getClass().getName()</code>获得类的名称。</p></li><li><p><code>toString()</code>方法</p><p>将对象以字符串形式返回，可以通过重写为对象提供一个特定的输出模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">reWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;重写函数&quot;</span>+getClass().getName()+<span class="string">&quot;toStrring方法&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> reWrite());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>equals()</code>方法</p><p>当两个自定义类的对象进行比较时候，返回的是false。因为此处默认实现的是“==”方法比较引用地址。这点<strong>不同于</strong>字符串、整型等对象的比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">overW m = <span class="keyword">new</span> overW();</span><br><span class="line">overW n = <span class="keyword">new</span> overW();</span><br><span class="line">System.out.println(m.equals(n));</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>转换注意理解向上转型（父类引用指向子类实例）和向下转型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Birds</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eating&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Seagull</span> <span class="keyword">extends</span> <span class="title">Birds</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 向上转型</span></span><br><span class="line">        Birds smallSeagull = <span class="keyword">new</span> Seagull();</span><br><span class="line">        <span class="comment">// 向下转型（显式类型转换）</span></span><br><span class="line">        Seagull sg = (Seagull) smallSeagull;</span><br><span class="line">        sg.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是要注意的是，向下转型时候如果父类对象不是子类对象的实例，就会发生ClassCastException异常。</p><p>向上转型不可以调用子类特有的方法没法调用的。</p><p><code>instanceof</code>java关键字，用于判断一个对象实例是否属于某个类。</p><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><p>在一个类中允许多个重名方法存在，只要参数不同即可，这就是方法的重载。参数类型不同，或参数个数不同，或参数顺序不同都可以构成参数重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orange</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// ...表示不定长参数 相当于a[]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m:a)&#123;</span><br><span class="line">            sum += m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 调用的其实是第一个add方法</span></span><br><span class="line">        System.out.println(add(<span class="number">1</span>));</span><br><span class="line">      <span class="comment">// 重载 调用的是第二个add</span></span><br><span class="line">        System.out.println(add(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态就是继承父类的方法，方便子类进行调用，同时也方便后期维护。子类也可以对父类方法进行重写，使得程序具有良好的可扩展性。</p><h3 id="抽象类与接口"><a href="#抽象类与接口" class="headerlink" title="抽象类与接口"></a>抽象类与接口</h3><p>略。因为个人原因暂停更新笔记。。。</p><p>重更时间待定</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口、继承与多态&quot;&gt;&lt;a href=&quot;#接口、继承与多态&quot; class=&quot;headerlink&quot; title=&quot;接口、继承与多态&quot;&gt;&lt;/a&gt;接口、继承与多态&lt;/h2&gt;&lt;p&gt;继承中重写父类的方法时候，修饰权限只能从小的范围到大的范围，比如父方法的protected权</summary>
      
    
    
    
    <category term="Java" scheme="http://123.57.158.5/categories/Java/"/>
    
    
    <category term="Java" scheme="http://123.57.158.5/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java部分学习笔记（类和对象——数字处理类）</title>
    <link href="http://123.57.158.5/2021/07/04/java2/"/>
    <id>http://123.57.158.5/2021/07/04/java2/</id>
    <published>2021-07-04T04:47:42.000Z</published>
    <updated>2021-07-12T16:46:51.713Z</updated>
    
    <content type="html"><![CDATA[<p>主要做自我知识点的补充，不是全面系统的笔记</p><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//定义一个String类型的成员变量</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="comment">//定义一个getName方法</span></span><br><span class="line">      <span class="keyword">int</span> id = <span class="number">0</span>;<span class="comment">//局部变量</span></span><br><span class="line">      setName(<span class="string">&quot;Java&quot;</span>);<span class="comment">//调用类中其他方法</span></span><br><span class="line">      <span class="keyword">return</span> id + <span class="keyword">this</span>.name;<span class="comment">//设置方法的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;<span class="comment">//定义一个setName方法</span></span><br><span class="line">      <span class="keyword">this</span>.name = name;<span class="comment">//将参数数值赋予类中的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;<span class="comment">//返回Book类引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><p>主要控制着对类和类的成员变量及成员方法的访问。</p><ul><li><strong>private</strong>：这个类将隐藏其内的所有数据，以免用户直接访问它。</li><li><strong>public</strong>：这个类中的数据可以被子类或其他包中的类使用。</li><li><strong>protected</strong>：只有本包内该类的子类或者其他类可以访问此类中的成员变量和成员方法。</li></ul><p>如果不使用修饰，则预设为protected，即只有一个包中的类可以调用这个类的成员变量或成员方法。同时<strong>类的权限设定会约束类成员的权限和设定</strong>。</p><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>例子中<code>this.name = name</code>this代表的是本类中的一个对象，第一个name就是成员变量，第二个则是传入的数值参数。</p><p><code>public Book getBook()&#123;return this;&#125;</code>例子中定义了Book类的方法，返回值为Book类对象。</p><h3 id="Java类的构造方法"><a href="#Java类的构造方法" class="headerlink" title="Java类的构造方法"></a>Java类的构造方法</h3><ul><li>每次实例化一个对象，都会调用构造方法</li><li>构造方法没有返回值</li><li>构造方法的名称要与本类的名称相同</li><li>无参的构造方法可以用this调用有参的构造方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orange</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Orange</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(<span class="string">&quot;this 调用了有参数的构造方法&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;这是无参的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Orange</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是有参的构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>可用于定义静态变量、常量和方法，目的是为了方便<strong>共享数据</strong>和<strong>共享方法</strong>。便于将不同类需要使用的成员分配到一个<strong>固定的内存位置</strong>中。</p><p>一般通过<code>类名.静态类成员</code>调用，而不建议通过<code>对象.静态类成员</code>调用，避免混淆静态成员和非静态成员。</p><p>静态成员同样收到权限修饰符（pbulic、protected、private）的约束。</p><p>静态方法中不可以使用this关键字</p><p>在静态方法中不可以<strong>直接</strong>调用非静态方法</p><p>不能将方法体内的局部变量声明为static</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;static method1 initiated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(StaticTest.PI);<span class="comment">//调用静态常量</span></span><br><span class="line">        System.out.println(StaticTest.id);<span class="comment">//调用静态变量</span></span><br><span class="line">        StaticTest.method1();<span class="comment">//调用静态方法</span></span><br><span class="line">      method1();<span class="comment">//调用静态方法（因为该静态方法在该类内部）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tips（类的初始化）：</p><p>执行类的时候如果希望先执行类的初始化操作，可以用static定义一个静态区域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">example</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的主方法"><a href="#类的主方法" class="headerlink" title="类的主方法"></a>类的主方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主方法是静态的，所以如要<strong>直接</strong>在主方法中调用其他方法，则该方法必须也是静态的。</li><li>主方法没有返回值</li><li>主方法的形参为数组。其中args[0]~args[n]分别带代表程序的第一个参数到第n个参数，可以使用args.length获取参数的个数。</li></ul><p>通过下面这个例子，我们可以来理解该类和对象的属性和行为，静态对象等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessProperty</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义静态成员变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">36</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用call()方法&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">2</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        AccessProperty obj1 = <span class="keyword">new</span> AccessProperty();</span><br><span class="line">        AccessProperty obj2 = <span class="keyword">new</span> AccessProperty();</span><br><span class="line">        <span class="comment">// 使用第二个对象调用静态变量</span></span><br><span class="line">        obj2.i = <span class="number">63</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个实例调用变量i的结果：&quot;</span>+obj1.i++);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个实例调用变量i的结果：&quot;</span>+obj2.i);</span><br><span class="line">        obj1.call();</span><br><span class="line">        System.out.println(<span class="string">&quot;第一个实例调用变量i的结果为：&quot;</span>+obj1.i);</span><br><span class="line">        System.out.println(<span class="string">&quot;第二个实例调用变量i的结果为：&quot;</span>+obj2.i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为：</span></span><br><span class="line"><span class="comment">第一个实例调用变量i的结果：63</span></span><br><span class="line"><span class="comment">第二个实例调用变量i的结果：64</span></span><br><span class="line"><span class="comment">调用call()方法</span></span><br><span class="line"><span class="comment">0 1 2 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第一个实例调用变量i的结果为：3</span></span><br><span class="line"><span class="comment">第二个实例调用变量i的结果为：3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>创建的两个对象位于不同的内存空间，但是他们都共享了静态变量i，所以两个对象调用的都死同一个变量i。第一个输出语句中i++会在调用obj1.i后执行，所以之后的变量i变成了64。调用call方法对i进行了重新的赋值，所以i最后变成了3。</p><h3 id="Java垃圾回收"><a href="#Java垃圾回收" class="headerlink" title="Java垃圾回收"></a>Java垃圾回收</h3><p>被java虚拟机视为“垃圾”：</p><ul><li>对象引用超过其作用范围，这个对象将被视为垃圾</li><li>将对象赋值为null</li></ul><p>但是对于不是通过new操作符创建的对象，java提供了<code>finalize()</code>方法，是Object类的方法，它被声明为protected，用户可以在自己的类中定义这个方法。</p><p>但是如过java虚拟机内存耗尽，也不会发生垃圾回收处理。因此java还提供了<code>System.gc()</code>方法来强制启动垃圾回收器</p><p><em>尝试编写一个类，定义一个修饰符为private的成员变量，并定义两个成员方法，一个方法实现为此成员变量赋值，另一个成员方法获取这个成员变量的值，保证其他类继承该类时能获取该类的成员变量的值。</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">extends</span> <span class="title">Human</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test2 test = <span class="keyword">new</span> Test2();</span><br><span class="line">        test.setAge(<span class="number">100</span>);</span><br><span class="line">        System.out.println(test.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>可以将int、boolean等基本类型转化为对象来进行处理</p><table><thead><tr><th>Integer方法</th><th>返回值</th><th>功能描述</th></tr></thead><tbody><tr><td>byteValue()</td><td>byte</td><td>以 byte 类型返回该 Integer 的值</td></tr><tr><td>Integer.CompareTo( anotherInteger)</td><td>int</td><td>在数字上比较 Integer 对象。如果这两个值相等，则返回0；如果调用对象的数值小于anotherInteger 的数值，则返回负值；如果调用对象的数值大于anotherInteger 的数值，则返回正值</td></tr><tr><td>equals(Object IntegerObj)</td><td>boolean</td><td>比较此对象与指定对象是否相等</td></tr><tr><td>intValue()</td><td>int</td><td>以 int 型返回此 Integer 对象</td></tr><tr><td>shortValue()</td><td>short</td><td>以 int 型返回此 Integer 对象</td></tr><tr><td>longValue()</td><td>long</td><td>以 long 型返回此 Integer 对象</td></tr><tr><td>floatValue()</td><td>float</td><td>以 float 型返回此 Integer 对象</td></tr><tr><td>doubleValue()</td><td>double</td><td>以 double 型返回此 Integer 对象</td></tr><tr><td>toString()</td><td>String</td><td>返回一个表示该 Integer 值的 String 对象</td></tr><tr><td>valueOf(String str)</td><td>Integer</td><td>返回保存指定的 String 值的 Integer 对象</td></tr><tr><td>parseInt(String str)</td><td>int</td><td>返回包含在由 str 指定的字符串中的数字的等价数值，如“1010101”返回1010101</td></tr><tr><td>parseInt(String str , int radix)</td><td>int</td><td>实现将字符串按照参数 radix 指定的进制转换为 int，如parseInt(1010 , 2)返回,将1010看做二进制返回十进制数10</td></tr></tbody></table><p>除此之外，Integer类还提供了4个常量。</p><ul><li><code>MAX_VALUE</code>：表示int类型可取的最大值，即2<sup>31</sup>-1。</li><li><code>MIN_VALUE</code>：表示int类型可取的最小值，即-2<sup>31</sup></li><li><code>SIZE</code>：用来以二进制补码形式表示int值的位数</li><li><code>TYPE</code>：表示基本类型int的Class实例</li></ul><table><thead><tr><th>Boolean方法</th><th>返回值</th><th>功能</th></tr></thead><tbody><tr><td>booleanValue()</td><td>boolean</td><td>将 Boolean 对象的值以对应的 boolean 值返回</td></tr><tr><td>equals(Object obj)</td><td>boolean</td><td>判断调用该方法的对象与 obj 是否相等。当且仅当参数不是 null，且与调用该 方法的对象一样都表示同一个 boolean 值的 Boolean 对象时，才返回 true</td></tr><tr><td>parseBoolean(String s)</td><td>boolean</td><td>将字符串参数解析为 boolean 值</td></tr><tr><td>toString()</td><td>string</td><td>返回表示该 boolean 值的 String 对象</td></tr><tr><td>valueOf(String s)</td><td>boolean</td><td>返回一个用指定的字符串表示的 boolean 值</td></tr></tbody></table><p><em><code>booleanValue()</code>和<code>valueOf(String s)</code>最大区别在于后者是静态方法，可以不用开辟新的内存空间</em></p><p>boolean的3个常量：</p><ul><li><code>TRUE</code>：表示对应基值true的Boolean对象。</li><li><code>FALSE</code>：表示对应基值false的Boolean对象</li><li><code>TYPE</code>：基本类型boolean的Class对象</li></ul><p>其他Character、Double、Number等等包装类的方法略，自行查询。</p><h2 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h2><h3 id="DecimalFormat类"><a href="#DecimalFormat类" class="headerlink" title="DecimalFormat类"></a>DecimalFormat类</h3><p>在Java中没有格式化的数据遵循以下原则：</p><ul><li>绝对值大雨0.001且小于10000000，使用常规小数形式表示。</li><li>其他使用科学记数法形式表示。</li></ul><p>DecimalFormat是NumberFormat的一个子类，用于格式化十进制数字。通过该类的<code>applyPattern()</code>方法来实现数字格式化。</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>代表阿拉伯数字，该位不存在则显示0</td></tr><tr><td>#</td><td>代表阿拉伯数字，该不存在则不显示</td></tr><tr><td>.</td><td>小数分隔符</td></tr><tr><td>-</td><td>负号</td></tr><tr><td>,</td><td>组分隔符</td></tr><tr><td>E</td><td>分隔科学记数法中的尾数和指数，E后面一般接0，不可接#</td></tr><tr><td>%</td><td>将数字转化为百分数</td></tr><tr><td>\u2030</td><td>转化为千分数</td></tr><tr><td>\u00A4</td><td>作为货币记号</td></tr><tr><td>‘</td><td>为特殊字符添加单引号，系统会将此符号视为普通符号处理</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecimalFormatDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个用于打印输出的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DecimalForamtMode</span><span class="params">(String pattern, <span class="keyword">double</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        DecimalFormat myFormat = <span class="keyword">new</span> DecimalFormat(pattern);</span><br><span class="line">        String output = myFormat.format(value);</span><br><span class="line">        System.out.println(value + <span class="string">&quot;,  &quot;</span> + pattern + <span class="string">&quot;,  &quot;</span> + output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DecimalForamtMode(<span class="string">&quot;000,000&quot;</span>, <span class="number">12331</span>);</span><br><span class="line">        DecimalForamtMode(<span class="string">&quot;##,#####&quot;</span>, <span class="number">12331</span>);</span><br><span class="line">        DecimalForamtMode(<span class="string">&quot;#,###$&quot;</span>, <span class="number">12331</span>);</span><br><span class="line">        DecimalForamtMode(<span class="string">&quot;#.##E0&quot;</span>, <span class="number">123310000</span>);</span><br><span class="line">        DecimalForamtMode(<span class="string">&quot;#.##%&quot;</span>, <span class="number">0.44</span>);</span><br><span class="line">        DecimalForamtMode(<span class="string">&quot;#.##\u2030&quot;</span>, <span class="number">0.44</span>);</span><br><span class="line">        DecimalForamtMode(<span class="string">&quot;#.##\u00A4&quot;</span>, <span class="number">0.44</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">12331.0,  000,000,  012,331</span></span><br><span class="line"><span class="comment">12331.0,  ##,#####,  12331</span></span><br><span class="line"><span class="comment">12331.0,  #,###$,  12,331$</span></span><br><span class="line"><span class="comment">1.2331E8,  #.##E0,  1.23E8</span></span><br><span class="line"><span class="comment">0.44,  #.##%,  44%</span></span><br><span class="line"><span class="comment">0.44,  #.##‰,  440‰</span></span><br><span class="line"><span class="comment">0.44,  #.##¤,  0.44￥</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>该类中<code>setGroupSize(2)</code>可以设置数字分组大小，2表示两个数字为一组。</p><h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3><p>提供了众多数学常用函数方法，都被定义为了static形式。</p><p>例如<code>Math.sin(Math.PI/2)</code>求90度的正弦值，<code>Math.cos(0)</code>求0的余弦值。</p><p><code>Math.exp(6)</code>e的6次方,<code>Math.log(Math.E)</code>代表ln(e),<code>Math.pow(2,3)</code>2的3次方,sqrt平方根，sbrt立方根等.</p><p><strong>函数取整</strong>：<code>Math.ceil()</code>向上取整；<code>Math.floor()</code>向下取整；<code>Math.rint()</code>去最接近的整数，一样近取偶数；<code>Math.round(float a)</code>加上0.5返回最接近的整数数；<code>Math.round(double a)</code>加上0.5返回最接近的整数，并强制转化为长整型。</p><p>max、min、abs等略</p><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><ol><li><p><code>Math.random()</code>随机生成0~1之间的double型数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取1～10之间随机整数</span></span><br><span class="line">(<span class="keyword">int</span>)(Math.random()*<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><strong>随机字符</strong>: <code>(char)(cha1 + Math.random()*(char2-char1+1));</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取随机a-z之间的字符</span></span><br><span class="line">(<span class="keyword">char</span>)(<span class="string">&#x27;a&#x27;</span>+Math.random()*(<span class="string">&#x27;z&#x27;</span>-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>));</span><br></pre></td></tr></table></figure></li><li><p>Random类</p><p><code>java.util.Random</code>。通过实例化一个Random对象创建一个随机数生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br></pre></td></tr></table></figure><p><code>nextInt()</code>, <code>nextFloat()</code>, <code>nextBoolean()</code>分别返回随机整数、浮点数和布尔值等</p></li></ol><h3 id="大数字高精度运算"><a href="#大数字高精度运算" class="headerlink" title="大数字高精度运算"></a>大数字高精度运算</h3><p>java提供了BigInteger和BigDecimal分别针对大数字处理和大小数处理的类，精度很高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数必须以字符串形式村子啊</span></span><br><span class="line">BigInteger demoInt = <span class="keyword">new</span> BigInteger(<span class="string">&quot;36&quot;</span>);</span><br><span class="line"><span class="comment">// 注意BigInteger对象的互相运算</span></span><br><span class="line">demoInt.add(<span class="keyword">new</span> BigInteger(<span class="string">&quot;8&quot;</span>));</span><br><span class="line">demoInt.multiply(<span class="keyword">new</span> BigInteger(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">demoInt.subtract(<span class="keyword">new</span> BigInteger(<span class="string">&quot;30&quot;</span>));</span><br><span class="line">demoInt.divide(<span class="keyword">new</span> BigInteger(<span class="string">&quot;3&quot;</span>));</span><br></pre></td></tr></table></figure><p><code>divideAndRemainder()</code>该除法方法返回数组，第一个为商，第二个为余数。</p><p>BigDecimal类的使用类似，但是构造参数除了string还可以是double：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal demoDec = <span class="keyword">new</span> BigDecimal(String val);</span><br><span class="line">BigDecimal demoDec = <span class="keyword">new</span> BigDecimal(<span class="keyword">double</span> val);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主要做自我知识点的补充，不是全面系统的笔记&lt;/p&gt;
&lt;h2 id=&quot;类和对象&quot;&gt;&lt;a href=&quot;#类和对象&quot; class=&quot;headerlink&quot; title=&quot;类和对象&quot;&gt;&lt;/a&gt;类和对象&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="Java" scheme="http://123.57.158.5/categories/Java/"/>
    
    
    <category term="Java" scheme="http://123.57.158.5/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Postman接口测试</title>
    <link href="http://123.57.158.5/2021/06/23/postman-test/"/>
    <id>http://123.57.158.5/2021/06/23/postman-test/</id>
    <published>2021-06-22T16:19:20.000Z</published>
    <updated>2021-07-04T17:37:11.447Z</updated>
    
    <content type="html"><![CDATA[<p>接口测试流程：</p><ol><li><p>获取接口信息</p><p>通过接口文档和抓包获取接口基本调用方式和返回</p></li><li><p>接口测试用例设计</p><p>根据获取到的接口信息，按照接口测试用例设计方法，设计参数和预期返回结果</p></li><li><p>接口发包</p><p>使用工具或者编程想接口传递参数</p></li><li><p>返回信息验证</p><p>获取接口返回的结果，进行解析和验证</p></li></ol><p>接口测试用例的设计：</p><p>以高德地图的一个get请求的ip查询请求地址为例，在postman中新建一个get请求，将抓包到的request url添加进去，可以测试接口的各项功能。例如改变参数后接口是否正常使用，例如各个参数是否必填。</p><p><img src="/2021/06/23/postman-test/image-20210624004047302.png" alt="image-20210624004047302"></p><p>当不勾选key参数后：</p><p><img src="/2021/06/23/postman-test/image-20210624004406045.png" alt="image-20210624004406045"></p><p>当填写错误的ip地址：</p><p><img src="/2021/06/23/postman-test/image-20210624004335989.png" alt="image-20210624004335989"></p><p>可以验证该get接口是否符合设计需求。</p><p>可以在ip地址参数中按照<strong>等价类</strong>及<strong>边界值</strong>法进行测试</p><p>在postman发送请求过程中，已经默默带上了请求头（request headers）信息，如果是在浏览器中也会带有。</p><p><img src="/2021/06/23/postman-test/image-20210624010413171.png" alt="image-20210624010413171"></p><h2 id="接口收发包过程"><a href="#接口收发包过程" class="headerlink" title="接口收发包过程"></a>接口收发包过程</h2><p>postman接口请求过程：</p><p>获取地址（URL）——设置http方法（GET POST等）——设置请求头域（request headers）——填写请求参数</p><p>postman接口响应验证：</p><p>http状态码——收到接口响应——检查返回头域（response headers）——查看返回主体内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接口测试流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取接口信息&lt;/p&gt;
&lt;p&gt;通过接口文档和抓包获取接口基本调用方式和返回&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口测试用例设计&lt;/p&gt;
&lt;p&gt;根据获取到的接口信息，按照接口测试用例设计方法，设计参数和预期返回结果&lt;/p&gt;
&lt;/l</summary>
      
    
    
    
    
    <category term="Postman" scheme="http://123.57.158.5/tags/Postman/"/>
    
    <category term="接口测试" scheme="http://123.57.158.5/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>java初学部分笔记(从语言基础到数组)</title>
    <link href="http://123.57.158.5/2021/06/09/java1/"/>
    <id>http://123.57.158.5/2021/06/09/java1/</id>
    <published>2021-06-09T14:53:06.000Z</published>
    <updated>2021-07-04T17:00:04.846Z</updated>
    
    <content type="html"><![CDATA[<p>每一个java程序必须包含一个<code>main()</code>方法，含有<code>main()</code>方法的类被称为主类。与python不同，需要有分号，单双引号有区分，同时文件名必须和类名同名。</p><p>Terminal运行java程序，先进行编译，后运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac xxx.java</span><br><span class="line">java xxx</span><br></pre></td></tr></table></figure><h2 id="java语言基础"><a href="#java语言基础" class="headerlink" title="java语言基础"></a>java语言基础</h2><h3 id="自增减运算符"><a href="#自增减运算符" class="headerlink" title="自增减运算符"></a>自增减运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">++a(--a)<span class="comment">//表示在使用变量a之前，先使a的值加（减）1</span></span><br><span class="line">a++(a++)<span class="comment">//表示在使用变量a之后，使a的值加（减）1</span></span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>；</span><br><span class="line">b = ++a;<span class="comment">//将a增加1，此时a为2，将a赋值给b，b为2</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line">b = a++;<span class="comment">//将a赋值给b，此时b为1，再将a增加1，a为2</span></span><br></pre></td></tr></table></figure><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p><strong>按位与</strong>：运算符<code>&amp;</code>，如果两个整型数据a、b对应位置都是1，则结果位才是1，否则为0</p><p><strong>按位或</strong>：运算符<code>|</code>，如果两个操作数对应位都是0，则结果才是0，否则为1</p><p><strong>按位取反</strong>：运算符<code>~</code>，对操作数二进制中的数取反</p><p><strong>按位异或</strong>：运算符<code>^</code>，当两个操作数的对应位相同（都为1或0），则结果为0，否则为1</p><p><strong>移位操作</strong>：<code>&lt;&lt;</code>：左移，右边移动的位补0。<code>&gt;&gt;</code>：右移，左边移空填入最高位的数。<code>&gt;&gt;&gt;</code>：无符号右移，左边移空位填入0</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件？值1:值2</span><br></pre></td></tr></table></figure><p>若条件为true，取值1，否则取值2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1&lt;2如果如果为真，返回true，否则返回false，最后赋值给a</span></span><br><span class="line"><span class="keyword">boolean</span> a = <span class="number">1</span>&lt;<span class="number">2</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><h3 id="for语句-foreach语句"><a href="#for语句-foreach语句" class="headerlink" title="for语句\foreach语句"></a>for语句\foreach语句</h3><p>for语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">  System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foreach语句是for语句的变体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量x: 遍历对象obj)&#123;</span><br><span class="line">  引用x的语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x: arr)&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;遍历arr输出&quot;</span>+x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>break只会跳出所在位置的内层循环，如果需要通过break跳出外层循环，需要给外层循环指定名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Loop: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j = j + <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">break</span> Loop;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>continue跳过本次循环到下一次循环，continue生效了，后面的语句就不执行。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 等价于 String a = new String(&quot;hello&quot;);</span></span><br><span class="line"><span class="keyword">char</span> b = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">String c = <span class="keyword">new</span> String(b, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// 3为截取3个字符。等价于 String c = &quot;cde&quot;;</span></span><br></pre></td></tr></table></figure><p>字符串查找方法中，<code>IndexOf()</code>/<code>LastIndexOf()</code>返回指定字符（串）（最后一次出现）的索引位置，值得注意的是<code>LastIndexOf()</code>中参数如果为<code>&quot;&quot;</code>，其结果等价于<code>length()</code>方法，返回字符串长度。</p><p><code>charAt()</code>返回指定位置字符串，<code>substring(int beginIndex, int endIndex)</code>截取字符串（结束字符串参数可省略）</p><p><code>trim()</code>返回字符串去除<strong>前后</strong>空格后的结果，<code>replace(&quot;old&quot;,&quot;new&quot;)</code>返回替换字符（串）后结果</p><p><code>startWith()</code>/<code>endsWith()</code>返回字符串是否以xx开头或结尾的布尔值。</p><p>java语言也有<code>equals()</code>方法比较字符串，不同于<code>==</code>比较内存地址。<code>equalsIngoreCase()</code>方法不区分大小写，返回布尔值</p><p><code>compareTo()</code>方法返回规则为，对比二者的第一个字符，如果不同返回字符的<strong>Unicode差值</strong>，结束；如果第一个字符相同，对比随后的字符，直到字符不同，返回差值结束。如果字符串完全相同（equal方法返回true），返回值为0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">Sytem.out.println(a.compareTo(b));</span><br><span class="line"><span class="comment">// 返回的是o的Unicode值减去h的Unicode值,-7</span></span><br></pre></td></tr></table></figure><p><code>toLowerCase()</code>/<code>toUpperCase()</code>返回转换大小写之后的字符串。</p><p><code>split(String sign, int limit)</code>方法分割字符串，limit是最高分割次数（可选参数），如果有多个分隔符需要<code>|</code>分割。返回的是数组对象</p><p>注意：<code> | . &amp; * +</code> 是转义字符, 要加<code>\\</code>转义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String local_ip = <span class="string">&quot;192.168.0.1&quot;</span>;</span><br><span class="line">String[] ip_list = local_ip.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line"><span class="comment">// 转换为列表显示</span></span><br><span class="line">System.out.println(Arrays.toString(ip_list));</span><br><span class="line"><span class="comment">// 逐个输出字符串数字</span></span><br><span class="line"><span class="keyword">for</span>(String num : ip_list)&#123;</span><br><span class="line">  System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>format()</code>方法实现对日期/时间的格式化转换，格式转换符可以自行搜索查询。</p><p>常见日期转换符：</p><table><thead><tr><th>转换符</th><th>说　　明</th><th>示　　例</th></tr></thead><tbody><tr><td>%tF</td><td>“年-月-日”格式（4位年份）</td><td>2021-03-20</td></tr><tr><td>%tD</td><td>“月/日/年”格式（2位年份）</td><td>03/20/21</td></tr><tr><td>%tr</td><td>“时：分：秒 PM（AM）”格式（12小时制）</td><td>03:22:06 下午</td></tr><tr><td>%tT</td><td>“时：分：秒”格式（24小时制）</td><td>15:23:50</td></tr><tr><td>%tR</td><td>“时：分”格式（24小时制）</td><td>15:23</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date</span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line">String s = String.format(<span class="string">&quot;%tD&quot;</span>, date);</span><br></pre></td></tr></table></figure><p>常见类型转换符：</p><table><thead><tr><th align="center">转换符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">%s</td><td align="center">字符串类型</td></tr><tr><td align="center">%c</td><td align="center">字符类型</td></tr><tr><td align="center">%b</td><td align="center">布尔类型</td></tr><tr><td align="center">%d</td><td align="center">整数类型（十进制）</td></tr><tr><td align="center">%x</td><td align="center">整数类型（十六进制）</td></tr><tr><td align="center">%o</td><td align="center">整数类型（八进制）</td></tr><tr><td align="center">%f</td><td align="center">浮点类型</td></tr><tr><td align="center">%a</td><td align="center">十六进制浮点类型</td></tr><tr><td align="center">%e</td><td align="center">指数类型</td></tr><tr><td align="center">%g</td><td align="center">通用浮点类型（f和e类型中较短的）</td></tr><tr><td align="center">%h</td><td align="center">散列码</td></tr><tr><td align="center">%%</td><td align="center">百分比类型</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(String.format(<span class="string">&quot;%o&quot;</span>,<span class="number">100</span>));</span><br><span class="line"><span class="comment">//将100由十进制转化为8进制，输出144</span></span><br></pre></td></tr></table></figure><p>注意：不能将上面的方法用于字符串转化数字，字符串转化数字有<code>parseInt()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer.parseInt(<span class="string">&quot;100&quot;</span>,<span class="number">16</span>);</span><br><span class="line"><span class="comment">//将“100”转化为16进制</span></span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p><strong>正则表达式</strong>进行字符串匹配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String reg = <span class="string">&quot;^(\\d&#123;6&#125;)(\\d&#123;4&#125;)(\\d&#123;2&#125;)(\\d&#123;2&#125;)(\\d&#123;3&#125;)([0-9]|X)$&quot;</span>;</span><br><span class="line"><span class="comment">//匹配身份证号</span></span><br><span class="line">String str1 = <span class="string">&quot;36220119990101&quot;</span>;</span><br><span class="line">String str3 = <span class="string">&quot;362201199901015201&quot;</span>;</span><br><span class="line">System.out.println(str1.matches(reg));</span><br><span class="line">System.out.println(str3.matches(reg));</span><br></pre></td></tr></table></figure><h4 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h4><p>java对字符串进行“+”拼接等操作后，会创建新的字符串，占用内存；所以对于频繁的字符串修改操作时候，可以使用<strong>StringBuilder类</strong>，是一种可变字符序列，提高效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">long</span> starttime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">  builder.append(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> time = endtime-starttime;</span><br><span class="line">System.out.println(time);</span><br></pre></td></tr></table></figure><p>此外，该类还带有<code>append()/insert()/delete()</code>等方法。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>创建数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 申明，再用new运算符进行内存分配</span></span><br><span class="line"><span class="keyword">int</span> arr[];</span><br><span class="line">String str[];</span><br><span class="line"><span class="comment">// 创建5个元素的整型数组</span></span><br><span class="line">arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 申明的同时为数组分配内存</span></span><br><span class="line"><span class="keyword">int</span> month[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">12</span>];</span><br></pre></td></tr></table></figure><p>初始化一维数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 常用</span></span><br><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><p>同理初始化二维数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><p>使用二维数组<code>arr[0][0]</code>返回第一行第一列</p><p>使用foreach遍历二维数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[][] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x[]:arr)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> num:x)&#123;</span><br><span class="line">    System.out.println(num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Arrays.fill(int[] arr, int value)</code>方法将value值赋给arr数组中每个元素，也可以在两个参数中间增加指定范围的索引。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">Arrays.fill(arr, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><p><code>Arrays.sort(object)</code>可对数组进行升序排序，结合了快速排序与归并排序的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将随机数放入数组后再排序</span></span><br><span class="line"><span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  arr[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">  System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(<span class="string">&quot;====&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a : arr) &#123;</span><br><span class="line">  System.out.println(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Arrays.copyOf(arr,int newlength)</code>方法拷贝数组，如果拷贝后长度大于被拷贝数组，则填充0，否则进行截取。<code>Arrays.copyOfRange(arr,int fromIndex,int toIndex)</code>截取长度复制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;每一个java程序必须包含一个&lt;code&gt;main()&lt;/code&gt;方法，含有&lt;code&gt;main()&lt;/code&gt;方法的类被称为主类。与python不同，需要有分号，单双引号有区分，同时文件名必须和类名同名。&lt;/p&gt;
&lt;p&gt;Terminal运行java程序，先进行编译，后</summary>
      
    
    
    
    <category term="Java" scheme="http://123.57.158.5/categories/Java/"/>
    
    
    <category term="Java" scheme="http://123.57.158.5/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://123.57.158.5/2021/05/23/hello-world/"/>
    <id>http://123.57.158.5/2021/05/23/hello-world/</id>
    <published>2021-05-23T02:34:37.977Z</published>
    <updated>2021-05-23T02:34:37.977Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>二叉树的一些性质及遍历</title>
    <link href="http://123.57.158.5/2021/03/11/b-tree-traverse/"/>
    <id>http://123.57.158.5/2021/03/11/b-tree-traverse/</id>
    <published>2021-03-11T02:05:20.000Z</published>
    <updated>2021-05-23T02:34:34.370Z</updated>
    
    <content type="html"><![CDATA[<p>算法中已经提到过二叉树，这里重点讲二叉树的遍历。参考书籍《大话数据结构》</p><p>二叉树的一些性质，这些性质可以很简单得到证明：</p><ol><li>在二叉树第i层最多有2<sup>i-1</sup>个节点</li><li>深部为k的二叉树最多有2<sup>k</sup>-1节点</li><li>对于任何一个二叉树，如果其终端节点（叶子节点）数为n<sub>0</sub>，度为2的节点数为n<sub>2</sub>，n<sub>0</sub>=n<sub>2</sub>+1</li><li>具有n个节点的完全二叉树的深度为[log<sub>2</sub>n]+1（[x]表示不大于x的最大整数）。<em>可以理解为性质2的倒推</em></li><li>如果有一颗n个节点的完全二叉树的节点按照层序编号（从第一层到最后一层，每层从左往右），对任意一个节点（1&lt;=i&lt;=n）有：<ul><li>如果i=1，则节点i是完全二叉树的根，无双亲；如果i&gt;1，其双亲节点是[i/2]</li><li>如果2i&gt;n，则节点i无左孩子（节点i为叶子节点）；否则<font color="red">左孩子是2i</font></li><li>如果2i+1&gt;n，则节点i无右孩子；否则其<font color="red">右孩子是节点2i+1</font></li></ul></li></ol><p><strong>二叉树的遍历</strong>：是指从根节点出发，按照某种次序依次访问二叉树中所有节点，使得每个节点被访问一次且仅被访问一次。</p><div class="mermaid">graph TDA --&gt; BA --&gt; CB --&gt; DB --&gt; EC --&gt; FC --&gt; G</div><p>遍历可分为前序（ABC)  中序(BAC)  后序(BCA)</p><p><strong>前序遍历</strong>：依次访问根节点——左孩子——右孩子。上图的二叉树前序遍历后为ABDECFG</p><p><strong>中序遍历</strong>：依次访问左孩子——根节点——右孩子。DBEAFCG</p><p><strong>后序遍历</strong>：依次访问左孩子——右孩子——根节点。DEBFGCA</p><p>层序遍历：一层层从左至右。ABCDEFG</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;算法中已经提到过二叉树，这里重点讲二叉树的遍历。参考书籍《大话数据结构》&lt;/p&gt;
&lt;p&gt;二叉树的一些性质，这些性质可以很简单得到证明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在二叉树第i层最多有2&lt;sup&gt;i-1&lt;/sup&gt;个节点&lt;/li&gt;
&lt;li&gt;深部为k的二叉树最多有2&lt;sup&gt;k</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://123.57.158.5/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二叉树" scheme="http://123.57.158.5/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="算法" scheme="http://123.57.158.5/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux文本编辑器及软件安装</title>
    <link href="http://123.57.158.5/2021/01/06/Linux%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    <id>http://123.57.158.5/2021/01/06/Linux%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</id>
    <published>2021-01-06T15:26:14.000Z</published>
    <updated>2021-05-23T02:34:39.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nano文本编辑器"><a href="#Nano文本编辑器" class="headerlink" title="Nano文本编辑器"></a>Nano文本编辑器</h2><blockquote><p>复制、剪贴和粘贴</p><p>复制一整行：Alt+6</p><p>剪贴一整行：Ctrl+K</p><p>粘贴：Ctrl+U</p><p>如果需要复制／剪贴多行或者一行中的一部分，先将光标移动到需要复制／剪贴的文本的开头，按Ctrl+6（或者Alt+A）做标记，然后移动光标到 待复制／剪贴的文本末尾。这时选定的文本会反白，用Alt+6来复制，Ctrl+K来剪贴。若在选择文本过程中要取消，只需要再按一次Ctrl+6。</p><p>搜索</p><p>按Ctrl+W，然后输入你要搜索的关键字，回车确定。这将会定位到第一个匹配的文本，接着可以用Alt+W来定位到下一个匹配的文本。</p><p>保存</p><p>使用Ctrl+O来保存所做的修改</p><p>退出</p><p>按Ctrl+X</p></blockquote><p><code>nano file</code>可以直接路径，没有该文件的话，就会创建一个再编辑</p><p><strong>配置nano编辑器</strong></p><p>单个用户配置：</p><p>一般通过<code>/home/username</code>路径下的.nanorc文件修改。<code>nano .nanorc</code></p><p>配置语言以set开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 相当于命令后面加 -m 参数 鼠标生效</span><br><span class="line">set mouse</span><br><span class="line"># 相当于 -i 参数 自动缩进</span><br><span class="line">set autoindent</span><br><span class="line"># 激活职能home键 -A参数</span><br><span class="line">set smarthome</span><br></pre></td></tr></table></figure><p>全局配置：</p><p><code>/etc/nanorc</code>文件中修改（root用户）</p><p><code>sudo nano /etc/nanorc</code></p><p><strong>配置终端</strong></p><p>单个用户的终端配置文件<code>/home/username/.bashrc</code></p><p><code>nano ~/.bashrc</code></p><p>bash其实是一种shell，shell用于解释我们输入终端的各种命令的，是用户和操作系统之间的一个命令解释器。</p><p>配置.bashrc文件可以修改终端的各种配置，如命令提示符样式，创建命令别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建别名 alias xx=&#x27;command&#x27;</span><br><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias la=&#x27;ls -A&#x27;</span><br><span class="line">alias l=&#x27;ls -CF&#x27;</span><br></pre></td></tr></table></figure><p>全局配置的路径：<code>/etc/bash.bashrc</code>，但是家目录下的<font color="red">优先级</font>高于系统的bash.bashrc文件</p><p><strong>profile配置文件</strong></p><p>单个用户：<code>~/.profile</code>，全局<code>/etc/profile</code></p><p>bashrc应用于图形化终端，profile应用于TTY1-TTY6这种需要用户登录的终端。profile文件会调用.bashrc</p><img src="/2021/01/06/Linux%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/151709029500416466.jpg" alt="151709029500416466" style="zoom:33%;"> <p>bashrc 和 profile二者修改后都是下次登陆生效，需要立即生效使用source命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc</span><br><span class="line">source .profile</span><br></pre></td></tr></table></figure><h2 id="Ubuntu软件仓库"><a href="#Ubuntu软件仓库" class="headerlink" title="Ubuntu软件仓库"></a>Ubuntu软件仓库</h2><p>对于ubuntu系统，在全世界各地分布有软件仓库。Linux的.deb软件包相较于windows的exe安装包文件，包含了依赖关系的管理，对于依赖的软件会自动下载。</p><p><strong>管理软件仓库</strong></p><p>如果我们要切换软件仓库，可以通过编辑软件仓库列表文件<code>/etc/apt/sources.list</code>(root模式)</p><p>一般来说，这个文件中有作用的行是由以下两个指令开头：</p><ul><li>deb: 用于下载软件的二进制版本，大多数情况下我们用的是这个</li><li>deb-src: 用于下载软件的源代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举例其中一行</span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic universe</span><br></pre></td></tr></table></figure><p>第二个是仓库地址，第三个bionic是Ubuntu版本代号，第三个universe是软件仓库的区域，也就是要查看的代码仓库的不同分区。</p><p>Ubuntu图形界面中software&amp;update中可以直接切换软件仓库，更加方便</p><h3 id="终端包管理工具"><a href="#终端包管理工具" class="headerlink" title="终端包管理工具"></a>终端包管理工具</h3><p><code>apt-get</code>/<code>apt</code>管理包命令</p><p><code>aptitude</code>：这个命令再卸载软件时可以卸载不用的依赖</p><p><code>sudo apt update</code>更新软件包缓存；<code>sudo apt-cache search</code>搜索软件包；<code>sudo apt install</code>安装软件包；<code>sudo apt upgrade</code>升级所有已安装软件包；<code>sudo apt autoremove</code></p><p><code>dpkg</code>命令时apt-get和aptitude两个命令的后端（backend）命令</p><p>依赖链：<code>dpkg--&gt;apt-get,aptitude--&gt;Ubuntu Software</code></p><p>使用dpkg可以安装本地的软件包：<code>sudo dpkg -i *.deb</code>，卸载：<code>sudo dpkg -r 包名</code></p><h2 id="阅读手册"><a href="#阅读手册" class="headerlink" title="阅读手册"></a>阅读手册</h2><h3 id="man命令"><a href="#man命令" class="headerlink" title="man命令"></a>man命令</h3><p>例如<code>man ls</code>，会出现ls命令的使用说明。手册的各部分区域说明：</p><p><strong>NAME</strong></p><p>命令的全称</p><p><strong>SYNOPSIS</strong></p><p>概要，使用此命令的方法</p><p><code>ls [OPTION]... [FILE]...</code></p><img src="/2021/01/06/Linux%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/image-20210110233353458.png" alt="image-20210110233353458" style="zoom:50%;"><p>粗体：原封不动输入</p><p>下划线：用实际内容替代</p><p><code>[-hvc]</code>中括号内为可选参数</p><p><code>a|b</code>输入a或b选项</p><p>OPTION参数，省略号表示可输入多个参数</p><p><strong>DESCRIPTION</strong></p><p>列出所有参数和用法</p><p>其他区域：<strong>AUTHOR</strong>, <strong>REPROTIONG BUGS</strong>, <strong>COPYRIGHT</strong>, <strong>SEE ALSO</strong></p><h3 id="apropos查找命令"><a href="#apropos查找命令" class="headerlink" title="apropos查找命令"></a>apropos查找命令</h3><p>apropos命令后面添加关键字即可（根据手册中的关键字）</p><p>例如需要查找控制音量的方法 <code>apropos sound</code></p><img src="/2021/01/06/Linux%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/image-20210111005834669.png" alt="image-20210111005834669" style="zoom:67%;"><h3 id="其他查阅手册的方法"><a href="#其他查阅手册的方法" class="headerlink" title="其他查阅手册的方法"></a>其他查阅手册的方法</h3><p><strong>很多命令都支持<code>-h</code>参数</strong></p><p>比man命令的内容稍显简便</p><p><strong>whatis命令</strong></p><p>man的精简版，显示man的NAME区域</p><h3 id="文件查找命令"><a href="#文件查找命令" class="headerlink" title="文件查找命令"></a>文件查找命令</h3><h4 id="locate命令"><a href="#locate命令" class="headerlink" title="locate命令"></a>locate命令</h4><p><font color="red">查找速度极快，查找包含关键字的文件。</font></p><p><code>locate xxx</code>会查找并列出xxx（目录或文件名包含xxx）所在的所有目录</p><p>缺陷：如果是刚新建的文件locate是查不到的，因为locate不是查找硬盘，是在数据库（包含文件的列表和文件的位置）中查找记录。对于刚创建的文件，没有更新进数据库（一般24小时自动更新）</p><p>当然也可以用updatedb命令强制系统立即更新数据库 <code>sudo updatedb</code></p><h4 id="find命令深入查找"><a href="#find命令深入查找" class="headerlink" title="find命令深入查找"></a>find命令深入查找</h4><font color="red">遍历实际的硬盘的文件，还可以对查找的文件进行操作。查找文件要完全对应关键字，但是可以用正则匹配功能强大</font><p>find 默认当前子目录查找，也可以指定目录查找；用文件名、创建时间等查找；最后可以对找到的文件进行操作</p><p>例如：<code>find -name &#39;new_file&#39;</code>根据名字查找当前目录的文件 ; <code>find /var/log -name &#39;syslog&#39;</code>查找其他目录的文件； </p><p><strong>根据文件大小查找</strong></p><p><code>find /var -size +10M</code>查找/var目录下大于10m的文件</p><p><strong>根据文件的最近访问时间查找</strong></p><p><code>find -name &#39;*.txt&#39; -atime -7</code>查找7天内访问的txt文件</p><p><strong>仅查找目录或文件</strong></p><p><code>find -name &#39;file1&#39; -type d</code>查找名为file1的目录</p><p><strong>操作查找结果</strong></p><p>格式化输出：<code>find -name &#39;file1&#39; -printf &#39;%p - %u\n&#39;</code>将查找到的文件格式化输出为<code>文件名 - 用户名</code>的形式</p><p>删除操作：<code>xxx -delete</code></p><p>调用其他命令：</p><p>加上<code>-exec</code>参数之后就可以接其他命令了，十分强大</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/var目录下的所有txt文件修改权限为600</span></span><br><span class="line">find /var -name <span class="string">&#x27;*.txt&#x27;</span> -<span class="built_in">exec</span> chmod 600 &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>大括号表示刚查找到的文件，<code>\;</code>是exec的结尾</p><p>将<code>-exec</code>参数换成<code>-ok</code>参数效果一样，但是会对每个文件都做确认提示！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Nano文本编辑器&quot;&gt;&lt;a href=&quot;#Nano文本编辑器&quot; class=&quot;headerlink&quot; title=&quot;Nano文本编辑器&quot;&gt;&lt;/a&gt;Nano文本编辑器&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;复制、剪贴和粘贴&lt;/p&gt;
&lt;p&gt;复制一整行：Alt+6&lt;/</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="http://123.57.158.5/tags/Linux/"/>
    
    <category term="操作系统" scheme="http://123.57.158.5/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Terminal" scheme="http://123.57.158.5/tags/Terminal/"/>
    
    <category term="Ubuntu" scheme="http://123.57.158.5/tags/Ubuntu/"/>
    
    <category term="Nano" scheme="http://123.57.158.5/tags/Nano/"/>
    
    <category term="RTFM" scheme="http://123.57.158.5/tags/RTFM/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络5之实践网络分析异步任务（更新中</title>
    <link href="http://123.57.158.5/2020/12/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C5/"/>
    <id>http://123.57.158.5/2020/12/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C5/</id>
    <published>2020-12-30T16:43:42.000Z</published>
    <updated>2021-05-23T02:34:44.457Z</updated>
    
    <content type="html"><![CDATA[<p>内容安排</p><div class="mermaid">graph LR;a[搭建服务基本框架]--&gt;b[Python操作字节序列]b--&gt;c[实现IP报文解析器]c--&gt;d[实现UDP报文解析器]d--&gt;e[实现TCP报文解析器]</div><p><img src="/2020/12/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C5/image-20210102231245869.png" alt="image-20210102231245869"></p><h2 id="搭建服务基本框架"><a href="#搭建服务基本框架" class="headerlink" title="搭建服务基本框架"></a>搭建服务基本框架</h2><p>网卡工作的两种模式：</p><table><thead><tr><th>混杂模式</th><th>非混杂模式</th></tr></thead><tbody><tr><td>接受所有经过网卡设备的数据</td><td>只接受目的地址指向自己的数据</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内容安排&lt;/p&gt;
&lt;div class=&quot;mermaid&quot;&gt;graph LR;
	a[搭建服务基本框架]--&amp;gt;b[Python操作字节序列]
	b--&amp;gt;c[实现IP报文解析器]
	c--&amp;gt;d[实现UDP报文解析器]
	d--&amp;gt;e[实现TCP报文解析器</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="Python" scheme="http://123.57.158.5/tags/Python/"/>
    
    <category term="实战" scheme="http://123.57.158.5/tags/%E5%AE%9E%E6%88%98/"/>
    
    <category term="计算机网络" scheme="http://123.57.158.5/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络4应用层</title>
    <link href="http://123.57.158.5/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://123.57.158.5/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2020-12-29T07:02:01.000Z</published>
    <updated>2021-05-23T02:34:44.271Z</updated>
    
    <content type="html"><![CDATA[<p>应用层位于TCP/IP四层模型的最上面，对应七层模型的应用层、表示层会话层。</p><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201229150405939.png" alt="image-20201229150405939"></p><h2 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h2><p>传输层给及以下的层提供了完整的通信服务，应用层主要是面向用户的一层。</p><p>应用层的一些协议：</p><table><thead><tr><th>FTP</th><th>HTTP</th><th>HTTPS</th><th>DNS</th><th>TELNET</th></tr></thead><tbody><tr><td>21</td><td>80</td><td>443</td><td>53</td><td>23</td></tr></tbody></table><p>应用层内容包括以后的应用层软件和面向传输层的编程</p><p>传输层TCP\UDP协议的使用场景：</p><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201229151054596.png" alt="image-20201229151054596"></p><p>应用层主要功能是定义应用间通信的规则，比如应用进程的报文类型（请求报文、应答报文）；报文的语法和格式；应用进程发送数据的时机、规则</p><h2 id="DNS详解"><a href="#DNS详解" class="headerlink" title="DNS详解"></a>DNS详解</h2><p>DNS(Domain Name System: 域名系统)</p><p>首先我们是通过<code>ip地址:端口</code>来指定某个网络服务（web服务、网络存储、远程调用等等），而DNS就是方便记录各项网络服务地址的。</p><p>使用域名帮助记忆。将域名解析为IP地址。</p><ul><li>域名由点、字母和数字组成</li><li>点分割不同的域</li><li>域名可以分为顶级域、二级域、三级域</li></ul><p>例如<code>www.rice-and-bran.site</code>，site就是顶级域，rice-and-bran是二级域，www是三级域。</p><div class="mermaid">graph LR;    A{顶级域}--&gt;B{国家}    A--&gt;C{通用}    B--&gt;D[cn]    B--&gt;E[us]    C--&gt;F[com]    C--&gt;G[net]    C--&gt;H[gov]</div><p>当访问一个域名的时候，首先会访问本地域名服务器，若没有则访问根域名服务器，再访问顶级域名服务器，一步步向下。</p><h2 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h2><p>DHCP(Dynamic Host Configuration Protocol: 动态主机设置协议)，是一个局域网协议，应用UDP协议的应用层协议。</p><p>比如电脑中的TCP/IP协议设置中，默认选择自动获取IP地址，就是通过DHCP协议自动获得局域网分配的ip，（非永久，有租期的一个概念）</p><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201230233537304.png" alt="image-20201230233537304"></p><p>当设备要接入局域网，DHCP协议工作过程：</p><ul><li>DHCP服务器监听默认端口：67</li><li>主机使用UDP协议广播DHCP发现报文</li><li>DHCP服务器发出DHCP提供报文</li><li>主机向DHCP服务器发出DHCP请求报文</li><li>DHCP服务器回应并提供IP地址</li></ul><p>之后如果设备还要与外网通信，则需要通过NAT技术转换公网IP进行通信</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP(HyperText Transfer Protocol: 超文本传输协议)，是可靠的数据传输协议</p><p><code>http(s)://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code></p><p>http一般使用80端口，https一般使用443端口</p><p>web服务器应答过程: </p><div class="mermaid">graph LR;a[接收客户端连接]--&gt;b[接收请求报文]b--&gt;c[处理请求]c--&gt;d[访问web资源]d--&gt;e[构造应答]e--&gt;f[发送应答]</div><table><thead><tr><th>HTTP请求方法</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>获取指定的服务端资源/提交数据</td></tr><tr><td>POST</td><td>提交数据到服务端</td></tr><tr><td>DELETE</td><td>删除指定的服务端资源</td></tr><tr><td>UPDATE</td><td>更新指定的服务端资源</td></tr><tr><td>PUT</td><td></td></tr><tr><td>OPTIONS</td><td></td></tr><tr><td>PATCH</td><td></td></tr><tr><td>HEAD</td><td></td></tr><tr><td>TRACE</td><td></td></tr></tbody></table><ol><li>在地址中指定资源：</li></ol><p><code>xxx/111.html</code>, <code>xxx/?a=1&amp;b=1</code></p><ol start="2"><li>在请求中指定资源：</li></ol><p>请求报文和应答报文的组成：</p><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201230235508131.png" alt="image-20201230235508131"></p><p>例如通过POST请求来指定资源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST https://www.rice-and-bran.com HTTP/1.1</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;sort&quot;:0,</span><br><span class="line">&quot;unlearn&quot;:0,</span><br><span class="line">&quot;page&quot;:2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到请求后，web服务器返回应答报文，包含状态码，具体有这些类型：</p><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>200~299</td><td>成功状态码</td></tr><tr><td>300~399</td><td>重定向状态码</td></tr><tr><td>400~499</td><td>客户端错误状态码</td></tr><tr><td>500~599</td><td>服务端错误状态码</td></tr></tbody></table><h2 id="HTTP工作的结构"><a href="#HTTP工作的结构" class="headerlink" title="HTTP工作的结构"></a>HTTP工作的结构</h2><h3 id="web缓存"><a href="#web缓存" class="headerlink" title="web缓存"></a>web缓存</h3><p>优先把热门数据缓存起来</p><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231000807836.png" alt="image-20201231000807836"></p><h3 id="web代理"><a href="#web代理" class="headerlink" title="web代理"></a>web代理</h3><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231001012582.png" alt="image-20201231001012582"></p><p>作用：1.屏蔽server部署的结构，不给用户直接看到；2.保证server的安全，比如在proxy中设置防火墙</p><p><strong>正向代理</strong>：代表client去访问server；<strong>反向代理</strong>：代表server把数据返回给客户端</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>CDN(Content Delivery Network: 内容分发网络)，为了进行多媒体内容的加速</p><p>在距离用户近的地方部署cdn服务器备份多媒体内容，使用户更快的收到内容，改善用户获取多媒体内容的体验。</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>例如搜索引擎的爬虫，爬取信息，建立索引。但是不好的爬虫会增加网络拥塞，损耗服务器资源</p><h2 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h2><p>HTTP是明文传输的，但是对于一些敏感信息传输。https协议会对传输内容进行加密，https为443端口</p><h3 id="加密模型"><a href="#加密模型" class="headerlink" title="加密模型"></a>加密模型</h3><p>对称加密：加密解密密钥统一；非对称加密则不一致</p><p>假设加密密钥为A，解密密钥为B；AB是拥有一定数学关系的一组密钥。</p><p>通过<strong>公钥</strong>（公开）进行加密，<strong>私钥</strong>（非公开，用户使用）进行解密</p><h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><p>数字证书是可信任组织颁发给特定对象的认证</p><p>数字证书的内容：证书格式、版本号；证书序列号；有效期；对象名称；<font color="red">对象公开密钥</font>…</p><p><strong>SSL</strong>(Secure Sockets Layer: 安全套接层)，是介入传输层和应用层之间，保证数据安全和数据完整，对传输层数据进行加密后传输</p><p>https协议加密过程：</p><p><em>E：encode，D：decode</em></p><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231003216484.png" alt="image-20201231003216484"></p><p>SSL安全参数握手过程: </p><p>1，2：</p><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231003549226.png" alt="image-20201231003549226"></p><p>3：客户端收到服务端的加密算法、数字证书以及随机数后。需要</p><ul><li>确认证书是否有效</li><li>生成随机数3</li><li>使用服务器公钥加密随机数3</li></ul><p>4：发送加密后的数据给服务器</p><p><img src="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231003818999.png" alt="image-20201231003818999"></p><p>然后服务器解密随机数3，两边都拥有了三个随机数</p><p>5：两边根据随机数1,2,3和相同的算法生成<font color="red">对称密钥</font>，双方使用对称密钥进行加密通信</p><p>ssl参数握手过程的特点：</p><ul><li>综合使用对称加密和非对称加密</li><li>双方分别生成秘钥，没有经过传输过程</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;应用层位于TCP/IP四层模型的最上面，对应七层模型的应用层、表示层会话层。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://123.57.158.5/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>红会急救培训笔记</title>
    <link href="http://123.57.158.5/2020/12/28/First-Aid-Elementary-Course/"/>
    <id>http://123.57.158.5/2020/12/28/First-Aid-Elementary-Course/</id>
    <published>2020-12-28T14:52:35.000Z</published>
    <updated>2021-05-23T02:34:37.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>半个月前我报名了北京红会的16学时急救课程，27，28号两天是培训时间，地点是在门头沟区的心田培训中心。主要学习内容是CPR（心肺复苏）、AED的使用、常见疾病处置、创伤处理等。对我来说是一次很有收获的体验，开这篇文章记录一下参加课程的笔记、心得。</p><img src="/2020/12/28/First-Aid-Elementary-Course/11c0950fb47eebdb.jpeg" alt="11c0950fb47eebdb" style="zoom:67%;"><p><strong>红十字会起源</strong>：亨利杜南目睹索尔费里诺战役后，成立伤兵救护委员会，后演变为日内瓦公约</p><h2 id="day1-徒手心肺复苏"><a href="#day1-徒手心肺复苏" class="headerlink" title="day1 徒手心肺复苏"></a>day1 徒手心肺复苏</h2><p>抢救生命的绿色通道“生存链”</p><div class="mermaid">graph LR;A[应急反应系统识别和启动]--&gt;B[高质量心肺复苏]B--&gt;C[快速除颤]C--&gt;D[基础及高级急救医疗服务]D--&gt;E[高级生命维护和骤停后护理]</div><p>救护员课程重点学习心肺复苏和除颤</p><p><strong>猝死</strong>：平素身体健康或貌似健康的患者，在出乎意料的短时间内，因自然疾病而突然死亡即为猝死。对于死亡时间，世卫组织定义从发病到死亡6小时内，一般认为1小时内死亡者多为心源性猝死。</p><p><strong>心肺复苏</strong>：指救护员在现场为心脏骤停患者实施胸外按压和人工呼吸。</p><p>我国每年有约54万人死于心脏猝死，如果经过有效的心肺复苏，部分患者可存活。</p><p>黄金四分钟：</p><p><img src="/2020/12/28/First-Aid-Elementary-Course/image-20201229005456937.png" alt="image-20201229005456937"></p><p>判断+救治步骤：</p><ol><li><p>环境安全，做好防护。</p></li><li><p>轻拍患者双肩，呼喊（“先生先生，您怎么了？”），确认有无意识。解开衣服，仔细观察呼吸（1001-1007），确认有无呼吸（或仅仅是喘息）</p></li><li><p>无呼吸无意识，大声呼叫，让人帮忙拨打120，取AED。表明救护员身份并寻求援助。</p></li><li><p>立即进入<strong>心肺复苏</strong>程序，C-A-B。（如果是溺水则是A-B-C，要先保持气道畅通）</p><p><img src="/2020/12/28/First-Aid-Elementary-Course/image-20201229005703564.png" alt="image-20201229005703564"></p><blockquote><p>心肺复苏CAB分别代表:1.C: circulation循环，即要求胸外按压，保证心脏射血，体内血液循环。2.A: airway气道，即要求保持气道通畅，要注意清理口腔呕吐物，采取仰颌抬颏法使呼吸顺畅。3.B: breathing呼吸，即口对口人工呼吸，每一次吹气要看到胸廓有起伏，但也不要用力过猛。保证氧气输送到肺组织。</p></blockquote><p>心肺复苏注意事项：</p><ul><li><p>按压位置位于两乳头连线中点的胸骨处，双手十指相扣，掌根对着胸骨，手臂不弯曲，使用上半身力量，髋关节为轴。</p></li><li><p>按压深度约5-6cm（一般胸骨到背部厚度三分之一）</p></li><li><p>每分钟100~120次</p><p><img src="/2020/12/28/First-Aid-Elementary-Course/image-20201229005818116.png" alt="image-20201229005818116"></p></li><li><p>按压时时刻注意患者头部，有反应则停止并判断情况。</p></li><li><p>医生没到/病人没醒按压不能停！！！！ （人工呼吸、使用AED除外）</p></li><li><p>人工呼吸前检查气道，口腔无异物，仰额抬颏法。嘴包嘴吹气，持续1秒</p><p><img src="/2020/12/28/First-Aid-Elementary-Course/image-20201229005855463.png" alt="image-20201229005855463"></p></li><li><p>吹压比/吹气比：<strong>30：2</strong>（30次按压，两次人工呼吸）。<font color="red">持续五个周期的30：2的心肺复苏</font>，再检查患者反应和呼吸（脖子动脉）</p></li></ul></li><li><p>AED抵达后，立即开机，将电极贴对应身体裸露位置，右边锁骨下面，一处左边乳房下面。前胸后背也可以。</p></li><li><p>按照AED提示除颤，随后根据自己节奏30：2心肺复苏。</p></li><li><p>呼吸心跳恢复后，调整侧卧位</p></li></ol><p><img src="/2020/12/28/First-Aid-Elementary-Course/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5" alt="img"></p><p>心肺复苏成功的标志：恢复自主心跳自主呼吸及意识</p><p>可参考表现：眼球活动、睫毛放射、四肢活动；瞳孔扩大逐渐缩回变小；有知觉、反应、脸色转红等</p><blockquote><p>自动体外除颤器又称自动体外电击器、自动电击器、自动除颤器、心脏除颤器及傻瓜电击器等，是一种便携式的医疗设备，它可以诊断特定的心率失常，并且给予电击<a href="https://baike.baidu.com/item/%E9%99%A4%E9%A2%A4/3310526">除颤</a>，是可被非专业人员使用的用于抢救心脏骤停患者的医疗设备。在心跳骤停时，只有在最佳抢救时间的“黄金4分钟”内，利用自动体外除颤器（AED）对患者进行除颤和心肺复苏，才是最有效制止猝死的办法。</p></blockquote><p><strong>异物阻塞处置</strong>：</p><p>腹部冲击法（海姆立克法）冲击患者腹部，使横膈肌急速提升，呼吸道压力骤升，异物排出。（极端场景才使用，因为可能造成脏器损伤，一般拍拍背就行）</p><img src="/2020/12/28/First-Aid-Elementary-Course/image-20201229010943066.png" alt="image-20201229010943066" style="zoom:50%;"><p>问题及其他病情处置：</p><ol><li>隔着薄衣服可以做心肺复苏吗？可以，但要保证按压高质量。</li><li>有呼吸无意识怎么处置？恢复安全体位即可</li><li>癫痫发作怎么处置？腾出空间，让其自我恢复，不做处理</li><li>患者倒地后判断呼吸要通过身体起伏而不是脉搏？1）脉搏非专业人士判断不准 2）判断呼吸没有，心跳一定是停止的，因为心跳停止后呼吸才停。</li></ol><h2 id="day2-创伤现场救治"><a href="#day2-创伤现场救治" class="headerlink" title="day2 创伤现场救治"></a>day2 创伤现场救治</h2><p><img src="/2020/12/28/First-Aid-Elementary-Course/image-20201229014414580.png" alt="image-20201229014414580"></p><p>流血包扎原则：</p><ul><li><p>包扎前上敷料，从远心端–&gt;近心端（毒蛇咬伤则相反）包扎。手臂包扎使用螺旋包扎法，手背手心使用八字包扎法，关节包扎使用人字形包。胸部、腹部用三角巾包扎。</p><p><em>图为胸部包扎处理</em></p><p><img src="/2020/12/28/First-Aid-Elementary-Course/image-20201229014508145.png" alt="image-20201229014508145"></p></li><li><p>包扎结束再外侧（大拇指那边一侧）</p></li><li><p>包扎时候绷带朝上拿</p></li><li><p>包扎完检查末端血液循环（比如按压指尖）</p></li><li><p>使用三角巾悬挂</p></li></ul><p>骨折处理：</p><ul><li>伤侧房足够的软垫、如果是开放骨折不能清理，只制动不复位</li><li>使用三角巾悬挂</li><li>加制动带</li></ul><p>三角巾悬挂原则：</p><p>如果是上臂、前臂受伤使用大悬臂带，如果是肢末端（手，锁骨）使用三角叫悬臂带</p><p><em>图为大悬臂带</em></p><p><img src="/2020/12/28/First-Aid-Elementary-Course/image-20201229014614803.png" alt="image-20201229014614803"></p><p>具体其他的包扎 悬挂方法建议看视频复习巩固。细节不好文字描述。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这两天真的有点高强度，尤其基地位于门头沟，往返三小时多，回宿舍就累趴了。（ps：第一次做门头沟S1线，培训小伙伴告知我是磁悬浮的，怪不得很舒适平稳。沿途景色不错）</p><p>笔记到这里就结束了，这次课程收获满满，确实学到了很多急救的干货，最重要的是当家人朋友出现紧急状况就知道该怎么做了。如果路遇紧急情况我应该也能尽一份力。</p><p>感谢红会的老师们，真的很耐心很温暖很细心！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;半个月前我报名了北京红会的16学时急救课程，27，28号两天是培训时间，地点是在门头沟区的心田培训中心。主要学习内容是CPR（心肺复苏）、A</summary>
      
    
    
    
    <category term="生活" scheme="http://123.57.158.5/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="CPR" scheme="http://123.57.158.5/tags/CPR/"/>
    
    <category term="AED" scheme="http://123.57.158.5/tags/AED/"/>
    
  </entry>
  
  <entry>
    <title>Linux1基本命令(Ubuntu)</title>
    <link href="http://123.57.158.5/2020/12/16/linux-go1/"/>
    <id>http://123.57.158.5/2020/12/16/linux-go1/</id>
    <published>2020-12-16T11:27:07.000Z</published>
    <updated>2021-06-29T16:19:43.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="终端的基本操作"><a href="#终端的基本操作" class="headerlink" title="终端的基本操作"></a>终端的基本操作</h2><p>什么是TTY?</p><blockquote><p>在Linux中，TTY也许是跟终端有关系的最为混乱的术语。TTY是TeleTYpe的一个老缩写。Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的东西，和古老的电报机区别并不是很大。之后，当计算机只能以批处理方式运行时（当时穿孔卡片阅读器是唯一一种使程序载入运行的方式），电传打字机成为唯一能够被使用的“实时”输入/输出设备。最终，电传打字机被键盘和显示器终端所取代。</p><p>在Linux 系统中，计算机显示器通常被称为控制台终端(Console）。它仿真了类型为Linux的一种终端(TERM=Linux），并且有一些设备特殊文件与之相关联：tty0、tty1、tty2 等。当你在控制台上登录时，使用的是tty1。使用Alt+[F1—F6]组合键时，我们就可以切换到tty2、tty3等上面去。tty1–tty6等称为虚拟终端，而tty0则是当前所使用虚拟终端的一个别名，系统所产生的信息会发送到该终端上（这时也叫控制台终端）。因此不管当前正在使用哪个虚拟终端，系统信息都会发送到控制台终端上。/dev/console即控制台，是与操作系统交互的设备，系统将一些信息直接输出到控制台上。只有在单用户模式下，才允许用户登录控制台。</p></blockquote><p><code>ctrl+alt+f1</code>：回到图形界面</p><p><code>ctrl+alt+f2</code>：对应终端2(tty2)，f3-f6分别对应tty3-tty6</p><p>但是我们一般常用图形模式的终端。调用方式<code>Ctrl+Alt+T</code></p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>打开终端后会自动出现命令行提示符</p><p>比如<code>scheelite@scheelte-VirtualBox:~$</code></p><p><code>scheelite</code>是当前用户的名字，Linux是多用户的操作系统，@后面是主机名，：是分隔符，~是当前所在目录的名字，$指示用户拥有的权限，表示普通用户，如果是#怎是root用户</p><p>使用<code>sudo su</code>切换root用户，切换后显示<code>root@scheelte-VirtualBox:/home/scheelite#</code></p><p>使用<code>whoami</code>命令可以获知当前用户名，<code>hostname</code>获知主机名</p><h3 id="基本命令使用"><a href="#基本命令使用" class="headerlink" title="基本命令使用"></a>基本命令使用</h3><p><code>date</code>显示当前时间，<code>ls</code>显示当前所有的目录</p><p>参数是写在命令之后的一些补充选项，空格隔开。</p><p><strong>短参数</strong>：短横线后面加一个字母，可以一次性加多个短参数，也可以合并写。参数的值 <code>-p 10</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command -p -a -T -c</span><br><span class="line">command -paTC</span><br><span class="line"></span><br><span class="line">显示所有文件（包括隐藏文件）</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure><p><strong>长参数</strong>：以两个短横线开始，只能以空格隔开。参数的值<code>--parameter=10</code></p><p>可以长短参数结合使用</p><p><strong>其他参数</strong>：没有绝对的准则。例如ls命令 后面带了一个参数的话，这是一个目录的路径名的话，那么就会列出此目录下的文件，例如 <code>ls Code</code></p><p>Tab键可以补全命令/路径，敲两下tab键。</p><h3 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h3><p>上下键切换历史命令</p><p><code>ctrl+r</code>查找使用过的命令；</p><p><code>history</code>显示所有输入的命令；</p><p><code>ctrl+l</code>清屏；</p><p><code>ctrl+d</code>给终端传递EOF（文件结束符）；</p><p><code>shift+PgUp</code>用于向上滚屏</p><p><code>ctrl+a</code>/<code>home </code>     <code>ctrl+e</code>/<code>end</code>光标跳到一行命令的开始/结尾</p><p><code>ctrl+u</code>/<code>ctrl+k</code>删除光标左侧/右侧的命令</p><p><code>ctrl+w</code>删除光标左侧的一个“单词”（空格隔开的一部分）</p><p><code>ctrl+y</code>用于粘贴上面u/k/w删除的字符串</p><h2 id="Linux下的文件操作"><a href="#Linux下的文件操作" class="headerlink" title="Linux下的文件操作"></a>Linux下的文件操作</h2><h3 id="Linux下文件目录组织形式"><a href="#Linux下文件目录组织形式" class="headerlink" title="Linux下文件目录组织形式"></a>Linux下文件目录组织形式</h3><ul><li>在Linux中<font color="red">一切都是文件</font>，不像windows分为文件和非文件，甚至连目录也是文件</li><li>Linux中只有一个根目录就是<code>/</code>，最顶级的目录，不同于windows很多个盘：<code>C:\</code>等</li><li>windows中用反斜杠表明目录层级和包含关系，而Linux中用<code>/</code>来表示，例如：<code>/usr/bin</code></li><li>一般在Linux命令目录时尽量不使用空格或其他特殊符号，尽量用小写字母</li><li>linux中以点开头的文件是隐藏文件。但是<code>.</code>（一个点）表示当前目录，<code>..</code>（两个点）表示上一级目录</li></ul><p>/bin：包含用户可执行的二进制文件；/boot: 包含linux启动密切相关的文件；/etc：系统配置文件；/home: 用户私人目录；/lib：包含被程序调用的库文件，<code>.os</code>结尾，类似于win的dll；/media: 访问外设（usb等）内容；/mnt：临时挂载一些装置；/opt：用于安装第三方软件；/root：超级用户目录；/sbin系统级重要可执行文件；/usr：安装大部分用户需要调用的程序 ….；/var：程序日志文件</p><p><code>pwd</code>命令 获知当前目录</p><p><code>which</code>命令获取命令的可执行文件的位置，参数为命令，如<code>which pwd</code>获取pwd命令可执行文件的位置。</p><h3 id="ls、cd、du命令"><a href="#ls、cd、du命令" class="headerlink" title="ls、cd、du命令"></a>ls、cd、du命令</h3><p>不带参数列出非隐藏文件，-a参数列出所有文件，-A列出不带<code>.</code>和<code>..</code>的目录，</p><p>-l参数列出文件详细信息, <code>total xx</code> 表示当前目录的总字节数（k）</p><p><img src="/2020/12/16/linux-go1/image-20201231122820898.png" alt="image-20201231122820898"></p><p>里面每一行的内容分别代表：文件权限、链接数目、文件所有者、文件所在的群组、文件大小（仅指目录文件的大小）、文件修改时间、名称</p><p>可以很多参数合并一起使用如<code>ls -ltah</code>显示所有文件详情</p><h4 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h4><p>change directory 切换路径</p><p><code>cd ~</code>或直接<code>cd</code>会到直接回到家目录</p><h4 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h4><p>disk usage, du可以让我们直到文件和目录所占的空间大小；相比<code>ls -l</code>命令，du命令统计的才是真正的文件大小</p><p><code>-h</code>便于阅读模式，<code>-a</code>显示所有目录、文件的大小，<code>-s</code>直接出现总大小</p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>syslog文件位于<code>/var/log</code>这个目录中，记录了电脑的所有事情的日志。</p><h4 id="cat和less命令"><a href="#cat和less命令" class="headerlink" title="cat和less命令"></a>cat和less命令</h4><p>cat命令和less命令：显示文件内容，不能对内容进行修改。</p><p>cat一次性在终端显示文件所有内容，加上想要显示的文件路径即可：<code>cat syslog</code>，中间加上<code>-n</code>参数显示行号。适合显示小文件</p><p>less命令分页显示文件内容。空格键翻页显示，<code>↓</code>/<code>enter</code>显示下一行，<code>d</code>前进半个屏幕，<code>b</code>向上一页，<code>y</code>/<code>↑</code>显示到上一行，<code>=</code>等号显示你在当前文件中的位置，h键进入使用手册，<code>/</code>进入搜索模式（按n键在结果中跳转，shift+n往上跳转），</p><h4 id="head和tail命令"><a href="#head和tail命令" class="headerlink" title="head和tail命令"></a>head和tail命令</h4><p>显示文件开头和结尾几行。</p><p>可以加上参数<code>tail -n 5 syslog</code>显示末尾五行，</p><p>配合<code>-f</code>参数可实时追踪文件的更新。</p><p><code>tail -f syslog</code>实时观察syslog文件的增加内容，默认一秒检查是否有更新，也可指定间隔参数，比如<code>tail -f -s 4 syslog</code>设置为4秒</p><h4 id="文件创建"><a href="#文件创建" class="headerlink" title="文件创建"></a>文件创建</h4><p>touch命令直接更跟路径，创建空白文件</p><p>mkdir创建新文件夹，可以用<code>-p</code>来递归创建目录结构：<code>mkdir -p one/two/three</code></p><h4 id="拷贝、移动文件或目录"><a href="#拷贝、移动文件或目录" class="headerlink" title="拷贝、移动文件或目录"></a>拷贝、移动文件或目录</h4><p>cp命令拷贝，<code>cp file file_copy</code>拷贝file_copy文件，可以换为目录名就可以复制到那里去并改名</p><p>拷贝目录需要在cp命令之后加上<code>-r</code>或者<code>-R</code>参数，目录中所有内容被拷贝</p><p><strong>使用通配符*</strong></p><p>用于代替任何字符，和正则一样。<code>cp *.txt folder</code>把当前目录下的所有txt文件拷贝到folder目录中取</p><p>mv命令移动，使用类似cp，但是移动目录不需要添加额外的参数，和移动文件一样，同样也可以使用通配符。</p><p>mv命令还可以重命名，使用方法一样。</p><h4 id="删除文件和目录"><a href="#删除文件和目录" class="headerlink" title="删除文件和目录"></a>删除文件和目录</h4><p>rm命令用于删除文件和目录，但是不可撤销。直接加文件名</p><p>加上<code>-i</code>参数会询问是否需要删除，<code>-r</code>参数递归（recursive）删除，删除目录</p><h3 id="文件中的软链接和硬链接"><a href="#文件中的软链接和硬链接" class="headerlink" title="文件中的软链接和硬链接"></a>文件中的软链接和硬链接</h3><p>ln命令用于在文件之间创建链接。</p><p>Linux下有两种链接类型：软链接（Symbolic link）和硬链接（Physical link）。Linux文件有三部分：文件名、权限和文件内容。</p><p><strong>Linux文件存储</strong>：每个文件的文件内容被分配到一个inode，因此每个文件名都绑定到它的文件内容（用inode标识）</p><p><strong>硬链接原理</strong>：使链接的两个文件共享同样的文件内容，就是同样的inode。如果两个文件之间有了硬链接，修改文件修改的是同一块内容。硬链接一般只能创建指向文件的硬链接，而<strong>软连接</strong>可以指向文件和目录。</p><p><code>ln file1 file2</code>这个命令创建了一个file1的硬链接file2。</p><p><em>此时如果通过<code>ls -i</code>来查看文件相关的inode信息，会发现二者指向了同一个inode</em></p><p>对于硬链接来说，删除任意一方文件，共同指向的文件内容并不会从硬盘上被删除，只有同时删除，该inode才会被删除。</p><p><img src="/2020/12/16/linux-go1/image-20210102142105447.png" alt="image-20210102142105447"></p><p>第一列是inode信息，第三列中数字为2，对于文件来说指的是有相同inode号的文件数。（对于目录，指的是目录下的文件数）</p><p><strong>软链接</strong>类似与windows下的快捷方式。创建软链接需要带上<code>-s</code>参数</p><p><em>图示创建了file3软链接，链接到file1</em></p><p><img src="/2020/12/16/linux-go1/image-20210102142711614.png" alt="image-20210102142711614"></p><p>如果删掉了file1，file2就会失效。</p><h2 id="Linux下的权限管理"><a href="#Linux下的权限管理" class="headerlink" title="Linux下的权限管理"></a>Linux下的权限管理</h2><p>在Ubuntu系统中可以用sudo(Substitute User DO)命令暂时成为root超级用户。</p><p><code>sudo su</code>切换超级用户，输入exit推出也可以<code>sudo</code>后面直接接待执行命令</p><p><code>adduser username</code>命令添加用户</p><p><code>passwd username</code>命令修改用户密码</p><p><code>deluser username</code>命令删除用户，直接删除，谨慎使用！</p><h3 id="用户群组管理"><a href="#用户群组管理" class="headerlink" title="用户群组管理"></a>用户群组管理</h3><p>如果不设置群组的话，默认是创建一个和用户名一样的群组。当群组多的时候则需要进行管理。</p><p><code>addgroup groupname</code>命令添加新的群组；<code>usermod</code>命令，<code>-l</code>参数可以用于修改用户名，<code>-g</code>参数可用来修改用户的群组：<code>usermod -g groupname username</code></p><p><code>groups username</code>查看用户的所在群组<br><em>添加用户到多个群组<br><code>usermod -G group1,group2,group3 username</code>，<code>-aG</code>参数可以追加而不是移动到这些群组</em></p><p><code>delgroup groupname</code>删除群组</p><h3 id="文件权限设置"><a href="#文件权限设置" class="headerlink" title="文件权限设置"></a>文件权限设置</h3><p><code>chown newuser file</code>命令改变文件所有者，但是文件所属群组依旧不变</p><p><code>chgrp newgroup file</code>命令改变群组，或者<code>chown username:groupname file</code>也可以同时改变群组和所有者</p><p><code>chown</code>的<code>-R</code>参数递归设置子目录和子文件，配合上面的方法使用</p><h4 id="修改访问权限"><a href="#修改访问权限" class="headerlink" title="修改访问权限"></a>修改访问权限</h4><p><strong>权限的原理</strong>：Linux系统中，每个文件和目录都有一系列权限属性，在<code>ls -l</code>运行的第一列信息就是访问权限符。</p><p>第一个字符中：<code>-</code>表示普通文件；<code>d</code>表示目录；<code>l</code>表示软链接文件</p><img src="/2020/12/16/linux-go1/image-20210102152128235.png" alt="image-20210102152128235" style="zoom:50%;"><p>后面的字符中，<code>r</code>可读，<code>w</code>可写，<code>x</code>可执行/可读（对于目录），如果相应位置有字母，表示有相应的权限，短横<code>-</code>表示没有相应权限</p><p><img src="/2020/12/16/linux-go1/image-20210102152505598.png" alt="image-20210102152505598"></p><p>例如file1这个文件<code>-</code>表示普通文件，<code>rw-</code>在sheelite用户下，可读可写，非可执行文件，第二个<code>rw-</code>scheelite群组其他用户也可读可写，不可执行，<code>r--</code>其他用户只能读该文件</p><h4 id="chmod命令改变文件的访问权限"><a href="#chmod命令改变文件的访问权限" class="headerlink" title="chmod命令改变文件的访问权限"></a>chmod命令改变文件的访问权限</h4><p>Linux系统对每种权限（r、w和x）分配了对应的数字</p><table><thead><tr><th>权限</th><th>数字</th></tr></thead><tbody><tr><td>r</td><td>4</td></tr><tr><td>w</td><td>2</td></tr><tr><td>x</td><td>1</td></tr></tbody></table><p>要合并这些权限，就需要简单的数字相加；比如6表示有读和写的权限</p><img src="/2020/12/16/linux-go1/113366367897643514.jpg" alt="113366367897643514" style="zoom:33%;"><p>用三组数字来表示这些权限，例如640：</p><ul><li>6 文件所有者有读写权限</li><li>4 文件所在群组其他用户具有读的权限</li><li>0 除此之外其他用户没有任何权限</li></ul><p><code>chmod 640 file1</code>修改文件权限：</p><p><img src="/2020/12/16/linux-go1/image-20210102153745678.png" alt="image-20210102153745678"></p><p><strong>用字母划分权限</strong></p><p><code>chmod u+rx file1</code>对文件的所有者增加读和运行的权限</p><p><code>chmod g+r o-r file</code>文件file的群组其他用户增加读的权限，其他用户移除读的权限</p><p>配合<code>-R</code>参数可以递归修改目录及其中的文件</p><h2 id="Linux进程操作"><a href="#Linux进程操作" class="headerlink" title="Linux进程操作"></a>Linux进程操作</h2><h3 id="通过进程名杀死进程"><a href="#通过进程名杀死进程" class="headerlink" title="通过进程名杀死进程"></a>通过进程名杀死进程</h3><p>一般可以用 <code>pkill 进程名</code>或者<code>killall 进程名</code>，但是一些linux系统下没有这两个命令，可以使用</p><p><code>kill -9 $(pidof 进程名关键字)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;终端的基本操作&quot;&gt;&lt;a href=&quot;#终端的基本操作&quot; class=&quot;headerlink&quot; title=&quot;终端的基本操作&quot;&gt;&lt;/a&gt;终端的基本操作&lt;/h2&gt;&lt;p&gt;什么是TTY?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Linux中，TTY也许是跟终端有关系的最</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Linux" scheme="http://123.57.158.5/tags/Linux/"/>
    
    <category term="操作系统" scheme="http://123.57.158.5/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Terminal" scheme="http://123.57.158.5/tags/Terminal/"/>
    
    <category term="Ubuntu" scheme="http://123.57.158.5/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法1查找与排序</title>
    <link href="http://123.57.158.5/2020/11/08/%E7%AE%97%E6%B3%951/"/>
    <id>http://123.57.158.5/2020/11/08/%E7%AE%97%E6%B3%951/</id>
    <published>2020-11-07T17:18:13.000Z</published>
    <updated>2021-07-03T07:49:25.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p><strong>判断时间复杂度</strong><br>时间复杂度判断占用时间<br>快速判断算法复杂度：</p><ol><li>   确定问题规模n</li><li>   循环减半过程 –&gt; logn</li><li>   K层关于n的循环 —&gt;n<sup>k</sup><br>复杂情况：根据算法执行过程判断</li></ol><p><strong>判断空间复杂度</strong><br>评估算法内存占用大小的式子，表达方式与时间复杂度完全一样</p><ol><li>   算法使用了几个变量：O(1)</li><li>   算法使用了长度为n的一维列表：O(n)</li><li>   算法使用了m行n列的二维列表：O(mn)<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2>递归的两个特点：1.调用自身；2.结束条件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">func1(x-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">func2(x+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">func3(x-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">func4(x-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>所以func3和func4是递归，x为正整数，func3会连续输出x到1，func4会输出1 到x<h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h2>把盘子从a移动到c</li></ol><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/image-20201108012255921.png" alt="image-20201108012255921"></p><p>这样思考过后，就把问题规模由n变成了n-1，这就是一种递归的思想。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">n,a,b,c</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        hanota问题。</span></span><br><span class="line"><span class="string">        n: 盘子数</span></span><br><span class="line"><span class="string">        a: 初始位置</span></span><br><span class="line"><span class="string">        b: 中转位置</span></span><br><span class="line"><span class="string">        c: 目标位置</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &gt;<span class="number">0</span>:</span><br><span class="line">        move(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;moving from &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a,c))</span><br><span class="line">        move(n-<span class="number">1</span>,b,a,c)</span><br><span class="line"></span><br><span class="line">move(<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><p>moving from a to c<br>moving from a to b<br>moving from c to b<br>moving from a to c<br>moving from b to a<br>moving from b to c<br>moving from a to c<br>共7次移动</p><p>汉诺塔移动次数递推式：h(x)=h(x-1)+1</p><h2 id="列表查找"><a href="#列表查找" class="headerlink" title="列表查找"></a>列表查找</h2><p><strong>查找</strong>：在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程。<br><strong>列表查找（线性表查找）</strong>：从列表中查找指定元素</p><ul><li>输入：列表，待查找元素</li><li>输出： 元素下标（未找到返回None或者-1）<br>Python内置列表查找函数: index()<h3 id="顺序查找（Linear-Search）"><a href="#顺序查找（Linear-Search）" class="headerlink" title="顺序查找（Linear Search）"></a>顺序查找（Linear Search）</h3>顺序查找：线性查找，从列表第一个元素开始，顺序进行搜索，直到找到元素或者搜索到列表最后一个元素为止。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_search</span>(<span class="params">val,li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">        <span class="keyword">if</span> li[i]==val:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h3></li></ul><p><strong>二分查找</strong>：又叫折半查找 ，从<font color="’red’">有序</font>列表的初始候选区li[0:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">val, li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        val: 待查找值</span></span><br><span class="line"><span class="string">        li：有序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 候选区有值</span></span><br><span class="line">        mid = (left+right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">            right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 没查找到</span></span><br></pre></td></tr></table></figure><p>时间复杂度O(logn)</p><h3 id="二分与顺序查找比较"><a href="#二分与顺序查找比较" class="headerlink" title="二分与顺序查找比较"></a>二分与顺序查找比较</h3><p>为了证明二分查找比顺序查找效率要高，可以试验一下<br>写一个计算函数时间的装饰器，给两种方法加上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_wrapper</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        t1=time.time()</span><br><span class="line">        result = func(*args,**kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; running time: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(func.__name__,t2-t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>算法比较：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wrappers <span class="keyword">import</span> time_wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@time_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_search</span>(<span class="params">val,li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        有序查找</span></span><br><span class="line"><span class="string">        val: 待查找值</span></span><br><span class="line"><span class="string">        li: 列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">        <span class="keyword">if</span> li[i] == val:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">val, li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        二分查找</span></span><br><span class="line"><span class="string">        val: 待查找值</span></span><br><span class="line"><span class="string">        li：有序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 候选区有值</span></span><br><span class="line">        mid = (left+right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">            right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 没查找到</span></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100000000</span>))</span><br><span class="line"><span class="built_in">print</span>(binary_search(<span class="number">123109</span>,li))</span><br><span class="line"><span class="built_in">print</span>(order_search(<span class="number">123109</span>,li))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：<br>binary_search running time: 0.0<br>123109<br>order_search running time: 0.04597640037536621<br>123109<br>内置列表查找函数index()用的是顺序查找，二分查找需要有序列表</p><h2 id="六种常见排序方法"><a href="#六种常见排序方法" class="headerlink" title="六种常见排序方法"></a>六种常见排序方法</h2><p>排序：将一组“无序”的记录序列调整为“有序”的记录序列<br>列表排序：将无序列表转变为有序列表</p><ul><li>输入：列表</li><li>输出：有序列表<br>内置排序函数：sort()</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>列表每两个相邻的数，如果前面比后面大，则交换这两个数</li><li>一趟排序完成后，则无序区减少一个数，有序区增加一个数</li><li>代码关键点：趟、无序区范围<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        冒泡排序</span></span><br><span class="line"><span class="string">        li: 无序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># 第i趟</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):  <span class="comment"># 遍历比较列表内数值</span></span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># 10个随机数</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(bubble_sort(li))</span><br></pre></td></tr></table></figure>关键在于理解排序的过程，将列表中的每一个数依次比较。<br>时间复杂度O(n<sup>2</sup>)</li></ul><p>但是如果在某一趟过程中没有发生交换，说明已经结束排序。则需要改进算法，提高效率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        冒泡排序</span></span><br><span class="line"><span class="string">        li: 无序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># 第i趟</span></span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):  <span class="comment"># 遍历比较列表内数值</span></span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">return</span> li</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [<span class="number">9672</span>, <span class="number">9123</span>, <span class="number">4409</span>, <span class="number">9845</span>, <span class="number">4436</span>, <span class="number">98</span>, <span class="number">1768</span>, <span class="number">7077</span>, <span class="number">730</span>, <span class="number">5105</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(bubble_sort(li))</span><br></pre></td></tr></table></figure><p>对于相同的列表，则将会减少循环次数，提高效率</p><p>Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> exchange = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">              <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                    exchange = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!exchange) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowArray</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 新建冒泡排序对象</span></span><br><span class="line">        BubbleSort sorter = <span class="keyword">new</span> BubbleSort();</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123; <span class="number">65</span>, <span class="number">67</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">33</span>, <span class="number">90</span> &#125;;</span><br><span class="line">        sorter.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>一趟排序记录最小的数，放到第一个位置</li><li>再一趟排序记录列表无序区最小的数，放到第二个位置<br>…</li><li>算法关键点：有序区和无序区、无序区最小数的位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        排序算法，将每次查找过程中较小的数放在列表最左端</span></span><br><span class="line"><span class="string">        li: 待排序列表</span></span><br><span class="line"><span class="string">        return: li    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># 第i趟</span></span><br><span class="line">        min_loc = i  <span class="comment"># 无序区第一个数开始查找</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure>时间复杂度O(n<sup>2</sup>)</li></ul><p>Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min_loc = i;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min_loc]) &#123;</span><br><span class="line">                    min_loc = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = arr[min_loc];</span><br><span class="line">            arr[min_loc] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        ShowArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowArray</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SelectSort sorter = <span class="keyword">new</span> SelectSort();</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>, <span class="number">32</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">73</span>, <span class="number">45</span>, <span class="number">66</span>, <span class="number">53</span>, <span class="number">2</span> &#125;;</span><br><span class="line">        sorter.sort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul><li>初始时手里（有序区）只有一张牌</li><li>每次（从无序区）摸一张牌，插入到手里已有牌的正确位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入排序，将无序区的数据依次取出，与有序区数据比较，然后放在合理的位置</span></span><br><span class="line"><span class="string">        li: 无序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):  <span class="comment"># 无序列表第一个数</span></span><br><span class="line">        temp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; temp: <span class="comment">#如果有序区的数依次与无序列表第一个数比较，直到找到对应位置</span></span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[j+<span class="number">1</span>] = temp</span><br><span class="line">    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure></li></ul><p>时间复杂度O(n<sup>2</sup>)</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li>快速排序：快</li><li>快速排序思路：<ul><li>取一个元素 p ，是元素p归为；</li><li>列表被p分成两部分，左边都比p小，右边都比p大；</li><li>递归完成排序</li></ul></li></ul><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/image-20201114212701000.png" alt="image-20201114212701000"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速排序-框架</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">data,left,right</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    data: 列表</span></span><br><span class="line"><span class="string">    left: 列表左边index</span></span><br><span class="line"><span class="string">    right: 列表右边right</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = partition(data,left,right)</span><br><span class="line">        quick_sort(data,left,mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(data,mid+<span class="number">1</span>,right)</span><br></pre></td></tr></table></figure><p>partition函数需要实现：<br>先提出列表的第一位，单独存储为a，从列表最右边开始依次找比a小的数，放在左边的空位，然后从左边找比a大的数填补右边的空位…依次执行，左右筛选完之后（left和right重合），把a防在空位中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    temp = li[left]  <span class="comment"># 将列表左边第一个数提出来</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= temp:  <span class="comment"># 从右边依次找比temp小的数</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        li[left] = li[right]  <span class="comment"># 将找到的比temp小的数放在左边空位</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= temp:   <span class="comment"># 从左边找比temp大的数</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        li[right] = li[left]  <span class="comment"># 将找到的比temp大的数放在右边空位</span></span><br><span class="line">    li[left] = temp  <span class="comment"># 当左右相等 列表放置结束，将temp放在列表空位上</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:  <span class="comment"># 递归调用每一部分列表，直到完成排序</span></span><br><span class="line">        mid = partition(li, left, right)</span><br><span class="line">        quick_sort(li, left, mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(li, mid+<span class="number">1</span>, right)</span><br></pre></td></tr></table></figure><p>快排的效率：</p><p>时间复杂度：O(n(logn))</p><p>存在的问题：</p><p>最坏情况，将倒叙的列表排序，时间复杂度接近O(n)了，但是这点可以通过随机取数解决</p><p>python在windows上递归最大深度为998，但是可以设置修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序前传-树与二叉树</p><ul><li>树是一种数据结构 比如：目录结构</li><li>树是一种可以递归定义的数据结构</li><li>树是由n个节点组成的集合：<ul><li>如果n=0，那是一颗空树；</li><li>如果n&gt;0，那存在一个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一个树。</li></ul></li></ul><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/image-20201119225548961.png" alt="image-20201119225548961"></p><p><strong>根节点</strong>：如图里的A</p><p><strong>叶子节点</strong>：不可分叉的节点，如图中的B C H I P Q…</p><p><strong>树的深度（高度）</strong>：看有几层，如图中是四层</p><p><strong>树的度</strong>：就是往下分了几个叉，比如E的度是2，如果说一整棵树，就是指分叉分得最多的节点的度，比如图中是A，度为6。</p><p><strong>孩子节点</strong>、<strong>父节点</strong>：不解释</p><p><strong>子树</strong>：树的一部分</p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>就是度不超过的2的树，每个节点最多有两个孩子节点，两个孩子节点被区分为左孩子节点，右孩子节点</p><p><strong>满二叉树</strong>：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树</p><p><strong>完全二叉树</strong>：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树</p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/image-20201123235002681.png" alt="image-20201123235002681" style="zoom: 67%;"><p><strong>二叉树的存储排序</strong>（表达方式）</p><p>分链式存储方式（后面阐述）和<strong>顺序存储方式</strong></p><p>顺序存储类似于列表，挨个存储，存储之后可以找到，父节点与左右孩子节点的关系。</p><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/image-20201123235917151.png" alt="image-20201123235917151"></p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p><strong>堆</strong>：一种特殊的完全二叉树结构</p><ul><li>大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大</li><li>小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小</li></ul><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/image-20201124224317521.png" alt="image-20201124224317521"></p><p><strong>堆的向下调整</strong>：假设节点的左右子树都是堆，但自身不是堆。可以通过一次向下的调整来将其变成一个堆(和较低层级元素交换形成大根堆或小根堆)</p><h4 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h4><p>过程：</p><ol><li><p>建立堆</p><p>从最低 最右 层级进行调整，构造成堆</p></li><li><p>得到堆顶元素，为最大元素</p></li><li><p>去掉堆顶元素，将堆最后一个元素放到堆顶，此时可通过一次向下调整重新使堆有序</p></li><li><p>堆顶元素为第二大元素</p></li><li><p>重复步骤3，直到堆变空</p></li></ol><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/55.gif" alt="55"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        堆向下调整过程</span></span><br><span class="line"><span class="string">        li: 待调整列表</span></span><br><span class="line"><span class="string">        low: 根节点元素</span></span><br><span class="line"><span class="string">        high: 最后一个节点元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low  <span class="comment"># 最开始i为根节点元素</span></span><br><span class="line">    j = i*<span class="number">2</span>+<span class="number">1</span>   <span class="comment"># j为i的左孩子</span></span><br><span class="line">    tmp = li[low]   <span class="comment"># 将根节点元素临时存储起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:  <span class="comment"># 只要j位置有数</span></span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &gt; li[j]:   <span class="comment"># 只要右孩子存在且大于左孩子</span></span><br><span class="line">            j = j+<span class="number">1</span>   <span class="comment"># j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:  <span class="comment"># 如果j节点数大于i节点</span></span><br><span class="line">            li[i] = li[j]  <span class="comment"># j节点数上移</span></span><br><span class="line">            i = j   <span class="comment"># 继续下一层级</span></span><br><span class="line">            j = i*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    li[i] = tmp</span><br></pre></td></tr></table></figure><p>开始<strong>构造（建立）堆</strong></p><p>需要从最后的父节点开始，最后一个节点的小标为n-1，可以求出其父节点为<code>(n-2)//2</code></p><p>之后<strong>挨个出数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"><span class="comment"># i 为待调整堆的根节点位置</span></span><br><span class="line">        sift(li, i, n - <span class="number">1</span>)<span class="comment"># 到这里堆建立完成</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i 指向当前堆的最后一个元素</span></span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]</span><br><span class="line">        sift(li, <span class="number">0</span>, i - <span class="number">1</span>) <span class="comment"># i已经被提上low的位置，high的位置所以变成了i-1</span></span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)</p><h5 id="堆排序内置模块"><a href="#堆排序内置模块" class="headerlink" title="堆排序内置模块"></a>堆排序内置模块</h5><p>python内置模块——heapq</p><p> <strong>补充模块说明</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq <span class="comment"># q--&gt;queue 优先队列（小的先出或者大的先出</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"></span><br><span class="line">heapq.heapify(li)<span class="comment"># 建堆,建立的是小根堆</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">    heapq.heappop(li)<span class="comment"># 挨个出数</span></span><br></pre></td></tr></table></figure><h4 id="堆排序——topk问题"><a href="#堆排序——topk问题" class="headerlink" title="堆排序——topk问题"></a>堆排序——topk问题</h4><p>现在有n个数，设计算法得到前k大的数。（k&lt;n)</p><p>解决思路：</p><ul><li>排序后切片     复杂度：O(nlogn+k)k可以忽略</li><li>排序LowB三人组      复杂度：O(kn) </li><li>堆排序思路        复杂度：O(nlogk)</li></ul><p>堆排序解决topk思路：</p><ol><li>取列表前k个元素建立一个小根堆，堆顶就是目前的第k大的树</li><li>依次向后遍历原列表，对列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一此调整</li><li>遍历列表所有元素后，倒序弹出堆顶</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift_k</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        向下调整</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low</span><br><span class="line">    j = i*<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    tmp = li[low]</span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>] <span class="keyword">and</span> j+<span class="number">1</span> &lt;= high:</span><br><span class="line">            j = j+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &lt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j</span><br><span class="line">            j = j*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    li[i] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topk</span>(<span class="params">li, k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        取出列表中最大的k个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="comment"># 取出前k个数建立小根堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((k-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        sift_k(li, i, k-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(li)</span><br><span class="line">    <span class="comment"># 遍历k后面的数，比li[0]大则替换且重新调整</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, n):</span><br><span class="line">        <span class="keyword">if</span> li[i] &gt; li[<span class="number">0</span>]:</span><br><span class="line">            li[<span class="number">0</span>] = li[i]</span><br><span class="line">            sift_k(li, <span class="number">0</span>, k-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 出数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        li[i], li[<span class="number">0</span>] = li[<span class="number">0</span>], li[i]</span><br><span class="line">        sift_k(li, <span class="number">0</span>, i-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> li[<span class="number">0</span>:k]</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>假设现在的列表分两段有序，如何将其合并成一个有序列表。这样的合并操作就成为归并（merge）</p><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/27.gif" alt="GIF 2020-12-7 21-21-27"></p><p>归并函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">li, low, mid, high</span>):</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid+<span class="number">1</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            tmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 两边肯定有一部分没有数了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        tmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        tmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure><h4 id="使用归并"><a href="#使用归并" class="headerlink" title="使用归并"></a>使用归并</h4><ul><li>分解：将列表越分越小，直到分成一个元素</li><li>终止条件：一个元素是有序的</li><li>合并：将两个有序列表归并，列表越来越大</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 说明至少有两个元素，递归归并</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)</span><br><span class="line">        merge_sort(li, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(li, low, mid, high)   <span class="comment"># 调用归并方法</span></span><br></pre></td></tr></table></figure><p>每次归并是O(n)，所以时间复杂度是O(nlogn)。空间复杂度是O(n)</p><p>python的<code>sort()</code>使用的一种‘team sort’的算法，结合了插入排序与归并排序</p><h3 id="排序方法对比"><a href="#排序方法对比" class="headerlink" title="排序方法对比"></a>排序方法对比</h3><p>三种快速排序的时间复杂度都是O(nlogn)</p><p>一般情况下，就运行时间而言：快速排序&lt;归并排序&lt;堆排序</p><p>三种算法的缺点：</p><ul><li>快速排序：极端情况下排序效率低</li><li>归并排序：需要额外的内存开销</li><li>堆排序：在快的排序算法中仙骨笛较慢</li></ul><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/image-20201209144244938.png" alt="image-20201209144244938"></p><p>稳定性：稳定指的是排序中的两个相同的数，排序后相对其初始位置不发生改变。挨个比较的算法就是稳定的！！</p><h2 id="其他排序"><a href="#其他排序" class="headerlink" title="其他排序"></a>其他排序</h2><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序（Shell Sort）是一种分组插入排序算法。</p><ol><li><p>首先取一个整数d<sub>1</sub>=n/2，将元素分为d<sub>1</sub>个组，每组相邻两个元素之间的距离是d<sub>1</sub>，在各组内进行直接插入排序；</p><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/28.gif" alt="GIF 2020-12-14 20-48-28"></p></li><li><p>取第二个数d<sub>2</sub>=d<sub>1</sub>/2，重复上述分组排序过程，直到d<sub>i</sub>=1，即所有元素在同一组内进行直接插入排序。</p></li></ol><p>希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。</p><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/11.gif" alt="GIF 2020-12-14 20-55-11"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_insert_sort</span>(<span class="params">gap, li</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 这一部分采用的是插入排序的思想 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):</span><br><span class="line">        temp = li[i]</span><br><span class="line">        j = i - gap</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; temp:</span><br><span class="line">            li[j+gap] = li[j]</span><br><span class="line">            j -= gap</span><br><span class="line">        li[j+gap] = temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 分组之后 各组采用插入排序 &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    d = n//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt; <span class="number">0</span>:</span><br><span class="line">        shell_insert_sort(d, li)</span><br><span class="line">        d //= <span class="number">2</span></span><br></pre></td></tr></table></figure><p>时间复杂度与选取的gap序列有关</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>对列表进行排序，已知列表中的数范围都在0到100之间。设计时间复杂度为O(n)的算法</p><p>优点：比系统自带的<code>sort()</code>方法都快</p><p>缺点：消耗空间（需要100个数的列表），有限制（需要知道列表中数的范围）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coun_sort</span>(<span class="params">li,max_count=<span class="number">100</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计数排序，已知列表中的数的范围，新建0-最大数的顺序列表用于记录每个数的出现次数，从而排序</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    count_list = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count+<span class="number">1</span>)] <span class="comment"># 生成一个长度为li的最大值的统计次数列表</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count_list[val] += <span class="number">1</span> <span class="comment"># 统计每个数出现的次数</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> index, count <span class="keyword">in</span> <span class="built_in">enumerate</span>(count_list): <span class="comment"># 遍历生成新的列表</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">            li.append(index)</span><br></pre></td></tr></table></figure><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>在计数排序中，如果元素的范围比较大（比如在1到1亿之间），如何改造算法？</p><p>桶排序(Bucket Sort): 首先将元素分在不同的桶中，在对每个桶中的元素排序</p><p><img src="/2020/11/08/%E7%AE%97%E6%B3%951/image-20201229222547450.png" alt="image-20201229222547450"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span>(<span class="params">li, n=<span class="number">10</span>, max_num=<span class="number">10000</span></span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">桶排序，将列表中的数分为10个桶，将每个桶中的数排序</span></span><br><span class="line"><span class="string">li:待排序列表</span></span><br><span class="line"><span class="string">n:桶个数</span></span><br><span class="line"><span class="string">max_num:列表最大数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建桶</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line"><span class="comment"># 将列表中的数依次放入桶中，对于列表中的最大数，放入最后一个桶</span></span><br><span class="line">        i = <span class="built_in">min</span>(var//(max_num//n), n-<span class="number">1</span>)</span><br><span class="line">        buckets[i].append(var)</span><br><span class="line">        <span class="comment"># 将每个桶中元素进行排序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i])-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="number">1</span>]:</span><br><span class="line">            buckets[i][j], buckets[i][j-<span class="number">1</span>] = buckets[i][j-<span class="number">1</span>], buckets[i][j]</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> buk <span class="keyword">in</span> buckets:</span><br><span class="line">        li.extend(buk)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>桶排序表现取决于数据的分布。也就是需要对不同数据排序时采取不同的分桶策略。</li><li>平均情况时间复杂度：O(n+k)，k约一个桶中元素个数。</li><li>最坏情况时间复杂度：O(n<sup>2</sup>k)</li><li>空间复杂度：O(nk)</li></ul><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>多关键字排序：假如现在有一个员工表，要求按照薪资排序，年龄相同的员工按照年龄排序。</p><p>思路：先按照年龄进行排序，再按照薪资进行稳定的排序</p><p>对于32、13、94、52、17、54、93是否可以看做多关键字排序（先看十位，后看个位）</p><p>在基数排序中，先排序个位，再排序十位！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redix_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基数排序，将列表中的数依次按个位、十位、百位...最高位排序</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_digit = <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">max</span>(li))) <span class="comment"># 获取最大数的位数</span></span><br><span class="line">    t = <span class="number">0</span> <span class="comment"># t代表循环的次数</span></span><br><span class="line">    <span class="keyword">while</span> t &lt;= max_digit:</span><br><span class="line">        <span class="comment"># 每次都构建十个桶</span></span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">            i = (var//(<span class="number">10</span>**t)) % <span class="number">10</span> <span class="comment"># 获取列表中数对应位数上的值</span></span><br><span class="line">            buckets[i].append(var)</span><br><span class="line">        li.clear()</span><br><span class="line">        <span class="keyword">for</span> buk <span class="keyword">in</span> buckets:</span><br><span class="line">            li.extend(buk)</span><br><span class="line">       t += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>时间复杂度：（kn)</p><p>空间复杂度：（n+k)</p><p>k表示最大数位数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;算法复杂度&quot;&gt;&lt;a href=&quot;#算法复杂度&quot; class=&quot;headerlink&quot; title=&quot;算法复杂度&quot;&gt;&lt;/a&gt;算法复杂度&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;判断时间复杂度&lt;/strong&gt;&lt;br&gt;时间复杂度判断占用时间&lt;br&gt;快速判断算法复杂度：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://123.57.158.5/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="Python" scheme="http://123.57.158.5/tags/Python/"/>
    
    <category term="数据结构与算法" scheme="http://123.57.158.5/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序算法" scheme="http://123.57.158.5/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
    <category term="查找算法" scheme="http://123.57.158.5/tags/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络3传输层</title>
    <link href="http://123.57.158.5/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/"/>
    <id>http://123.57.158.5/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/</id>
    <published>2020-11-07T17:11:16.000Z</published>
    <updated>2021-05-23T02:34:43.883Z</updated>
    
    <content type="html"><![CDATA[<p>传输层只涉及到两个终端设备之间，路由器中没有这一层。实现的是终端之间的进程与进程的通信，与之前的Unix域套接字和共享内存等单机进程通信不同。</p><p><strong>端口</strong>（Port）用来标记计算机中不同的网路进程，使用16比特位表示（0-65535）</p><p>常用协议的端口</p><table><thead><tr><th>FTP</th><th>HTTP</th><th>HTTPS</th><th>DNS</th><th>FELNET</th></tr></thead><tbody><tr><td>21</td><td>80</td><td>443</td><td>53</td><td>23</td></tr></tbody></table><p>各层之间的相关协议：</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/clip_image002.jpg" alt="img"></p><h2 id="UDP协议详解"><a href="#UDP协议详解" class="headerlink" title="UDP协议详解"></a>UDP协议详解</h2><p>UDP（User Datagram Protocol: 用户数据报协议）</p><p>传输数据报时不拆分不合并</p><p>UDP在IP数据报内部</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/clip_image004.jpg" alt="img"></p><p>UDP协议首部分为16位源端口号、16位目的端口号、16位UDP长度、16位UDP校验和。剩下为UDP数据</p><ul><li><p>UDP是无连接协议，即发送数据前不需要建立连接</p></li><li><p>UDP不能保证可靠的交付数据</p></li><li><p>UDP是面向报文传输的，即直接传输UDP数据报的数据</p></li><li><p>UDP没有拥塞控制</p></li><li><p>UDP的首部开销很小      </p></li></ul><h2 id="TCP协议详解"><a href="#TCP协议详解" class="headerlink" title="TCP协议详解"></a>TCP协议详解</h2><p>TCP（Transmission Control Protocol: 传输控制协议）</p><p>TCP同样也在IP数据报内部</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/clip_image006.jpg" alt="img"></p><p><strong>特点：</strong></p><ul><li><p>TCP是面向连接的协议，即需要通信前建立连接</p></li><li><p>TCP的一个连接有两端（点对点通信）</p></li><li><p>TCP提供可靠的传输服务</p></li><li><p>TCP协议提供全双工的通信，即可同时发送或接收数据</p></li><li><p>TCP是面向字节流的协议。这里的流的指的是流出流入进程的字节序列，相对于数据报来说，是可以一个字节一个字节进行处理的。tcp数据可合并可分拆</p></li></ul><p><strong>TCP协议的首部</strong>：</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/clip_image008.jpg" alt="img"></p><p>（表格宽度代表位数）</p><p>固定有20个字节长度，即表格中的前五行</p><p><strong>序号</strong>范围0~2<sup>32</sup>-1，一个字节一个序号，代表了数据首字节字号</p><p><strong>确认号</strong>范围0~2<sup>32</sup>-1，一个字节一个序号，代表期望收到数据的首字节序号。一般来说确认号为N：则表示N-1序号的数据都已经收到</p><p><strong>数据偏移</strong>占4位：0~15，单位为32位字，即每一个偏移都可以表示4个字节的偏移，表示数据偏离首部的距离（因为TCP选项未知，需要存储数据偏移来找到真实数据位置）。15*4=60字节，最大数据便宜是60个字节，所以TCP首部是20~60字节范围</p><p><strong>TCP标记</strong>占6位，每位各有不同意义，分别是URG\ACK\PSH\PST\SYN\FIN</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/tcp.png" alt="tcp"></p><p><strong>窗口</strong>：占16位：0<del>2<sup>16</sup>-1，窗口指明对方发送的数据量。比如确认号是501，窗口是1000，表明501</del>1500这么多个字节的数据都是可以接收的。</p><p><strong>紧急指针</strong>：紧急数据（当URG=1启用)，指定紧急数据在报文的位置</p><p><strong>TCP选项</strong>：最多40个字节，用于支持TCP未来的拓展</p><h2 id="可靠传输的基本原理"><a href="#可靠传输的基本原理" class="headerlink" title="可靠传输的基本原理"></a>可靠传输的基本原理</h2><h3 id="停止等待协议（超时定时器）"><a href="#停止等待协议（超时定时器）" class="headerlink" title="停止等待协议（超时定时器）"></a>停止等待协议（超时定时器）</h3><p>为了简化讨论协议，简化为接收方和发送方。</p><p>无差错情况下，接收方发送消息，接收方收到后发送确认。在收到对方消息前都是停止等待状态。</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209011832049.png" alt="image-20201209011832049"></p><p>出差错的情况下，发送方发送消息后，出现差错，接收方没有接收到，无法发送确认消息，等待一段时间后发送方重传消息。</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209012107845.png" alt="image-20201209012107845"></p><p>确认消息丢失，同样发生超时重传</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209012132010.png" alt="image-20201209012132010"></p><p>确认的消息很久才到，超时重传</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209012315181.png" alt="image-20201209012315181"></p><p><strong>超时定时器</strong>：每发送一个消息，都需要设置一个定时器</p><p>小结：停止等待协议是最简单的可靠传输协议；停止等待协议对<font color="red">信道的利用效率</font>不高</p><h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h3><p>ARQ(Automatic Repeat reQuest: 自动重传请求) 。用于批量发送消息和确认</p><p><font color="red"><strong>滑动窗口</strong></font>：窗口里的数据都可以发送，只要窗口内的数据发送的确认号到达了，就往前继续滑动。不需要对里面的每个数据进行确认，而采用<font color="red"><strong>累计确认</strong></font>的方法。即只要收到某个消息的确认，说明之前的消息都已经确认了。</p><p>图中 数据5已经收到，窗口直接滑动到6继续发送。</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209013106137.png" alt="image-20201209013106137"></p><h2 id="TCP协议的可靠传输"><a href="#TCP协议的可靠传输" class="headerlink" title="TCP协议的可靠传输"></a>TCP协议的可靠传输</h2><ul><li>TCP的可靠传输基于连续ARQ协议</li><li>TCP的滑动窗口是以字节为单位</li></ul><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209151112625.png" alt="image-20201209151112625"></p><p>假设存在一个窗口大小为7的滑动窗口，收到确认号是22，那么滑动窗口从23开始。此时连续发送了23-26，收到确认号为24，如上图所示，窗口向前滑动两位。</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209151330091.png" alt="image-20201209151330091"></p><p>如果出现了仅收到不连续确认号情况。如上图，此时23、24确认号未收到，需要从23开始重传。这样传输效率就不高，则需要一种方法提高传输效率，这就是<strong>选择重传</strong></p><h3 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a>选择重传</h3><ul><li>选择重传需要指定需要重传的字节（通过字节的32位序号指定）</li><li>序号选择的是需要重传的边界，传输其间的字节流</li></ul><p>注意：选择重传是重传整个字节流，而不是单个字节。</p><h2 id="TCP协议的流量控制"><a href="#TCP协议的流量控制" class="headerlink" title="TCP协议的流量控制"></a>TCP协议的流量控制</h2><p>流量控制指让发送方发送速率不要太快。流量控制是使用滑动窗口来实现的</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201211212117045.png" alt="image-20201211212117045"></p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201211212449952.png" alt="image-20201211212449952"></p><p>再进行数据传输之后，接收方将窗口设置为0，停止传送。等待接收方处理完数据之后，发送调整窗口为1000的消息。此时如果该调整窗口的消息发生了丢失，两边都在等待，形成了死锁，该怎么办？（对于接受带ACK的这种确认消息才有超时重传机制，特殊消息不具有）</p><h3 id="坚持定时器"><a href="#坚持定时器" class="headerlink" title="坚持定时器"></a>坚持定时器</h3><ul><li>当发送方接收到窗口为0的消息，则启动坚持定时器</li><li>坚持定时器每隔一段时间发送一个窗口探测报文。（即便调整窗口的消息丢失也不会变成死锁）</li></ul><h2 id="TCP协议的拥塞控制"><a href="#TCP协议的拥塞控制" class="headerlink" title="TCP协议的拥塞控制"></a>TCP协议的拥塞控制</h2><ul><li>一条数据链路经过非常多的设备</li><li>数据链路中各个部分都有可能成为网路传输的瓶颈</li></ul><p>流量控制考虑点对点的通信量的控制，拥塞控制考虑整个网络，是全局性的考虑</p><p><strong>报文超时可以是判断拥塞的方法</strong></p><p>拥塞控制的两个算法：</p><h3 id="慢启动算法"><a href="#慢启动算法" class="headerlink" title="慢启动算法"></a>慢启动算法</h3><p>由小到大逐渐增加发送数据量，每收到一个保温确认，就加一。比如第一次发送1个报文，收到1次确认后，增发一次报文，第二次发送两个报文，以此类推1，2，4，8，16… 呈现指数增长。</p><p>当指数增长到<strong>慢启动阈值(ssthresh)<strong>，就不再增长了，进行</strong>拥塞避免算法</strong></p><h3 id="拥塞避免算法"><a href="#拥塞避免算法" class="headerlink" title="拥塞避免算法"></a>拥塞避免算法</h3><p>维护一个拥塞窗口的变量；只要网络不拥塞，就试探着拥塞窗口调大。</p><p>假设前面提到发送报文到达了慢启动阈值16，收到16个报文的确认后，随后发送17个报文，18个报文，直到发生拥塞。</p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201214203005176.png" alt="image-20201214203005176" style="zoom:67%;"><p>拥塞控制可以保证网络不发生拥塞的情况下，更多得发送数据</p><h2 id="TCP连接的建立"><a href="#TCP连接的建立" class="headerlink" title="TCP连接的建立"></a>TCP连接的建立</h2><p>TCP首部标记中ACK\SYN\FIN，在TCP连接的建立中非常重要</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201217132914099.png" alt="image-20201217132914099"></p><p>三次握手的过程：</p><ol><li>发送方发送SYN=1,seq=x（同步位是1，序列号为x）的报文，表示请求建立连接</li><li>接收方收到后发送SYN=1,ACK=1,seq=y,ack=x+1（同步位为1，确认位为1，序列号为y，确认号为x+1)的报文，表示收到请求，确认号生效，建立连接</li><li>发送方发送ACK=1,seq=x+1，ack=y+1(确认位为1，序列号为x+1,确认号为y+1)的报文，连接建立成功。</li></ol><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201217134034435.png" alt="image-20201217134034435"></p><h3 id="为什么发送方要发出第三个确认报文呢？"><a href="#为什么发送方要发出第三个确认报文呢？" class="headerlink" title="为什么发送方要发出第三个确认报文呢？"></a>为什么发送方要发出第三个确认报文呢？</h3><p>避免已经失效的连接请求发送到对方，引起错误</p><p>如果第一次连接请求发送后超时，重发之后（假如两次握手建立起连接后），可能会建立起两次连接</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201217134552335.png" alt="image-20201217134552335"></p><h2 id="TCP连接的释放"><a href="#TCP连接的释放" class="headerlink" title="TCP连接的释放"></a>TCP连接的释放</h2><p>第一次挥手：发送方发送FIN=1,seq=u（终止位为1，序列号为u）的报文，表示准备连接释放，发送方进入断开连接的第一次等待状态</p><p>第二次挥手：接收方发送ACK=1,seq=v,ack=u+1(确认位为1，序列号为v，确认号为u+1)的报文，接收方进入关闭等待状态，但是此时接收方还可以继续进行数据传输给发送方。发送方接收到报文后进入断开连接的第二次等待状态。</p><p>第三次挥手：待发送方发送完数据后，就发送FIN=1,ACK=1,seq=w,ack=u+1（终止位为1，确认位为1，序列号为w，确认号为u+1）的报文，随后接收方进入最后确认状态</p><p>第四次挥手：发送方接受到报文后，随即发送ACK=1,seq=u+1,ack=w+1（确认位为1，序列号为u+1，确认号为w+1）的报文，发送方<font color="red">等待计时器</font>生效，随后进入关闭状态。</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201224163319872.png" alt="image-20201224163319872"></p><h3 id="等待定时器"><a href="#等待定时器" class="headerlink" title="等待定时器"></a>等待定时器</h3><p>对于等待定时器，会等待2倍MSL（Max Segment Lifetime）：最长报文段寿命</p><p>MSL建议设置为2分钟</p><p>在等待定时器作用期间不会释放端口（一个TCP连接会占用一个端口），要等待其结束才能重新复用该端口</p><p><strong>为什么需要2MSL</strong></p><p>2MSL一般是报文在网络中存活的最长时间</p><ol><li>确保发送方的ACK可以到达接收方，2MSL时间内没有收到，则接收方会重发报文（第三次挥手步骤）</li><li>确保当前连接的所有报文都已经过期</li></ol><h2 id="套接字与套接字编程"><a href="#套接字与套接字编程" class="headerlink" title="套接字与套接字编程"></a>套接字与套接字编程</h2><p>端口（Port）用来标记不同的网络进程，使用16个比特位表示（0~65535）</p><p>ip加端口的组合就可以用来指定网络中某一台主机的具体进程，这个组合又叫<strong>套接字</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;IP:Port&#125;</span><br></pre></td></tr></table></figure><p><strong>套接字（Socket）</strong>是抽象概念，表示TCP连接的一端。通过套接字就可以进行数据发送和接收</p><p>对与TCP连接就可以表示为两个套接字的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCP=&#123;Socket1:Socket2&#125;=&#123;&#123;IP:Port&#125;&#123;IP:Port&#125;&#125;</span><br></pre></td></tr></table></figure><p>服务端（左）和客户端（右）套接字编程过程</p><p><img src="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201224172347839.png" alt="image-20201224172347839"></p><p>实例：</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span>():</span></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    port = <span class="number">8000</span></span><br><span class="line">    <span class="comment"># 绑定套接字</span></span><br><span class="line">    s.bind((host, port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听，参数为backlog，代表已建立连接队列和未完成建立的连接队列数之和。</span></span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c, addr = s.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Connect Addr:&#x27;</span>, addr)</span><br><span class="line">        c.send(<span class="string">b&#x27;Welcome to my server&#x27;</span>)</span><br><span class="line">        c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server()</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="comment"># 创建套接字</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    <span class="comment"># 连接套接字</span></span><br><span class="line">    s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># recv(bufsize),bufsize表示一次接收的最大数据量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Recv msg:&#123;&#125;,Client:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s.recv(<span class="number">1024</span>), i))</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        client(i)</span><br></pre></td></tr></table></figure><p>运行服务端之后，会自动开启监听，再运行客户端，连接套接字之后就可以通信了，此时服务端也可以知道客户端的地址信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8874)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8875)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8876)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8877)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8878)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8879)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8880)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8881)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8882)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8883)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">0</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">1</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">2</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">3</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">4</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">5</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">6</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">7</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">8</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>网络套接字对比域套接字</strong></p><p>使用网络套接字进行通信会经过四层模型的协议栈；域套接字不需要经过协议栈，适合单机间的通信。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;传输层只涉及到两个终端设备之间，路由器中没有这一层。实现的是终端之间的进程与进程的通信，与之前的Unix域套接字和共享内存等单机进程通信不同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;端口&lt;/strong&gt;（Port）用来标记计算机中不同的网路进程，使用16比特位表示（0-65535</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://123.57.158.5/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>flask表单介绍</title>
    <link href="http://123.57.158.5/2020/10/17/flask%E8%A1%A8%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://123.57.158.5/2020/10/17/flask%E8%A1%A8%E5%8D%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-10-17T07:33:15.000Z</published>
    <updated>2021-05-23T02:34:37.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wtf表单介绍"><a href="#wtf表单介绍" class="headerlink" title="wtf表单介绍"></a>wtf表单介绍</h2><p>特点：</p><ul><li>集成wtforms</li><li>CSRF保护</li><li>与Flask-Uploads一起支持文件上传</li></ul><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-WTF</span><br></pre></td></tr></table></figure><p>配置（CSRF保护）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;WTF_CSRF_SECRET_KEY&#x27;</span>] = <span class="string">&#x27;a random string&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第一个表单模型"><a href="#第一个表单模型" class="headerlink" title="第一个表单模型"></a>第一个表单模型</h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户名 &quot;&quot;&quot;</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="表单常用字段类型及渲染"><a href="#表单常用字段类型及渲染" class="headerlink" title="表单常用字段类型及渲染"></a>表单常用字段类型及渲染</h2><ul><li>label——label标签（如输入框前的文字描述）</li><li>default——表单的默认值</li><li>validators——表单验证规则</li><li>widget——定制界面显示方式（如：文本框、选择框）</li><li>description——帮助文字（在Django表单中使用的是help_text）</li></ul><p><strong>使用模板语法渲染表单内容</strong>：</p><ul><li><p>表单输入区域：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.username &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>表单label：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.username.label.text &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>文本/字符串：</p><ul><li>StringField——字符串输入</li><li>PasswordField——密码输入</li><li>TextAreaField——长文本输入</li><li>HiddenField——隐藏表单域</li></ul><p>数值：</p><ul><li>FloatField——浮点数输入</li><li>IntegerField——整数输入</li><li>DecimalField——小数输入（更精确）</li></ul><p>选择：</p><ul><li>RadioField——radio单选</li><li>SelectField——下拉单选</li><li>SelectMutipleField——下拉多选</li><li>BooleanField——勾选（复选框）</li></ul><p>日期/时间：</p><ul><li>DateField——日期选择</li><li>DateTimeField——日期时间选择</li></ul><p>文件上传：</p><ul><li>FileField——文件单选</li><li>MultipleFileField——文件多选</li></ul><p>其他：</p><ul><li>SubmitField——提交按钮</li><li>FieldList——自定义的表单选择列表（如：选择用户对象）</li><li>FormField——自定义多个字段构成的选项</li></ul><p>from文件，app内引用该表单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, SubmitField</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 模拟登陆表单 &quot;&quot;&quot;</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>,description=<span class="string">&#x27;仅限英文大小写&#x27;</span>)</span><br><span class="line">    password=PasswordField(label=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">    submit = SubmitField(label=<span class="string">&#x27;提交&#x27;</span>)</span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> form <span class="keyword">import</span> LoginForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/form&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_form</span>():</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;form.html&#x27;</span>,form=form)</span><br></pre></td></tr></table></figure><p>然后html中可以渲染表单内容</p><p><strong>也可以通过前面提到的宏来简化表单</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.username.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.username &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.password.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.password &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.submit &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/2020/10/17/flask%E8%A1%A8%E5%8D%95%E4%BB%8B%E7%BB%8D/image-20201125224156148.png" alt="image-20201125224156148"></p><h2 id="通过表单来保存数据"><a href="#通过表单来保存数据" class="headerlink" title="通过表单来保存数据"></a>通过表单来保存数据</h2><ul><li><p>第一步：检测表单是否已经通过验证</p><p><code>form.validate_on_submit()</code></p></li><li><p>第二步：获取表单中传递过来的值</p><p><code>form.field_name.data</code></p></li><li><p>第三步：业务逻辑代码编写（可结合ORM）</p></li></ul><p>涉及到表单提交必然会有<strong>csrf保护</strong>，防止表单重复提交等风险。</p><p>Flask是默认开启CSRF保护的</p><p>关闭单个表单的CSRF保护（不推荐）：</p><p><code>form = LoginForm(csrf_enabled=False)</code></p><p>可能需要同步改写LoginForm的构造方法将参数顺利传入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,csrf_enabled,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(csrf_enabled=csrf_enabled,*args,**Kwargs)</span><br></pre></td></tr></table></figure><p>全局关闭（不推荐）：</p><p><code>WTF_CSRF_ENABLED = False</code></p><p><strong>同步请求CSRF保护</strong></p><ul><li><p>模板中添加csrf_token</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式一 --&gt;</span></span><br><span class="line">&#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 方式二 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;hidden&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;csrf_token&#x27;</span> <span class="attr">vlaue</span>=<span class="string">&#x27;&#123;&#123; csrf_token() &#125;&#125;&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>异步请求（AJAX）CSRF保护</strong></p><ul><li><p>第一步：模板中添加csrf_token</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;csrf-token content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span></span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    var csrftoken=&quot;</span><span class="template-variable">&#123;&#123; <span class="name">csrf_token</span>() &#125;&#125;</span><span class="xml">&quot;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二步：填加X-CSRFToken头</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> csrftoken = $(<span class="string">&#x27;meta[name=csrf-token]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">    <span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, settings</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/i</span>.test(settings.type)</span><br><span class="line">          &amp;&amp; !<span class="built_in">this</span>.crossDomain)&#123;</span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;X-CSRFToken&quot;</span>, csrftoken)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>通过表单传递用户数据并添加进入数据库：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;user_add&#x27;) &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加csrf保护 --&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.username.label &#125;&#125;</span><br><span class="line">        &#123;&#123; form.username &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password.label &#125;&#125;</span><br><span class="line">        &#123;&#123; form.password &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.birthdate.label &#125;&#125;</span><br><span class="line">        &#123;&#123; form.birthdate &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.age.label &#125;&#125;</span><br><span class="line">        &#123;&#123; form.age &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.submit &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% if form.errors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.errors &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>forms.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, DateField, IntegerField, SubmitField</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddUser</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 新增用户 &quot;&quot;&quot;</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>, description=<span class="string">&#x27;仅限英文大小写&#x27;</span>)</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">    birthdate = DateField(label=<span class="string">&#x27;生日&#x27;</span>)</span><br><span class="line">    age = IntegerField(label=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    submit = SubmitField(label=<span class="string">&#x27;提交&#x27;</span>)</span><br></pre></td></tr></table></figure><p>app.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, flash, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> form <span class="keyword">import</span> AddUser</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 配置数据库的连接参数</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:960423@127.0.0.1/flasker&#x27;</span></span><br><span class="line"><span class="comment"># 消息通知用到了session，基于安全的考虑需要加密</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;abacdef&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意添加提交方式method</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/add&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_add</span>():</span></span><br><span class="line">    form = AddUser()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        username = form.username.data</span><br><span class="line">        password = form.password.data</span><br><span class="line">        birthday = form.birthdate.data</span><br><span class="line">        age = form.age.data</span><br><span class="line">        <span class="comment"># 保存数据</span></span><br><span class="line">        user = User(username=username, password=password, birthday=birthday, age=age)</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;add_user_form.html&#x27;</span>,form=form)</span><br></pre></td></tr></table></figure><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>步骤一：导入内置的表单验证器（或自定义）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br></pre></td></tr></table></figure><p>步骤二：配置到表单字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用自定义的表单验证器</span></span><br><span class="line">username=StringField(<span class="string">&#x27;用户名&#x27;</span>,validators=[InputRequired(), my_validator])</span><br></pre></td></tr></table></figure><p>内置表单的验证器：</p><ul><li><code>DataRequired/InputRequired</code>——必填</li><li><code>Email/URL/UUID</code>——电子邮箱/URL/UUID</li><li><code>Length(min=-1,max=-1,message=None)</code>——长度范围验证</li><li><code>EqualTo(filename, message=None)</code>——两个字段输入的值相等（如：密码确认）</li></ul><p>自定义表单验证器：</p><p>场景一：只在本表单中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span>(<span class="params">self, field</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(field.data) &gt; <span class="number">50</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;不超过50个字符&#x27;</span>)</span><br></pre></td></tr></table></figure><p>场景二：在所用表单中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phone_validate</span>(<span class="params">form, field</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(field.data) &gt; <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;不超过50个字符&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>,validators=[phone_validate])</span><br></pre></td></tr></table></figure><p>举个例子：</p><p>验证用户名为手机号，且密码不能为空（采用自带验证器）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddUser</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 新增用户 &quot;&quot;&quot;</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>, description=<span class="string">&#x27;仅限英文大小写&#x27;</span>)</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    birthdate = DateField(label=<span class="string">&#x27;生日&#x27;</span>)</span><br><span class="line">    age = IntegerField(label=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    submit = SubmitField(label=<span class="string">&#x27;提交&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在表单强制为validate_field的这种格式的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span>(<span class="params">self, field</span>):</span></span><br><span class="line">        <span class="comment"># 自定义用户表单验证，强制输入为手机号</span></span><br><span class="line">        username = field.data</span><br><span class="line">        pattern = <span class="string">r&#x27;1[1-9]&#123;10&#125;$&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.search(pattern, username):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;用户名必须为手机号&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><ul><li>方式一：不使用wtf实现</li><li>方式二：使用FileField并添加验证</li></ul><p>文件名称格式化：<code>werkzeug.utils.secure_filename</code></p><h3 id="不使用wtf"><a href="#不使用wtf" class="headerlink" title="不使用wtf"></a>不使用wtf</h3><ol><li><p>设置<code>&lt;form&gt;</code>的enctype</p><p><code>enctype=&quot;multipart/form-data&quot;</code></p></li><li><p>在视图函数中获取文件对象</p><p><code>f = request.files</code></p></li><li><p>保存文件</p><p><code>f.save(file_path)</code></p></li></ol><p>app.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, url_for, request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file_upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_upload</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前温江路径，获得相对的存放上传文件的文件夹路径</span></span><br><span class="line">    media_path = os.path.join(os.path.dirname(__file__), <span class="string">&#x27;medias&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 获取文件对象，字典格式</span></span><br><span class="line">        file = request.files[<span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file:</span><br><span class="line">            <span class="comment"># 格式化文件名（主要是将文件名中的空格用下划线代替）</span></span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            file_path = os.path.join(media_path, filename)</span><br><span class="line">            <span class="comment"># 保存文件</span></span><br><span class="line">            file.save(file_path)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;file_upload.html&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;file_upload&#x27;) &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&#x27;submit file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于文件目录可以在项目顶部配置：</p><p><code>app.config[&#39;UPLOAD_PATH&#39;]=os.path.join(os.path.dirname(__file__), &#39;medias&#39;)</code></p><p>在url中就可以通过<code>app.config[&#39;UPLOAD_PATH&#39;]</code>调取项目路径</p><h3 id="使用FileField并图片验证"><a href="#使用FileField并图片验证" class="headerlink" title="使用FileField并图片验证"></a>使用FileField并图片验证</h3><p><code>FileRequired</code>、<code>FileAllowed</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> flask_wtf.file <span class="keyword">import</span> FileField, FileRequired, FileAllowed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAvtarForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">avatar = FileField(label=<span class="string">&#x27;上传头像&#x27;</span>, validators=[</span><br><span class="line">        FileRequired(<span class="string">&#x27;请选择图片文件&#x27;</span>), </span><br><span class="line">        FileAllowed([<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>],<span class="string">&#x27;格式不支持&#x27;</span>)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>添加路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file_upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_upload</span>():</span></span><br><span class="line">    form = UserAvatarForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        avatar = form.avatar.data</span><br><span class="line">        <span class="comment"># 格式化文件名（主要是将文件名中的空格用下划线代替）</span></span><br><span class="line">        filename = secure_filename(avatar.filename)</span><br><span class="line">        file_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_PATH&#x27;</span>], filename)</span><br><span class="line">        avatar.save(file_path)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;file_upload.html&#x27;</span>, form=<span class="keyword">from</span>)</span><br></pre></td></tr></table></figure><p>模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;file_upload&#x27;) &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    &#123;&#123; form.avatar &#125;&#125;</span><br><span class="line">    &#123;#  显示图片验证未通过的错误 #&#125;</span><br><span class="line">    &#123;% for err in form.avatar.errors %&#125;</span><br><span class="line">        &#123;&#123; err &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&#x27;submit file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2020/10/17/flask%E8%A1%A8%E5%8D%95%E4%BB%8B%E7%BB%8D/html.png" alt="html"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;wtf表单介绍&quot;&gt;&lt;a href=&quot;#wtf表单介绍&quot; class=&quot;headerlink&quot; title=&quot;wtf表单介绍&quot;&gt;&lt;/a&gt;wtf表单介绍&lt;/h2&gt;&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成wtforms&lt;/li&gt;
&lt;li&gt;CSRF保护&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="Python" scheme="http://123.57.158.5/categories/Python/"/>
    
    <category term="Flask" scheme="http://123.57.158.5/categories/Python/Flask/"/>
    
    
    <category term="Python" scheme="http://123.57.158.5/tags/Python/"/>
    
    <category term="Flask" scheme="http://123.57.158.5/tags/Flask/"/>
    
    <category term="Jinja2" scheme="http://123.57.158.5/tags/Jinja2/"/>
    
    <category term="SQLAlchemy" scheme="http://123.57.158.5/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>python使用openpyxl操作excel</title>
    <link href="http://123.57.158.5/2020/10/05/python-openpyxl/"/>
    <id>http://123.57.158.5/2020/10/05/python-openpyxl/</id>
    <published>2020-10-05T06:45:01.000Z</published>
    <updated>2021-05-23T02:34:39.915Z</updated>
    
    <content type="html"><![CDATA[<p>使用Python的openpyxl库操作Excel</p><p>在获得实验Hf同位素数据后，需要自己手动复制粘贴提取出来太麻烦了，所以就想到了python的强大的第三方库，借此机会学一下python操作excel表格。</p><p>首先要有openpyxl库,这里使用的是3.0版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><blockquote><p>该模块支持最新版的Excel文件格式，对Excel文件具有响应的读写操作，对此有专门的Reader和Writer两个类，便于对Excel文件的操作。也可以直接用workbook来进行操作。openpyxl的官方文档地址：<a href="https://openpyxl.readthedocs.io/en/stable/">https://openpyxl.readthedocs.io/en/stable/</a></p></blockquote><p>写入excel：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="keyword">from</span> openpyxl.utils <span class="keyword">import</span> get_column_letter</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line"></span><br><span class="line">dest_filename = <span class="string">&#x27;empty_book.xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建名为‘range names’的sheet,添加39行数据每行0-599</span></span><br><span class="line">ws1 = wb.active</span><br><span class="line">ws1.title = <span class="string">&quot;range names&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">40</span>):</span><br><span class="line">    ws1.append(<span class="built_in">range</span>(<span class="number">600</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 新建名为‘Pi’的sheet，给F5表格写入3.14</span></span><br><span class="line">ws2 = wb.create_sheet(title=<span class="string">&quot;Pi&quot;</span>)</span><br><span class="line"></span><br><span class="line">ws2[<span class="string">&#x27;F5&#x27;</span>] = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建‘Data’sheet,在指定区域放入对应列名的数据</span></span><br><span class="line">ws3 = wb.create_sheet(title=<span class="string">&quot;Data&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line">     <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>, <span class="number">54</span>):</span><br><span class="line">         ws3.cell(column=col, row=row, value=<span class="string">&quot;&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(get_column_letter(col)))</span><br><span class="line">        </span><br><span class="line">wb.save(filename = dest_filename)</span><br></pre></td></tr></table></figure><p>读取已存在的表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(filename = <span class="string">&#x27;empty_book.xlsx&#x27;</span>)</span><br><span class="line">sheet_ranges = wb[<span class="string">&#x27;range names&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(sheet_ranges[<span class="string">&#x27;D18&#x27;</span>].value)</span><br></pre></td></tr></table></figure><h2 id="实战提取实验数据"><a href="#实战提取实验数据" class="headerlink" title="实战提取实验数据"></a>实战提取实验数据</h2><p>直接上代码，注释中解释具体用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hf_data</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于读取/写入excel中的Hf同位素数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, work_path, data_file, i</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param work_path: 数据所在的工作文件夹</span></span><br><span class="line"><span class="string">        :param data_file: 待写入文件</span></span><br><span class="line"><span class="string">        :param i: 写入hf数据编号</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.work_path = work_path</span><br><span class="line">        self.data_file = data_file</span><br><span class="line">        self.i = i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># listdir获取工作文件夹下的所有文件名，返回列表</span></span><br><span class="line">        hf_data_filename = os.listdir(self.work_path)[self.i]</span><br><span class="line">        <span class="keyword">return</span> hf_data_filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 去掉后缀的文件名，用于填写数据编号</span></span><br><span class="line">        <span class="keyword">return</span> self.get_file_name()[:-<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param i: 数据文件在文件夹中的位置</span></span><br><span class="line"><span class="string">        :return: 数据列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hf_data_filename = self.get_file_name()</span><br><span class="line">        sheet_name = self.get_data_name()</span><br><span class="line">        <span class="comment"># 拼接数据文件路径</span></span><br><span class="line">        file_path = os.path.join(self.work_path, hf_data_filename)</span><br><span class="line">        <span class="comment"># 加载数据文件，data_only表示只读取数值，sheet_name是数据编号</span></span><br><span class="line">        hf_data = openpyxl.load_workbook(file_path, data_only=<span class="literal">True</span>)[sheet_name]</span><br><span class="line">        aim_row = hf_data.max_row-<span class="number">8</span></span><br><span class="line">        <span class="comment"># [&#x27;A1&#x27;]等价于 sheet.cell(row=int,column=int)</span></span><br><span class="line">        <span class="keyword">return</span> hf_data[<span class="string">&#x27;P&#123;&#125;:R&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(aim_row,aim_row+<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将数据写入新xlsx文件</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hf_data = self.get_data()</span><br><span class="line">        hf_file = self.data_file</span><br><span class="line">        hf_file[<span class="string">&#x27;A&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = self.get_data_name()</span><br><span class="line">        hf_file[<span class="string">&#x27;B&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">0</span>][<span class="number">0</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;D&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">0</span>][<span class="number">1</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;F&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">0</span>][<span class="number">2</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;C&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">4</span>][-<span class="number">3</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;E&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">4</span>][-<span class="number">2</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;G&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">4</span>][-<span class="number">1</span>].value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    work_path = <span class="string">&#x27;H:\ZHONGYEDING 20191222&#x27;</span></span><br><span class="line">    <span class="comment"># 这里用的是原有excel文件打开 写入</span></span><br><span class="line">    data_file = openpyxl.load_workbook(<span class="string">&#x27;hf.xlsx&#x27;</span>)</span><br><span class="line">    data_sheet = data_file[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line">    <span class="comment"># 循环写入数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(os.listdir(work_path))):</span><br><span class="line">        hf = Hf_data(work_path=work_path, data_file=data_sheet, i=i)</span><br><span class="line">        hf.write_data()</span><br><span class="line">    data_file.save(filename=<span class="string">&#x27;hf.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用Python的openpyxl库操作Excel&lt;/p&gt;
&lt;p&gt;在获得实验Hf同位素数据后，需要自己手动复制粘贴提取出来太麻烦了，所以就想到了python的强大的第三方库，借此机会学一下python操作excel表格。&lt;/p&gt;
&lt;p&gt;首先要有openpyxl库,这里使用的</summary>
      
    
    
    
    <category term="Python" scheme="http://123.57.158.5/categories/Python/"/>
    
    
    <category term="Python" scheme="http://123.57.158.5/tags/Python/"/>
    
    <category term="openpyxl" scheme="http://123.57.158.5/tags/openpyxl/"/>
    
    <category term="Excel" scheme="http://123.57.158.5/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>Flask之ORM的介绍与项目实战</title>
    <link href="http://123.57.158.5/2020/10/03/flask-ORM/"/>
    <id>http://123.57.158.5/2020/10/03/flask-ORM/</id>
    <published>2020-10-03T12:27:12.000Z</published>
    <updated>2021-05-23T02:34:37.801Z</updated>
    
    <content type="html"><![CDATA[<p>Flask ORM的介绍与项目实战</p><h2 id="Flask-SQLAlchemy介绍"><a href="#Flask-SQLAlchemy介绍" class="headerlink" title="Flask-SQLAlchemy介绍"></a>Flask-SQLAlchemy介绍</h2><p>pip安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-SQLAlchemy</span><br></pre></td></tr></table></figure><p>源码安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/">https://flask-sqlalchemy.palletsprojects.com/en/2.x/</a></p><p><a href="https://www.sqlalchemy.org/">https://www.sqlalchemy.org/</a></p><h3 id="Flask-SQLAIchemy配置"><a href="#Flask-SQLAIchemy配置" class="headerlink" title="Flask-SQLAIchemy配置"></a>Flask-SQLAIchemy配置</h3><p><strong>数据库URI</strong><br><code>SQLALCHEMY_DATABASE_URI</code></p><p>URI参数格式：<br>Postgres:<br><code>postgresql://username:password@127.0.0.1/mydatabase</code><br>MySQL:<br><code>mysql://username:password@127.0.0.1/mydatabase</code><br>Oracle:<br><code>oracle://usernname:password@127.0.0.1/mydatabase</code><br>SQLite:<br><code>sqlite:////absolute/path/to/foo.db</code></p><p><strong>多个数据库支持</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_BINDS = &#123;</span><br><span class="line"><span class="string">&#x27;db1&#x27;</span>: <span class="string">&#x27;mysqldb://localhost/user&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db2&#x27;</span>: <span class="string">&#x27;sqlite:////path/to/appmeta.db&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如 flask中配置mysql数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 配置数据库的连接参数</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:960423@127.0.0.1/flasker&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="使用ORM进行CURD操作"><a href="#使用ORM进行CURD操作" class="headerlink" title="使用ORM进行CURD操作"></a>使用ORM进行CURD操作</h2><h3 id="设计数据库模型并创建表"><a href="#设计数据库模型并创建表" class="headerlink" title="设计数据库模型并创建表"></a>设计数据库模型并创建表</h3><p>绑定到Flask对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><p>ORM模型创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line"><span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>指定表的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__tablename__ = <span class="string">&#x27;mall_product&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="创建和删除表"><a href="#创建和删除表" class="headerlink" title="创建和删除表"></a>创建和删除表</h4><ul><li><p>手动创建数据库</p></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; db.create_all()</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; db.drop_all()</span><br></pre></td></tr></table></figure></li></ul><h4 id="ORM模型字段类型支持"><a href="#ORM模型字段类型支持" class="headerlink" title="ORM模型字段类型支持"></a>ORM模型字段类型支持</h4><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Integer/Float</td><td>整型/浮点类型</td></tr><tr><td>String(size)</td><td>有长度限制的字符串</td></tr><tr><td>Text</td><td>一些较长的文本（如：通知详情、商品详情）</td></tr><tr><td>Date Time</td><td>表示为Python datetime 对象的 时间和日期</td></tr><tr><td>Boolean</td><td>存储为布尔值</td></tr><tr><td>PickleType</td><td>存储为一个持久化的Python对象</td></tr><tr><td>LargeBinary</td><td>存储一个任意大的二进制数据</td></tr></tbody></table><ul><li><p>一对多关系，外键关联。relation</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">address = db.relationship(<span class="string">&#x27;UserAddress&#x27;</span>,backref=db.backref(<span class="string">&#x27;person&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>多对多关系(建议使用Table实现，不建议使用Model)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags = db.Table(<span class="string">&#x27;mall_product_tags&#x27;</span>,</span><br><span class="line">db.Column(<span class="string">&#x27;tag_id&#x27;</span>,db.Integer,db.ForeignKey(<span class="string">&#x27;tag.id&#x27;</span>)),</span><br><span class="line">                db.Column(<span class="string">&#x27;product_id&#x27;</span>,db.Integer,db.ForeignKey(<span class="string">&#x27;Product.id&#x27;</span>))</span><br><span class="line">               )</span><br></pre></td></tr></table></figure></li></ul><p><strong>举例</strong>：先创建用户表和用户地址表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:password@127.0.0.1/flasker&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户基本信息表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;flask_user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    birthday = db.Column(db.Date, nullable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户地址表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;flask_user_address&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    addr = db.Column(db.String(<span class="number">64</span>), nullable=<span class="literal">True</span>)</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;flask_user.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 关联的是表的类名</span></span><br><span class="line">    user = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;address&#x27;</span>, lazy=<span class="string">&#x27;select&#x27;</span>))</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from app import db</span><br><span class="line">&gt;&gt;&gt; db.create_all()</span><br></pre></td></tr></table></figure><p>如果中途报错<code>ModuleNotFoundError: No module named &#39;MySQLdb&#39;</code>,说明缺少Python操作数据库的模块可以通过安装包解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><h3 id="插入-修改-删除数据"><a href="#插入-修改-删除数据" class="headerlink" title="插入/修改/删除数据"></a>插入/修改/删除数据</h3><h4 id="新增-修改数据"><a href="#新增-修改数据" class="headerlink" title="新增/修改数据"></a>新增/修改数据</h4><ul><li><p>构造ORM模型对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User(<span class="string">&#x27;amdin&#x27;</span>,<span class="string">&#x27;admin@exmaple.com&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加到db.session (备注：可添加多个对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.add(user)</span><br></pre></td></tr></table></figure></li><li><p>提交到数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure></li></ul><h4 id="物理删除数据"><a href="#物理删除数据" class="headerlink" title="物理删除数据"></a>物理删除数据</h4><ul><li><p>查询ORM 模型对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.query.filter_by(username=<span class="string">&#x27;zhangshan&#x27;</span>).first()</span><br></pre></td></tr></table></figure></li><li><p>添加到db.session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.delete(user)</span><br></pre></td></tr></table></figure></li><li><p>提交到数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用ORM查询并展示数据"><a href="#使用ORM查询并展示数据" class="headerlink" title="使用ORM查询并展示数据"></a>使用ORM查询并展示数据</h3><h4 id="ORM-查询"><a href="#ORM-查询" class="headerlink" title="ORM 查询"></a>ORM 查询</h4><ul><li><p>返回结果集(list)</p><ul><li><p>查询所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure></li><li><p>按条件查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.query.filter_by(username=<span class="string">&#x27;giao&#x27;</span>)</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.username.endswith(<span class="string">&#x27;o&#x27;</span>)).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.order_by(User.username)</span><br></pre></td></tr></table></figure></li><li><p>查询TOP10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.limit(<span class="number">10</span>).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>返回单个ORM对象</p><ul><li><p>根据pk查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.get(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>查询第一条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.first()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>视图快捷函数：有则返回，无则返回404</p><p><code>first()</code>vs<code>first_or_404()</code></p><p><code>get()</code>vs<code>get_or_404()</code></p></li><li><p>多表关联查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.session.query(User).join(Address)</span><br><span class="line">User.query.join(Address)</span><br></pre></td></tr></table></figure></li></ul><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><ol><li><p>使用offset 和limit</p><p><code>.offset(offset).limit(limit)</code></p></li><li><p>paginate分页支持</p><p><code>.paginate(page=2,per_page=4)</code> 返回Pagination对象</p></li></ol><p><code>has_prev/has_next</code>——是否有上一页/下一页</p><p><code>iter_pages()</code>——当前页的数据列表</p><p><code>prev_num/next_num</code>——上一页/下一页页码</p><p><code>total</code>——总记录数</p><p><code>pages</code>——总页数</p><h4 id="结合模板实现分页"><a href="#结合模板实现分页" class="headerlink" title="结合模板实现分页"></a>结合模板实现分页</h4><ol><li><p>准备数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_user = User.query.filter_by(is_valid=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_user.paginate(page=<span class="number">2</span>,per_page=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li><p>在模板中实现分页操作</p></li></ol><p>举例分页展示数据库用户表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 配置数据库的连接参数</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:password@127.0.0.1/flasker&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户基本信息表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;flask_user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    birthday = db.Column(db.Date, nullable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户地址表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;flask_user_address&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    addr = db.Column(db.String(<span class="number">64</span>), nullable=<span class="literal">True</span>)</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;flask_user.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 关联的是表的类名</span></span><br><span class="line">    user = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;address&#x27;</span>, lazy=<span class="string">&#x27;select&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;int:page&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_list</span>(<span class="params">page</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 分页器的使用 &quot;&quot;&quot;</span></span><br><span class="line">    page_size = <span class="number">5</span></span><br><span class="line">    page_data = User.query.paginate(page=page, per_page=page_size)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;user_list.html&#x27;</span>, page_data=page_data, page=page)</span><br></pre></td></tr></table></figure><p>user_list.html:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;共有&#123;&#123; page_data.total &#125;&#125;个用户，&#123;&#123; page_data.pages &#125;&#125;页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;当前是第&#123;&#123; page &#125;&#125;页&lt;/h3&gt;</span><br><span class="line">    &#123;% for user in page_data.items %&#125;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;username: &#123;&#123; user.username &#125;&#125;, password: &#123;&#123; user.password &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% if page_data.has_prev %&#125;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(&#x27;user_list&#x27;,page=page_data.prev_num) &#125;&#125;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% if page_data.has_next %&#125;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(&#x27;user_list&#x27;,page=page_data.next_num) &#125;&#125;&quot;&gt;下一页&lt;/a&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="/2020/10/03/flask-ORM/image-20201003203249331.png" alt="image-20201003203249331" style="zoom:50%;"><h2 id="实践：创建商城模型"><a href="#实践：创建商城模型" class="headerlink" title="实践：创建商城模型"></a>实践：创建商城模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid <span class="keyword">as</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:password@127.0.0.1/flasker&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品标签表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;product_tag&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    uid = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>, default=uuid.uuid4, unique=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    desc = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">    is_valid = db.Column(db.Boolean, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = db.Column(db.DateTime)</span><br><span class="line">    update_time = db.Column(db.DateTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductClass</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品分类表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;product_class&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    uid = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>, default=uuid.uuid4, unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 对应父类 一对多关系</span></span><br><span class="line">    parent_class = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;product_class.id&#x27;</span>))</span><br><span class="line">    name = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    desc = db.Column(db.Text)</span><br><span class="line">    img = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    is_valid = db.Column(db.Boolean, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = db.Column(db.DateTime)</span><br><span class="line">    update_time = db.Column(db.DateTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;product&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    uid = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>, default=uuid.uuid4, unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 商品名称</span></span><br><span class="line">    name = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    desc = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">    img = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    storage = db.Column(db.Integer, default=<span class="number">0</span>)</span><br><span class="line">    view_count = db.Column(db.Integer, default=<span class="number">0</span>)</span><br><span class="line">    score = db.Column(db.Float(precision=<span class="number">2</span>))</span><br><span class="line">    price = db.Column(db.Float(precision=<span class="number">2</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    origin_price = db.Column(db.Float(precision=<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 外键关联</span></span><br><span class="line">    tag = db.relationship(<span class="string">&#x27;Tag&#x27;</span>, backref=<span class="string">&#x27;product&#x27;</span>, lazy=<span class="literal">True</span>)</span><br><span class="line">    p_class = db.relationship(<span class="string">&#x27;ProductClass&#x27;</span>, backref=<span class="string">&#x27;product&#x27;</span>, lazy=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    is_valid = db.Column(db.Boolean, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = db.Column(db.DateTime)</span><br><span class="line">    update_time = db.Column(db.DateTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品与标签、分类之间的多对多关系</span></span><br><span class="line">tags = db.Table(<span class="string">&#x27;tags&#x27;</span>,</span><br><span class="line">                db.Column(<span class="string">&#x27;tag_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product_tag.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">                db.Column(<span class="string">&#x27;product_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product.id&#x27;</span>), primary_key=<span class="literal">True</span>))</span><br><span class="line">p_class = db.Table(<span class="string">&#x27;class&#x27;</span>,</span><br><span class="line">                   db.Column(<span class="string">&#x27;class_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product_class.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">                   db.Column(<span class="string">&#x27;product_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product.id&#x27;</span>), primary_key=<span class="literal">True</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Flask ORM的介绍与项目实战&lt;/p&gt;
&lt;h2 id=&quot;Flask-SQLAlchemy介绍&quot;&gt;&lt;a href=&quot;#Flask-SQLAlchemy介绍&quot; class=&quot;headerlink&quot; title=&quot;Flask-SQLAlchemy介绍&quot;&gt;&lt;/a&gt;Flask-S</summary>
      
    
    
    
    <category term="Python" scheme="http://123.57.158.5/categories/Python/"/>
    
    <category term="Flask" scheme="http://123.57.158.5/categories/Python/Flask/"/>
    
    
    <category term="Python" scheme="http://123.57.158.5/tags/Python/"/>
    
    <category term="实战" scheme="http://123.57.158.5/tags/%E5%AE%9E%E6%88%98/"/>
    
    <category term="Flask" scheme="http://123.57.158.5/tags/Flask/"/>
    
    <category term="Jinja2" scheme="http://123.57.158.5/tags/Jinja2/"/>
    
    <category term="SQLAlchemy" scheme="http://123.57.158.5/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络2之网络层</title>
    <link href="http://123.57.158.5/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>http://123.57.158.5/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2020-09-02T11:56:08.000Z</published>
    <updated>2021-05-23T02:34:45.084Z</updated>
    
    <content type="html"><![CDATA[<p>TCP/IP四层模型（应用层、传输层、网络层、网络接口层）之网络层</p><p>前面讲到数据链路层只能解决相邻物理节点传输的问题，而网络层能解决跨节点传输的问题。</p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200902200857189.png" alt="image-20200902200857189"></p><h2 id="IP协议详解"><a href="#IP协议详解" class="headerlink" title="IP协议详解"></a>IP协议详解</h2><h3 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h3><p>实际的计算机网络是错综复杂的，物理设备通过使用IP协议，屏蔽了物理网络之间的差异，当网络中的主机使用IP协议连接时，则无需关注网络细节。这就是<strong>虚拟互连网络</strong>的概念</p><ul><li><p>IP协议使得复杂的实际网络变为一个虚拟互连的网络</p></li><li><p>IP协议使得网络层可以屏蔽底层细节而专注网络层的数据转发</p></li><li><p>IP协议<font color="red">解决了在虚拟网络中数据传输路径的问题</font></p></li></ul><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>MAC地址是不可改变的，IP地址根据网络环境发生变化。</p><ul><li>IP地址长度为32位，常分为4个8位</li><li>IP地址常使用点分十进制来表示</li></ul><p>这样的IP地址可以有2<sup>32</sup>个</p><p>前面提到，数据传输对于物理层来说传输的是01…这样的比特流，对于数据链路层，传输的是<strong>数据帧</strong>，而其中出去帧首尾部以外，帧数据里面就是<strong>IP数据报</strong>的内容了</p><p><strong>IP数据报</strong>分为IP首部和IP数据报的数据</p><p>下表就是IP协议中IP首部的具体内容，每一行都是32位（4个字节），前五行就是IP协议头部的内容，所以对于IP头部至少有20个字节大小：</p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200906142941406.png" alt="image-20200906142941406" style="zoom: 50%;"><p><strong>版本</strong>：占4位，指的是IP协议的版本，通信双方的版本必须一致，有IPv4、IPv6。</p><p><strong>首部长度</strong>：占4位，最大数值为15，表示的是IP首部长度，单位是“32位字“（4个字节），也即是IP首部最大长度我60字节。</p><p><strong>总长度</strong>：占16位，最大数值为65535（32位字），表示的是IP数据报总长度（IP首部+IP数据）。之前的数据链路层知识中，最大传输单元<strong>MTU</strong>一般为1500个字节，存在总长度比MTU高的情况，把一个较长的IP数据报拆分成多个数据帧进行传输。</p><p><strong>标记</strong>：标记IP报文是否可以分片，目前只有2位有意义，IP数据报较长会进行分片处理</p><p><strong>片偏移</strong>：如果需要分片处理，用于记录当前数据帧保存的是第几个偏移的数据。</p><p><strong>TTL</strong>：占8位，表示IP数据报文在网络中的寿命，每经过一个设备TTL减1，当TTL=0时，网络设备必须丢弃该报文。避免数据被无限的传输而消耗带宽。</p><p><strong>协议</strong>：占8位，表明IP数据所携带的具体数据是什么协议的（如TCP、UDP等）</p><p>下列这些协议在使用ip协议进行传输的时候，都会附上各协议对应字段值。同时在ip协议中还可以继续封装ip协议</p><table><thead><tr><th>协议名</th><th>ICMP</th><th>IGMP</th><th><em>IP</em></th><th>TCP</th><th>UDP</th><th>OSPF</th><th>…</th></tr></thead><tbody><tr><td>字段值</td><td>1</td><td>2</td><td>4</td><td>6</td><td>17</td><td>89</td><td></td></tr></tbody></table><p><strong>首部校验和</strong>：占16位，校验IP首部是否有出错</p><p><strong>源IP地址</strong>：指示发送IP地址</p><h2 id="IP协议的转发流程"><a href="#IP协议的转发流程" class="headerlink" title="IP协议的转发流程"></a>IP协议的转发流程</h2><h3 id="路由表简介"><a href="#路由表简介" class="headerlink" title="路由表简介"></a>路由表简介</h3><p><strong>逐跳（hop-by-hop)</strong>: 就是发出的ip报文从各个网络、路由器最后到接收设备的过程</p><p><strong>路由表简介</strong></p><p>在单个路由表中，根据MAC地址寻找对应接口的过程：</p><ol><li>A通过网卡发出数据帧</li><li>数据帧到达路由器，路由器取出前6字节</li><li>路由器匹配MAC地址表，找到对应的网络接口</li><li>路由器往该网络接口发送数据帧</li></ol><p>而在通过<strong>路由表</strong>，我们可以在逐跳过程中找到目的IP地址对应的下一跳的IP地址</p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200906220623339.png" alt="image-20200906220623339"></p><p>计算机或者路由器都拥有路由表</p><h3 id="IP协议的转发流程-1"><a href="#IP协议的转发流程-1" class="headerlink" title="IP协议的转发流程"></a>IP协议的转发流程</h3><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200906220946384.png" alt="image-20200906220946384" style="zoom:50%;"><ul><li>A发出目的地为C的IP数据报，查询路由器表发现下一跳为E</li><li>A将数据报发送给E</li><li>E查询路由表发现下一跳为F，将数据报发送给F</li><li>F查询路由表发现目的地C直接连接，将数据报发送给C</li></ul><p><strong>将网络层与数据链路层结合起来看，该过程为：</strong></p><p><strong>A-路由E</strong>：</p><ul><li>A发出目的地为C的IP数据报，<font color="red">查询路由表发现下一跳为E</font></li><li>A将IP数据报<font color="red">交给数据链路层，并告知目的MAC地址是E</font></li><li>数据链路层<font color="red">填充源MAC地址</font>和<font color="red">目的MAC地址E</font></li><li>数据链路层通过物理层将数据发送给E</li></ul><p><strong>路由E-路由F</strong>：</p><ul><li>E的数据链路层收到数据帧，<font color="red">把数据交给网络层</font></li><li>E<font color="red">查询路由表，发现下一跳为F</font></li><li>E<font color="red">把数据交给数据链路层，并告知目的MAC地址为F</font></li><li>E的数据链路层<font color="red">封装数据帧并发送</font></li></ul><p><strong>路由F-C</strong>：</p><ul><li>F的数据链路层接收到数据帧，<font color="red">把帧数据交给网络层</font></li><li>F<font color="red">查询路由表，发现下一跳为C</font></li><li>F<font color="red">把数据交给数据链路层，并告知目的MAC地址为C</font></li><li>F的数据链路层<font color="red">封装数据帧并发送</font></li></ul><p>值得注意的是：</p><p><strong>数据帧的每一跳MAC地址都在变化</strong>，因为发送端开始不知道目的主机的MAC地址，所以没经过一个路由MAC地址是在变化的。</p><p><strong>IP数据报每一跳的IP地址始终不变</strong>。路由器只是在接收到数据报时候，检查数据报的目的IP地址，然后查找路由表，选择合适的接口发送出去。</p><h2 id="IP地址的子网划分"><a href="#IP地址的子网划分" class="headerlink" title="IP地址的子网划分"></a>IP地址的子网划分</h2><h3 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h3><p>如果对42亿多个ip地址进行分类的话十分复杂，则需要先把ip地址进一步划分为两个部分，网络号和主机号，加起来为32位。</p><p>A类地址：网络号8位，主机号24位；B类地址：网络号16位，主机号16位；C类地址：网络号24位，主机号8位。</p><p>注意：<font color="red">根据网络号的前几位判断，比如A类是0开头，B类是10开头</font></p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200913131127092.png" alt="image-20200913131127092"></p><table><thead><tr><th></th><th>最小网络号</th><th>最大网络号</th><th>子网数量</th><th>最小主机号</th><th>最大主机号</th><th>主机数量</th></tr></thead><tbody><tr><td>A</td><td>0（00000000）</td><td>127（01111111）</td><td>2^7</td><td>0.0.0</td><td>255.255.255</td><td>2^24</td></tr><tr><td>B</td><td>128.0</td><td>192.255</td><td>2^14</td><td>0.0</td><td>255.255</td><td>2^16</td></tr><tr><td>C</td><td>192.0.0</td><td>223.255.255</td><td>2^21</td><td>0</td><td>255</td><td>2^8</td></tr></tbody></table><p><strong>特殊主机号</strong></p><ul><li><p>主机号全0表示当前网络段，不可分配为特定主机</p><p>例如1.0.0.0（主机号全为0）表示A类地址的网路段</p></li><li><p>主机号为全1表示广播地址，向当前网络段所有主机发消息</p><p>例如1.255.255.255，如果往这个地址发送信息的话，会广播给所有当前网络段的所有主机</p></li></ul><p><strong>特殊的网络号</strong></p><ul><li>A类地址网路段0(00000000)表示特殊网络</li><li>A类地址网络段后7位全1(01111111:127)表示回环地址</li><li>B类地址网络段(10000000.00000000:128.0)是不可使用的</li><li>C类地址网络段(192.0.0)是不可使用的</li></ul><p>出去这些特殊网络号和主机号之后</p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ拼音截图20201010203015.png" alt="QQ拼音截图20201010203015" style="zoom:60%;"><blockquote><p>127.0.0.1，通常被称为本地回环地址(Loopback Address)，不属于任何一个有类别地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会宕掉的接口。在Windows操作系统中也有相似的定义，所以通常在安装网卡前就可以ping通这个本地回环地址。一般都会用来检查本地网络协议、基本数据接口等是否正常的。</p></blockquote><p>另外D类地址网络号前几位为1110……;E类地址网络号1111……</p><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><p><strong>假设某公司拥有256名员工，没人配备一个计算机，请问该公司应该申请哪种网路段？</strong></p><p>答：只能分配B类地址，比如分配192.17.0.0这个网络段，有2^16-2个主机号/ip地址</p><p>但是会造成很大的地址空间浪费，因此提出了<strong>子网划分</strong>的概念</p><p>把ip地址分为网路号、子网号、主机号</p><p>比如将193.10.10.0分为两个子网：最后八位主机号分别是.00000000和.10000000。即193.10.10.0<del>193.10.10.127和193.10.10.128</del>193.10.10.255，每个子网有128个ip地址</p><p><strong>子网号这么多人，有没有办法快速判断某个IP的网络号？</strong></p><p><strong>子网掩码</strong></p><blockquote><p>子网掩码(subnet mask)又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。</p></blockquote><ul><li>子网掩码和IP地址一样，都是32位</li><li>子网掩码由连续的1和连续的0组成</li><li>某一个子网的子网掩码具备网络号位数个连续的1</li></ul><p>所以A类地址的子网掩码是255.0.0.0；B类地址的是255.255.0.0；C类地址的是255.255.255.0</p><p>通过ip与其子网掩码可以快速得到该ip地址的网络号</p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ拼音截图20201010211843.png" alt="QQ拼音截图20201010211843" style="zoom:60%;"><p>例如一个ip地址为193.10.10.6，其子网掩码为255.255.255.128，将他们转换为二进制，做<strong>AND运算</strong>，得到二进制的网络号，其网络号为193.10.10.0</p><p>假设一个ip为193.10.10.129，子网掩码为255.255.255.128，其网络号为？</p><p>答：193.10.10.128</p><p>内网通信问题：</p><p>如果两个ip在同一个网络号下，就可以实现内网通信。</p><h3 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h3><ul><li><p>CIDR中没有A\B\C类网络号，和子网划分的概念</p></li><li><p>CIDR将网络前缀相同的IP地称为一个“CIDR地址块”</p><p>将ip地址分为<strong>网络前缀</strong>和主机号，网络前缀是任意位数的</p></li></ul><p>CIDR使用斜线记法</p><p>例如193.10.10.129/25 表明其网络前缀有25位，主机号7位。其他前缀长度有13,14,15,16…等</p><p>CIDR除去网络前缀的概念外，其他的子网掩码等性质与前面一致，其相比原来子网划分更加灵活，目前较为通用。</p><h2 id="网络地址转换NAT技术"><a href="#网络地址转换NAT技术" class="headerlink" title="网络地址转换NAT技术"></a>网络地址转换NAT技术</h2><p>内网地址：内部机构使用；避免与外网地址重复</p><p>外网地址：网球范围使用；全球公网唯一</p><p>三类内网地址：</p><ul><li>10.0.0.0~10.255.255.255(支持千万数量级设备)</li><li>172.16.0.0~172.31.255.255(支持百万数量级设备)</li><li>192.168.0.0~192.168.255.255(支持万数量级设备)</li></ul><p>当内网多个设备使用同一个外网IP请求外网的服务，外部怎么知道具体是哪个设备在请求的？</p><p>此时需要使用网络地址转换NAT(Network Address Translation)，NAT技术用于多个主机通过一个公有IP访问互联网的私有网络中；</p><p>NAT技术减缓了IP地址的损耗，但是增加了网络通信的复杂度</p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ拼音截图20201016145019.png" alt="QQ拼音截图20201016145019" style="zoom:60%;"><p>举例：当内网设备192.168.2.11进程与外网某目的计算机进行通信时使用到了NAT技术（路由器的外网IP地址为173.21.59.10）：</p><p>192.168.2.11:6666进程通过NAT技术转化为新的地址和端口号然后发送到网络中去。接收数据也是这一过程。</p><p>这个映射表就成为NA(P)T表</p><h2 id="ICMP协议详解"><a href="#ICMP协议详解" class="headerlink" title="ICMP协议详解"></a>ICMP协议详解</h2><p>网际控制报文协议（Internet Control Message Protocal）</p><p>ICMP协议可以报告错误信息或者异常情况</p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20201016150645.png" alt="QQ拼音截图20201016150645"></p><p>ICMP报文数据包含8位类型8位代码和16位校验和</p><p>如果ip协议传输的是ICMP数据的话，将会在IP首部中的8位协议写入1</p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20201016151046.png" alt="QQ拼音截图20201016151046"></p><p>报文种类：差错报告报文和询问报文</p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20201016151307.png" alt="QQ拼音截图20201016151307"></p><p>举例：如果一个计算机和另一个已关机的计算机通信，此时就会返回ICMP代码为1，类型为3的报文</p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20201016151718.png" alt="QQ拼音截图20201016151718"></p><h2 id="ICMP协议的应用"><a href="#ICMP协议的应用" class="headerlink" title="ICMP协议的应用"></a>ICMP协议的应用</h2><h3 id="Ping应用"><a href="#Ping应用" class="headerlink" title="Ping应用"></a>Ping应用</h3><p>ping这个命令返回的就是一种询问报文，报文类型为回送请求或应答</p><p>网络故障排查：</p><p>ping127.0.01可以检查本地协议或数据接口是否正常；ping网关地址（路由器地址192.168.1.1）检查与路由器的连接是否正常；ping远端地址 不通说明运营商问题</p><h3 id="Traceroute应用"><a href="#Traceroute应用" class="headerlink" title="Traceroute应用"></a>Traceroute应用</h3><p>Traceroute可以探测IP数据报在网络中走过的路径。原理是通过TTL不停增加1，返回ICMP协议<strong>终点不可达差错报文</strong>来确定每个经过的路径</p><p>可通过命令行查询 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tracert rice-and-bran.site</span><br></pre></td></tr></table></figure><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20201016163314268.png" alt="image-20201016163314268"></p><h2 id="网络层的路由概述"><a href="#网络层的路由概述" class="headerlink" title="网络层的路由概述"></a>网络层的路由概述</h2><p>进行网络通信时候，通过路由表来查找下一跳地址，那么：</p><p>下一跳地址是怎么来的？下一跳地址是唯一的吗？下一跳地址是最佳的吗？</p><p>路由器是怎么协同工作的？</p><p>为了解决这些问题，需要一个好的路由算法。</p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/clip_image001.png" alt="img"></p><ul><li><p>每一顶点表示一个网络、路由器或者计算机</p></li><li><p>每一条边表示一条网络路劲</p></li></ul><p>路由算法实际上是图论的算法，但是网络环境复杂，又要比图论的算法要复杂！</p><p>一个好的路由算法需要满足：</p><ul><li><p>算法是正确的、完整的</p></li><li><p>算法在计算上应该尽可能的简单</p></li><li><p>算法可以适应网络中的变化</p></li><li><p>算法是稳定的和公平的</p></li></ul><p><strong>自治系统（Autonomous System）</strong>：一个自治系统是处于一个管理机构下的网络设备群；AS内部自行管理，AS对外提供一个或者多个出入口。</p><p>在之前提到的网络层次划分，每一个主干ISP或者地区ISP或者校园都可以理解为一个AS</p><p>自治系统内部路由的协议称为：内部网关协议（RIP、OSPF）</p><p>自治系统外部路由的协议称为：外部网关协议（BGP）</p><h2 id="内部网关路由协议之RIP协议"><a href="#内部网关路由协议之RIP协议" class="headerlink" title="内部网关路由协议之RIP协议"></a>内部网关路由协议之RIP协议</h2><h3 id="距离矢量（DV）算法"><a href="#距离矢量（DV）算法" class="headerlink" title="距离矢量（DV）算法"></a>距离矢量（DV）算法</h3><ul><li>每一个节点使用两个向量D<sub>i</sub>和S<sub>i</sub></li><li>D<sub>i</sub>描述的是当前节点到别的节点的距离</li><li>S<sub>i</sub>描述的是当前节点到别的节点的下一节点</li><li>每一个节点与相邻的节点交换D<sub>i</sub>和S<sub>i</sub>的信息</li><li><font color="red">每一个节点根据交换的信息更新自己的节点信息</font></li></ul><h3 id="RIP协议的过程"><a href="#RIP协议的过程" class="headerlink" title="RIP协议的过程"></a>RIP协议的过程</h3><ul><li>RIP(Routing Information Protocol)协议，是使用DV算法的一种路由协议</li><li>RIP协议把网络的跳数(hop)作为DV算法的距离</li><li>RIP协议每隔30s交换一次路由信息</li><li>RIP协议认为跳数&gt;15的路由则为不可达路由</li></ul><ol><li>路由初始化路由信息(两个向量D<sub>i</sub>和S<sub>i</sub>)</li><li>对相邻路由器X发过来的信息，对信息的内容进行修改（下一跳地址设置为X，所有距离加1）<ol><li>检索本地路由，将信息中新的路由插入到路由表里面</li><li>检索本地路由，对于下一跳为X的，更新为修改后的信息</li><li>检索本地路由，对此相同目的的距离，如果信息的距离更小，则更新本地路由表</li></ol></li><li>如果3分钟没有收到路由信息，则把相邻路由设置为不可达（16跳）</li></ol><h3 id="RIP协议缺点"><a href="#RIP协议缺点" class="headerlink" title="RIP协议缺点"></a>RIP协议缺点</h3><p>故障信息传递慢：</p><p>过度依赖相邻路由信息，“视野不够广”，如果A宕机，B、C之间会反复查找，直到达到16跳。</p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20201115104650763.png" alt="image-20201115104650763" style="zoom: 67%;"><p>RIP协议优点是实现简单，开销很小，但是限制了网络的规模，“坏消息传的慢”，更新收敛时间过长</p><h2 id="Dijkstra-迪杰斯特拉-算法"><a href="#Dijkstra-迪杰斯特拉-算法" class="headerlink" title="Dijkstra(迪杰斯特拉)算法"></a>Dijkstra(迪杰斯特拉)算法</h2><p>Dijkstra(迪杰斯特拉)算法是准名的图算法，解决有权图从一个节点到其他节点的最短路径问题。</p><p>特点是“以起点为中心，向外层层扩展”</p><p>例如：</p><p>我们要从A到E，每两个节点之间距离已知，则可以有以下五条路径</p><p><img src="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20201129184837923.png" alt="image-20201129184837923"></p><p>算法实现过程：</p><p><em>1. 初始化两个集合(S,U)(S为只有初始顶点点A的集合，U为其他顶点集合)</em></p><p><em>2. 如果U不为空，对U集合顶点进行距离的排序，并取出距离A最近的一个顶点D</em></p><ul><li><em>将顶点D纳入S集合</em></li><li><em>更新A通过顶点D到达U集合所有点的距离（如果距离更小则更新，否则不更新）</em></li><li><em>重复2步骤</em></li></ul><p><em>3. 直到U集合为空，算法完成</em></p><h2 id="内部网关协议之OSPF协议"><a href="#内部网关协议之OSPF协议" class="headerlink" title="内部网关协议之OSPF协议"></a>内部网关协议之OSPF协议</h2><p>LS协议定义了内部网关的规则，OSPF协议用于实现该规则</p><h3 id="链路状态（LS）协议"><a href="#链路状态（LS）协议" class="headerlink" title="链路状态（LS）协议"></a>链路状态（LS）协议</h3><p>规则：</p><p>路由器向所有的相邻路由器发送信息，一传十，十传百。而RIP协议中只和相邻的路由器交换信息。</p><p>该协议的消息描述该路由器与相邻路由器的链路状态（包括距离、时延、带宽等），而前面的RIP协议只能交换并使用信息中的跳数</p><p>只有链路状态发生变化时，才发送更新信息</p><h3 id="OSPF协议的过程"><a href="#OSPF协议的过程" class="headerlink" title="OSPF协议的过程"></a>OSPF协议的过程</h3><p>OSPF(Open Shortest Path First: 开放最短路径优先)，核心是Dijkstra算法。</p><p>向所有路由器发送信息，实现”网络的完整拓扑”，也称”链路状态数据库“。然后通过Dijstra算法，每个路由器都能找到最短路径</p><p> 消息描述该路由器与相邻路由器的链路状态（包括距离、时延、带宽等），OSPF协议实现起来更客观更先进</p><p>只有链路状态发生变化时，才发送更新信息，减少了数据的交换，更快的收敛</p><p>OSPF协议的五种消息类型：</p><ul><li>问候消息</li><li>链路状态数据库描述信息</li><li>链路状态请求信息</li><li>链路状态更新信息</li><li>链路状态确认信息</li></ul><p>过程：1. 路由器接入网络 2. 路由器向邻居发出问候信息 3. 与邻居交流链路状态数据库 4.路由器广播和更新未知路由</p><p><strong>RIP对比OSPF</strong></p><table><thead><tr><th>RIP协议</th><th>OSPF协议</th></tr></thead><tbody><tr><td>从邻居看网络</td><td>整个网络的拓扑</td></tr><tr><td>在路由器之间累加距离</td><td>Dijstra算法计算最短路径</td></tr><tr><td>频繁、周期更新、收敛很慢</td><td>状态变化更新，收敛很快</td></tr><tr><td>路由间拷贝路由信息</td><td>路由间传递链路状态，自行计算路径</td></tr></tbody></table><h2 id="外部网关路由协议之BGP协议简述"><a href="#外部网关路由协议之BGP协议简述" class="headerlink" title="外部网关路由协议之BGP协议简述"></a>外部网关路由协议之BGP协议简述</h2><p>BGP（Border Gateway Protocol: 边际网关协议），是运行在AS(自治系统)之间的一种协议</p><p>外部网关使用BGP协议的原因：</p><ul><li>互联网规模很大，如果使用到“链路状态数据库”则十分庞大；</li><li>且AS内部之间使用不同的路由协议，无法直接兼容</li><li>AS之间需要考虑除网络特性之外的一些因素（政治、安全等）</li></ul><p>BGP协议因为很多其他的因素，能够找到一条到达目的地比较好的路由（不一定是最好的）</p><p>BGP发言人（speaker）：一般将AS边界路由器配置为BGP发言人。BGP并不关心内部网络拓扑，AS之间通过BGP发言人交流信息，BGP Speaker可以人为策略配置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TCP/IP四层模型（应用层、传输层、网络层、网络接口层）之网络层&lt;/p&gt;
&lt;p&gt;前面讲到数据链路层只能解决相邻物理节点传输的问题，而网络层能解决跨节点传输的问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://123.57.158.5/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://123.57.158.5/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
