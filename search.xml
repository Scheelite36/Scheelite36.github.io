<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/05/23/hello-world/"/>
      <url>/2021/05/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的一些性质及遍历</title>
      <link href="/2021/03/11/b-tree-traverse/"/>
      <url>/2021/03/11/b-tree-traverse/</url>
      
        <content type="html"><![CDATA[<p>算法中已经提到过二叉树，这里重点讲二叉树的遍历。参考书籍《大话数据结构》</p><p>二叉树的一些性质，这些性质可以很简单得到证明：</p><ol><li>在二叉树第i层最多有2<sup>i-1</sup>个节点</li><li>深部为k的二叉树最多有2<sup>k</sup>-1节点</li><li>对于任何一个二叉树，如果其终端节点（叶子节点）数为n<sub>0</sub>，度为2的节点数为n<sub>2</sub>，n<sub>0</sub>=n<sub>2</sub>+1</li><li>具有n个节点的完全二叉树的深度为[log<sub>2</sub>n]+1（[x]表示不大于x的最大整数）。<em>可以理解为性质2的倒推</em></li><li>如果有一颗n个节点的完全二叉树的节点按照层序编号（从第一层到最后一层，每层从左往右），对任意一个节点（1&lt;=i&lt;=n）有：<ul><li>如果i=1，则节点i是完全二叉树的根，无双亲；如果i&gt;1，其双亲节点是[i/2]</li><li>如果2i&gt;n，则节点i无左孩子（节点i为叶子节点）；否则<font color='red'>左孩子是2i</font></li><li>如果2i+1&gt;n，则节点i无右孩子；否则其<font color='red'>右孩子是节点2i+1</font></li></ul></li></ol><p><strong>二叉树的遍历</strong>：是指从根节点出发，按照某种次序依次访问二叉树中所有节点，使得每个节点被访问一次且仅被访问一次。</p><div class="mermaid">graph TDA --&gt; BA --&gt; CB --&gt; DB --&gt; EC --&gt; FC --&gt; G</div><p>遍历可分为前序（ABC)  中序(BAC)  后序(BCA)</p><p><strong>前序遍历</strong>：依次访问根节点——左孩子——右孩子。上图的二叉树前序遍历后为ABDECFG</p><p><strong>中序遍历</strong>：依次访问左孩子——根节点——右孩子。DBEAFCG</p><p><strong>后序遍历</strong>：依次访问左孩子——右孩子——根节点。DEBFGCA</p><p>层序遍历：一层层从左至右。ABCDEFG</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文本编辑器及软件安装</title>
      <link href="/2021/01/06/Linux%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>/2021/01/06/Linux%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E5%8F%8A%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="Nano文本编辑器"><a href="#Nano文本编辑器" class="headerlink" title="Nano文本编辑器"></a>Nano文本编辑器</h2><blockquote><p>复制、剪贴和粘贴</p><p>复制一整行：Alt+6</p><p>剪贴一整行：Ctrl+K</p><p>粘贴：Ctrl+U</p><p>如果需要复制／剪贴多行或者一行中的一部分，先将光标移动到需要复制／剪贴的文本的开头，按Ctrl+6（或者Alt+A）做标记，然后移动光标到 待复制／剪贴的文本末尾。这时选定的文本会反白，用Alt+6来复制，Ctrl+K来剪贴。若在选择文本过程中要取消，只需要再按一次Ctrl+6。</p><p>搜索</p><p>按Ctrl+W，然后输入你要搜索的关键字，回车确定。这将会定位到第一个匹配的文本，接着可以用Alt+W来定位到下一个匹配的文本。</p><p>保存</p><p>使用Ctrl+O来保存所做的修改</p><p>退出</p><p>按Ctrl+X</p></blockquote><p><code>nano file</code>可以直接路径，没有该文件的话，就会创建一个再编辑</p><p><strong>配置nano编辑器</strong></p><p>单个用户配置：</p><p>一般通过<code>/home/username</code>路径下的.nanorc文件修改。<code>nano .nanorc</code></p><p>配置语言以set开头：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 相当于命令后面加 -m 参数 鼠标生效</span><br><span class="line">set mouse</span><br><span class="line"># 相当于 -i 参数 自动缩进</span><br><span class="line">set autoindent</span><br><span class="line"># 激活职能home键 -A参数</span><br><span class="line">set smarthome</span><br></pre></td></tr></table></figure><p>全局配置：</p><p><code>/etc/nanorc</code>文件中修改（root用户）</p><p><code>sudo nano /etc/nanorc</code></p><p><strong>配置终端</strong></p><p>单个用户的终端配置文件<code>/home/username/.bashrc</code></p><p><code>nano ~/.bashrc</code></p><p>bash其实是一种shell，shell用于解释我们输入终端的各种命令的，是用户和操作系统之间的一个命令解释器。</p><p>配置.bashrc文件可以修改终端的各种配置，如命令提示符样式，创建命令别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建别名 alias xx=&#x27;command&#x27;</span><br><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias la=&#x27;ls -A&#x27;</span><br><span class="line">alias l=&#x27;ls -CF&#x27;</span><br></pre></td></tr></table></figure><p>全局配置的路径：<code>/etc/bash.bashrc</code>，但是家目录下的<font color='red'>优先级</font>高于系统的bash.bashrc文件</p><p><strong>profile配置文件</strong></p><p>单个用户：<code>~/.profile</code>，全局<code>/etc/profile</code></p><p>bashrc应用于图形化终端，profile应用于TTY1-TTY6这种需要用户登录的终端。profile文件会调用.bashrc</p><img src="Linux文本编辑器及软件安装/151709029500416466.jpg" alt="151709029500416466" style="zoom:33%;" /> <p>bashrc 和 profile二者修改后都是下次登陆生效，需要立即生效使用source命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source .bashrc</span><br><span class="line">source .profile</span><br></pre></td></tr></table></figure><h2 id="Ubuntu软件仓库"><a href="#Ubuntu软件仓库" class="headerlink" title="Ubuntu软件仓库"></a>Ubuntu软件仓库</h2><p>对于ubuntu系统，在全世界各地分布有软件仓库。Linux的.deb软件包相较于windows的exe安装包文件，包含了依赖关系的管理，对于依赖的软件会自动下载。</p><p><strong>管理软件仓库</strong></p><p>如果我们要切换软件仓库，可以通过编辑软件仓库列表文件<code>/etc/apt/sources.list</code>(root模式)</p><p>一般来说，这个文件中有作用的行是由以下两个指令开头：</p><ul><li>deb: 用于下载软件的二进制版本，大多数情况下我们用的是这个</li><li>deb-src: 用于下载软件的源代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举例其中一行</span></span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ bionic universe</span><br></pre></td></tr></table></figure><p>第二个是仓库地址，第三个bionic是Ubuntu版本代号，第三个universe是软件仓库的区域，也就是要查看的代码仓库的不同分区。</p><p>Ubuntu图形界面中software&amp;update中可以直接切换软件仓库，更加方便</p><h3 id="终端包管理工具"><a href="#终端包管理工具" class="headerlink" title="终端包管理工具"></a>终端包管理工具</h3><p><code>apt-get</code>/<code>apt</code>管理包命令</p><p><code>aptitude</code>：这个命令再卸载软件时可以卸载不用的依赖</p><p><code>sudo apt update</code>更新软件包缓存；<code>sudo apt-cache search</code>搜索软件包；<code>sudo apt install</code>安装软件包；<code>sudo apt upgrade</code>升级所有已安装软件包；<code>sudo apt autoremove</code></p><p><code>dpkg</code>命令时apt-get和aptitude两个命令的后端（backend）命令</p><p>依赖链：<code>dpkg--&gt;apt-get,aptitude--&gt;Ubuntu Software</code></p><p>使用dpkg可以安装本地的软件包：<code>sudo dpkg -i *.deb</code>，卸载：<code>sudo dpkg -r 包名</code></p><h2 id="阅读手册"><a href="#阅读手册" class="headerlink" title="阅读手册"></a>阅读手册</h2><h3 id="man命令"><a href="#man命令" class="headerlink" title="man命令"></a>man命令</h3><p>例如<code>man ls</code>，会出现ls命令的使用说明。手册的各部分区域说明：</p><p><strong>NAME</strong></p><p>命令的全称</p><p><strong>SYNOPSIS</strong></p><p>概要，使用此命令的方法</p><p><code>ls [OPTION]... [FILE]...</code></p><img src="Linux文本编辑器及软件安装/image-20210110233353458.png" alt="image-20210110233353458" style="zoom:50%;" /><p>粗体：原封不动输入</p><p>下划线：用实际内容替代</p><p><code>[-hvc]</code>中括号内为可选参数</p><p><code>a|b</code>输入a或b选项</p><p>OPTION参数，省略号表示可输入多个参数</p><p><strong>DESCRIPTION</strong></p><p>列出所有参数和用法</p><p>其他区域：<strong>AUTHOR</strong>, <strong>REPROTIONG BUGS</strong>, <strong>COPYRIGHT</strong>, <strong>SEE ALSO</strong></p><h3 id="apropos查找命令"><a href="#apropos查找命令" class="headerlink" title="apropos查找命令"></a>apropos查找命令</h3><p>apropos命令后面添加关键字即可（根据手册中的关键字）</p><p>例如需要查找控制音量的方法 <code>apropos sound</code></p><img src="Linux文本编辑器及软件安装/image-20210111005834669.png" alt="image-20210111005834669" style="zoom:67%;" /><h3 id="其他查阅手册的方法"><a href="#其他查阅手册的方法" class="headerlink" title="其他查阅手册的方法"></a>其他查阅手册的方法</h3><p><strong>很多命令都支持<code>-h</code>参数</strong></p><p>比man命令的内容稍显简便</p><p><strong>whatis命令</strong></p><p>man的精简版，显示man的NAME区域</p><h3 id="文件查找命令"><a href="#文件查找命令" class="headerlink" title="文件查找命令"></a>文件查找命令</h3><h4 id="locate命令"><a href="#locate命令" class="headerlink" title="locate命令"></a>locate命令</h4><p><font color='red'>查找速度极快，查找包含关键字的文件。</font></p><p><code>locate xxx</code>会查找并列出xxx（目录或文件名包含xxx）所在的所有目录</p><p>缺陷：如果是刚新建的文件locate是查不到的，因为locate不是查找硬盘，是在数据库（包含文件的列表和文件的位置）中查找记录。对于刚创建的文件，没有更新进数据库（一般24小时自动更新）</p><p>当然也可以用updatedb命令强制系统立即更新数据库 <code>sudo updatedb</code></p><h4 id="find命令深入查找"><a href="#find命令深入查找" class="headerlink" title="find命令深入查找"></a>find命令深入查找</h4><font color='red'>遍历实际的硬盘的文件，还可以对查找的文件进行操作。查找文件要完全对应关键字，但是可以用正则匹配功能强大</font><p>find 默认当前子目录查找，也可以指定目录查找；用文件名、创建时间等查找；最后可以对找到的文件进行操作</p><p>例如：<code>find -name &#39;new_file&#39;</code>根据名字查找当前目录的文件 ; <code>find /var/log -name &#39;syslog&#39;</code>查找其他目录的文件； </p><p><strong>根据文件大小查找</strong></p><p><code>find /var -size +10M</code>查找/var目录下大于10m的文件</p><p><strong>根据文件的最近访问时间查找</strong></p><p><code>find -name &#39;*.txt&#39; -atime -7</code>查找7天内访问的txt文件</p><p><strong>仅查找目录或文件</strong></p><p><code>find -name &#39;file1&#39; -type d</code>查找名为file1的目录</p><p><strong>操作查找结果</strong></p><p>格式化输出：<code>find -name &#39;file1&#39; -printf &#39;%p - %u\n&#39;</code>将查找到的文件格式化输出为<code>文件名 - 用户名</code>的形式</p><p>删除操作：<code>xxx -delete</code></p><p>调用其他命令：</p><p>加上<code>-exec</code>参数之后就可以接其他命令了，十分强大</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/var目录下的所有txt文件修改权限为600</span></span><br><span class="line">find /var -name <span class="string">&#x27;*.txt&#x27;</span> -<span class="built_in">exec</span> chmod 600 &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>大括号表示刚查找到的文件，<code>\;</code>是exec的结尾</p><p>将<code>-exec</code>参数换成<code>-ok</code>参数效果一样，但是会对每个文件都做确认提示！</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> Terminal </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Nano </tag>
            
            <tag> RTFM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络5之实践网络分析异步任务（更新中</title>
      <link href="/2020/12/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C5/"/>
      <url>/2020/12/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C5/</url>
      
        <content type="html"><![CDATA[<p>内容安排</p><div class="mermaid">graph LR;a[搭建服务基本框架]--&gt;b[Python操作字节序列]b--&gt;c[实现IP报文解析器]c--&gt;d[实现UDP报文解析器]d--&gt;e[实现TCP报文解析器]</div><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C5/image-20210102231245869.png" alt="image-20210102231245869"></p><h2 id="搭建服务基本框架"><a href="#搭建服务基本框架" class="headerlink" title="搭建服务基本框架"></a>搭建服务基本框架</h2><p>网卡工作的两种模式：</p><table><thead><tr><th>混杂模式</th><th>非混杂模式</th></tr></thead><tbody><tr><td>接受所有经过网卡设备的数据</td><td>只接受目的地址指向自己的数据</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 实战 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络4应用层</title>
      <link href="/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2020/12/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>应用层位于TCP/IP四层模型的最上面，对应七层模型的应用层、表示层会话层。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201229150405939.png" alt="image-20201229150405939"></p><h2 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h2><p>传输层给及以下的层提供了完整的通信服务，应用层主要是面向用户的一层。</p><p>应用层的一些协议：</p><table><thead><tr><th>FTP</th><th>HTTP</th><th>HTTPS</th><th>DNS</th><th>TELNET</th></tr></thead><tbody><tr><td>21</td><td>80</td><td>443</td><td>53</td><td>23</td></tr></tbody></table><p>应用层内容包括以后的应用层软件和面向传输层的编程</p><p>传输层TCP\UDP协议的使用场景：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201229151054596.png" alt="image-20201229151054596"></p><p>应用层主要功能是定义应用间通信的规则，比如应用进程的报文类型（请求报文、应答报文）；报文的语法和格式；应用进程发送数据的时机、规则</p><h2 id="DNS详解"><a href="#DNS详解" class="headerlink" title="DNS详解"></a>DNS详解</h2><p>DNS(Domain Name System: 域名系统)</p><p>首先我们是通过<code>ip地址:端口</code>来指定某个网络服务（web服务、网络存储、远程调用等等），而DNS就是方便记录各项网络服务地址的。</p><p>使用域名帮助记忆。将域名解析为IP地址。</p><ul><li>域名由点、字母和数字组成</li><li>点分割不同的域</li><li>域名可以分为顶级域、二级域、三级域</li></ul><p>例如<code>www.rice-and-bran.site</code>，site就是顶级域，rice-and-bran是二级域，www是三级域。</p><div class="mermaid">graph LR;    A{顶级域}--&gt;B{国家}    A--&gt;C{通用}    B--&gt;D[cn]    B--&gt;E[us]    C--&gt;F[com]    C--&gt;G[net]    C--&gt;H[gov]</div><p>当访问一个域名的时候，首先会访问本地域名服务器，若没有则访问根域名服务器，再访问顶级域名服务器，一步步向下。</p><h2 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h2><p>DHCP(Dynamic Host Configuration Protocol: 动态主机设置协议)，是一个局域网协议，应用UDP协议的应用层协议。</p><p>比如电脑中的TCP/IP协议设置中，默认选择自动获取IP地址，就是通过DHCP协议自动获得局域网分配的ip，（非永久，有租期的一个概念）</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201230233537304.png" alt="image-20201230233537304"></p><p>当设备要接入局域网，DHCP协议工作过程：</p><ul><li>DHCP服务器监听默认端口：67</li><li>主机使用UDP协议广播DHCP发现报文</li><li>DHCP服务器发出DHCP提供报文</li><li>主机向DHCP服务器发出DHCP请求报文</li><li>DHCP服务器回应并提供IP地址</li></ul><p>之后如果设备还要与外网通信，则需要通过NAT技术转换公网IP进行通信</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP(HyperText Transfer Protocol: 超文本传输协议)，是可靠的数据传输协议</p><p><code>http(s)://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code></p><p>http一般使用80端口，https一般使用443端口</p><p>web服务器应答过程: </p><div class="mermaid">graph LR;a[接收客户端连接]--&gt;b[接收请求报文]b--&gt;c[处理请求]c--&gt;d[访问web资源]d--&gt;e[构造应答]e--&gt;f[发送应答]</div><table><thead><tr><th>HTTP请求方法</th><th>作用</th></tr></thead><tbody><tr><td>GET</td><td>获取指定的服务端资源/提交数据</td></tr><tr><td>POST</td><td>提交数据到服务端</td></tr><tr><td>DELETE</td><td>删除指定的服务端资源</td></tr><tr><td>UPDATE</td><td>更新指定的服务端资源</td></tr><tr><td>PUT</td><td></td></tr><tr><td>OPTIONS</td><td></td></tr><tr><td>PATCH</td><td></td></tr><tr><td>HEAD</td><td></td></tr><tr><td>TRACE</td><td></td></tr></tbody></table><ol><li>在地址中指定资源：</li></ol><p><code>xxx/111.html</code>, <code>xxx/?a=1&amp;b=1</code></p><ol start="2"><li>在请求中指定资源：</li></ol><p>请求报文和应答报文的组成：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201230235508131.png" alt="image-20201230235508131"></p><p>例如通过POST请求来指定资源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST https://www.rice-and-bran.com HTTP/1.1</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;sort&quot;:0,</span><br><span class="line">&quot;unlearn&quot;:0,</span><br><span class="line">&quot;page&quot;:2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到请求后，web服务器返回应答报文，包含状态码，具体有这些类型：</p><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>200~299</td><td>成功状态码</td></tr><tr><td>300~399</td><td>重定向状态码</td></tr><tr><td>400~499</td><td>客户端错误状态码</td></tr><tr><td>500~599</td><td>服务端错误状态码</td></tr></tbody></table><h2 id="HTTP工作的结构"><a href="#HTTP工作的结构" class="headerlink" title="HTTP工作的结构"></a>HTTP工作的结构</h2><h3 id="web缓存"><a href="#web缓存" class="headerlink" title="web缓存"></a>web缓存</h3><p>优先把热门数据缓存起来</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231000807836.png" alt="image-20201231000807836"></p><h3 id="web代理"><a href="#web代理" class="headerlink" title="web代理"></a>web代理</h3><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231001012582.png" alt="image-20201231001012582"></p><p>作用：1.屏蔽server部署的结构，不给用户直接看到；2.保证server的安全，比如在proxy中设置防火墙</p><p><strong>正向代理</strong>：代表client去访问server；<strong>反向代理</strong>：代表server把数据返回给客户端</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>CDN(Content Delivery Network: 内容分发网络)，为了进行多媒体内容的加速</p><p>在距离用户近的地方部署cdn服务器备份多媒体内容，使用户更快的收到内容，改善用户获取多媒体内容的体验。</p><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>例如搜索引擎的爬虫，爬取信息，建立索引。但是不好的爬虫会增加网络拥塞，损耗服务器资源</p><h2 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h2><p>HTTP是明文传输的，但是对于一些敏感信息传输。https协议会对传输内容进行加密，https为443端口</p><h3 id="加密模型"><a href="#加密模型" class="headerlink" title="加密模型"></a>加密模型</h3><p>对称加密：加密解密密钥统一；非对称加密则不一致</p><p>假设加密密钥为A，解密密钥为B；AB是拥有一定数学关系的一组密钥。</p><p>通过<strong>公钥</strong>（公开）进行加密，<strong>私钥</strong>（非公开，用户使用）进行解密</p><h3 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h3><p>数字证书是可信任组织颁发给特定对象的认证</p><p>数字证书的内容：证书格式、版本号；证书序列号；有效期；对象名称；<font color='red'>对象公开密钥</font>…</p><p><strong>SSL</strong>(Secure Sockets Layer: 安全套接层)，是介入传输层和应用层之间，保证数据安全和数据完整，对传输层数据进行加密后传输</p><p>https协议加密过程：</p><p><em>E：encode，D：decode</em></p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231003216484.png" alt="image-20201231003216484"></p><p>SSL安全参数握手过程: </p><p>1，2：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231003549226.png" alt="image-20201231003549226"></p><p>3：客户端收到服务端的加密算法、数字证书以及随机数后。需要</p><ul><li>确认证书是否有效</li><li>生成随机数3</li><li>使用服务器公钥加密随机数3</li></ul><p>4：发送加密后的数据给服务器</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C4%E5%BA%94%E7%94%A8%E5%B1%82/image-20201231003818999.png" alt="image-20201231003818999"></p><p>然后服务器解密随机数3，两边都拥有了三个随机数</p><p>5：两边根据随机数1,2,3和相同的算法生成<font color='red'>对称密钥</font>，双方使用对称密钥进行加密通信</p><p>ssl参数握手过程的特点：</p><ul><li>综合使用对称加密和非对称加密</li><li>双方分别生成秘钥，没有经过传输过程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红会急救培训笔记</title>
      <link href="/2020/12/28/First-Aid-Elementary-Course/"/>
      <url>/2020/12/28/First-Aid-Elementary-Course/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>半个月前我报名了北京红会的16学时急救课程，27，28号两天是培训时间，地点是在门头沟区的心田培训中心。主要学习内容是CPR（心肺复苏）、AED的使用、常见疾病处置、创伤处理等。对我来说是一次很有收获的体验，开这篇文章记录一下参加课程的笔记、心得。</p><img src="First-Aid-Elementary-Course/11c0950fb47eebdb.jpeg" alt="11c0950fb47eebdb" style="zoom:67%;" /><p><strong>红十字会起源</strong>：亨利杜南目睹索尔费里诺战役后，成立伤兵救护委员会，后演变为日内瓦公约</p><h2 id="day1-徒手心肺复苏"><a href="#day1-徒手心肺复苏" class="headerlink" title="day1 徒手心肺复苏"></a>day1 徒手心肺复苏</h2><p>抢救生命的绿色通道“生存链”</p><div class="mermaid">graph LR;A[应急反应系统识别和启动]--&gt;B[高质量心肺复苏]B--&gt;C[快速除颤]C--&gt;D[基础及高级急救医疗服务]D--&gt;E[高级生命维护和骤停后护理]</div><p>救护员课程重点学习心肺复苏和除颤</p><p><strong>猝死</strong>：平素身体健康或貌似健康的患者，在出乎意料的短时间内，因自然疾病而突然死亡即为猝死。对于死亡时间，世卫组织定义从发病到死亡6小时内，一般认为1小时内死亡者多为心源性猝死。</p><p><strong>心肺复苏</strong>：指救护员在现场为心脏骤停患者实施胸外按压和人工呼吸。</p><p>我国每年有约54万人死于心脏猝死，如果经过有效的心肺复苏，部分患者可存活。</p><p>黄金四分钟：</p><p><img src="First-Aid-Elementary-Course/image-20201229005456937.png" alt="image-20201229005456937"></p><p>判断+救治步骤：</p><ol><li><p>环境安全，做好防护。</p></li><li><p>轻拍患者双肩，呼喊（“先生先生，您怎么了？”），确认有无意识。解开衣服，仔细观察呼吸（1001-1007），确认有无呼吸（或仅仅是喘息）</p></li><li><p>无呼吸无意识，大声呼叫，让人帮忙拨打120，取AED。表明救护员身份并寻求援助。</p></li><li><p>立即进入<strong>心肺复苏</strong>程序，C-A-B。（如果是溺水则是A-B-C，要先保持气道畅通）</p><p><img src="First-Aid-Elementary-Course/image-20201229005703564.png" alt="image-20201229005703564"></p><blockquote><p>心肺复苏CAB分别代表:1.C: circulation循环，即要求胸外按压，保证心脏射血，体内血液循环。2.A: airway气道，即要求保持气道通畅，要注意清理口腔呕吐物，采取仰颌抬颏法使呼吸顺畅。3.B: breathing呼吸，即口对口人工呼吸，每一次吹气要看到胸廓有起伏，但也不要用力过猛。保证氧气输送到肺组织。</p></blockquote><p>心肺复苏注意事项：</p><ul><li><p>按压位置位于两乳头连线中点的胸骨处，双手十指相扣，掌根对着胸骨，手臂不弯曲，使用上半身力量，髋关节为轴。</p></li><li><p>按压深度约5-6cm（一般胸骨到背部厚度三分之一）</p></li><li><p>每分钟100~120次</p><p><img src="First-Aid-Elementary-Course/image-20201229005818116.png" alt="image-20201229005818116"></p></li><li><p>按压时时刻注意患者头部，有反应则停止并判断情况。</p></li><li><p>医生没到/病人没醒按压不能停！！！！ （人工呼吸、使用AED除外）</p></li><li><p>人工呼吸前检查气道，口腔无异物，仰额抬颏法。嘴包嘴吹气，持续1秒</p><p><img src="First-Aid-Elementary-Course/image-20201229005855463.png" alt="image-20201229005855463"></p></li><li><p>吹压比/吹气比：<strong>30：2</strong>（30次按压，两次人工呼吸）。<font color='red'>持续五个周期的30：2的心肺复苏</font>，再检查患者反应和呼吸（脖子动脉）</p></li></ul></li><li><p>AED抵达后，立即开机，将电极贴对应身体裸露位置，右边锁骨下面，一处左边乳房下面。前胸后背也可以。</p></li><li><p>按照AED提示除颤，随后根据自己节奏30：2心肺复苏。</p></li><li><p>呼吸心跳恢复后，调整侧卧位</p></li></ol><p><img src="First-Aid-Elementary-Course/watermark,image_d2F0ZXIvYmFpa2U5Mg==,g_7,xp_5,yp_5" alt="img"></p><p>心肺复苏成功的标志：恢复自主心跳自主呼吸及意识</p><p>可参考表现：眼球活动、睫毛放射、四肢活动；瞳孔扩大逐渐缩回变小；有知觉、反应、脸色转红等</p><blockquote><p>自动体外除颤器又称自动体外电击器、自动电击器、自动除颤器、心脏除颤器及傻瓜电击器等，是一种便携式的医疗设备，它可以诊断特定的心率失常，并且给予电击<a href="https://baike.baidu.com/item/%E9%99%A4%E9%A2%A4/3310526">除颤</a>，是可被非专业人员使用的用于抢救心脏骤停患者的医疗设备。在心跳骤停时，只有在最佳抢救时间的“黄金4分钟”内，利用自动体外除颤器（AED）对患者进行除颤和心肺复苏，才是最有效制止猝死的办法。</p></blockquote><p><strong>异物阻塞处置</strong>：</p><p>腹部冲击法（海姆立克法）冲击患者腹部，使横膈肌急速提升，呼吸道压力骤升，异物排出。（极端场景才使用，因为可能造成脏器损伤，一般拍拍背就行）</p><img src="First-Aid-Elementary-Course/image-20201229010943066.png" alt="image-20201229010943066" style="zoom:50%;" /><p>问题及其他病情处置：</p><ol><li>隔着薄衣服可以做心肺复苏吗？可以，但要保证按压高质量。</li><li>有呼吸无意识怎么处置？恢复安全体位即可</li><li>癫痫发作怎么处置？腾出空间，让其自我恢复，不做处理</li><li>患者倒地后判断呼吸要通过身体起伏而不是脉搏？1）脉搏非专业人士判断不准 2）判断呼吸没有，心跳一定是停止的，因为心跳停止后呼吸才停。</li></ol><h2 id="day2-创伤现场救治"><a href="#day2-创伤现场救治" class="headerlink" title="day2 创伤现场救治"></a>day2 创伤现场救治</h2><p><img src="First-Aid-Elementary-Course/image-20201229014414580.png" alt="image-20201229014414580"></p><p>流血包扎原则：</p><ul><li><p>包扎前上敷料，从远心端–&gt;近心端（毒蛇咬伤则相反）包扎。手臂包扎使用螺旋包扎法，手背手心使用八字包扎法，关节包扎使用人字形包。胸部、腹部用三角巾包扎。</p><p><em>图为胸部包扎处理</em></p><p><img src="First-Aid-Elementary-Course/image-20201229014508145.png" alt="image-20201229014508145"></p></li><li><p>包扎结束再外侧（大拇指那边一侧）</p></li><li><p>包扎时候绷带朝上拿</p></li><li><p>包扎完检查末端血液循环（比如按压指尖）</p></li><li><p>使用三角巾悬挂</p></li></ul><p>骨折处理：</p><ul><li>伤侧房足够的软垫、如果是开放骨折不能清理，只制动不复位</li><li>使用三角巾悬挂</li><li>加制动带</li></ul><p>三角巾悬挂原则：</p><p>如果是上臂、前臂受伤使用大悬臂带，如果是肢末端（手，锁骨）使用三角叫悬臂带</p><p><em>图为大悬臂带</em></p><p><img src="First-Aid-Elementary-Course/image-20201229014614803.png" alt="image-20201229014614803"></p><p>具体其他的包扎 悬挂方法建议看视频复习巩固。细节不好文字描述。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这两天真的有点高强度，尤其基地位于门头沟，往返三小时多，回宿舍就累趴了。（ps：第一次做门头沟S1线，培训小伙伴告知我是磁悬浮的，怪不得很舒适平稳。沿途景色不错）</p><p>笔记到这里就结束了，这次课程收获满满，确实学到了很多急救的干货，最重要的是当家人朋友出现紧急状况就知道该怎么做了。如果路遇紧急情况我应该也能尽一份力。</p><p>感谢红会的老师们，真的很耐心很温暖很细心！！！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPR </tag>
            
            <tag> AED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux1基本命令(Ubuntu)</title>
      <link href="/2020/12/16/linux-go1/"/>
      <url>/2020/12/16/linux-go1/</url>
      
        <content type="html"><![CDATA[<h2 id="终端的基本操作"><a href="#终端的基本操作" class="headerlink" title="终端的基本操作"></a>终端的基本操作</h2><p>什么是TTY?</p><blockquote><p>在Linux中，TTY也许是跟终端有关系的最为混乱的术语。TTY是TeleTYpe的一个老缩写。Teletypes，或者teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的东西，和古老的电报机区别并不是很大。之后，当计算机只能以批处理方式运行时（当时穿孔卡片阅读器是唯一一种使程序载入运行的方式），电传打字机成为唯一能够被使用的“实时”输入/输出设备。最终，电传打字机被键盘和显示器终端所取代。</p><p>在Linux 系统中，计算机显示器通常被称为控制台终端(Console）。它仿真了类型为Linux的一种终端(TERM=Linux），并且有一些设备特殊文件与之相关联：tty0、tty1、tty2 等。当你在控制台上登录时，使用的是tty1。使用Alt+[F1—F6]组合键时，我们就可以切换到tty2、tty3等上面去。tty1–tty6等称为虚拟终端，而tty0则是当前所使用虚拟终端的一个别名，系统所产生的信息会发送到该终端上（这时也叫控制台终端）。因此不管当前正在使用哪个虚拟终端，系统信息都会发送到控制台终端上。/dev/console即控制台，是与操作系统交互的设备，系统将一些信息直接输出到控制台上。只有在单用户模式下，才允许用户登录控制台。</p></blockquote><p><code>ctrl+alt+f1</code>：回到图形界面</p><p><code>ctrl+alt+f2</code>：对应终端2(tty2)，f3-f6分别对应tty3-tty6</p><p>但是我们一般常用图形模式的终端。调用方式<code>Ctrl+Alt+T</code></p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>打开终端后会自动出现命令行提示符</p><p>比如<code>scheelite@scheelte-VirtualBox:~$</code></p><p><code>scheelite</code>是当前用户的名字，Linux是多用户的操作系统，@后面是主机名，：是分隔符，~是当前所在目录的名字，$指示用户拥有的权限，表示普通用户，如果是#怎是root用户</p><p>使用<code>sudo su</code>切换root用户，切换后显示<code>root@scheelte-VirtualBox:/home/scheelite#</code></p><p>使用<code>whoami</code>命令可以获知当前用户名，<code>hostname</code>获知主机名</p><h3 id="基本命令使用"><a href="#基本命令使用" class="headerlink" title="基本命令使用"></a>基本命令使用</h3><p><code>date</code>显示当前时间，<code>ls</code>显示当前所有的目录</p><p>参数是写在命令之后的一些补充选项，空格隔开。</p><p><strong>短参数</strong>：短横线后面加一个字母，可以一次性加多个短参数，也可以合并写。参数的值 <code>-p 10</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command -p -a -T -c</span><br><span class="line">command -paTC</span><br><span class="line"></span><br><span class="line">显示所有文件（包括隐藏文件）</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure><p><strong>长参数</strong>：以两个短横线开始，只能以空格隔开。参数的值<code>--parameter=10</code></p><p>可以长短参数结合使用</p><p><strong>其他参数</strong>：没有绝对的准则。例如ls命令 后面带了一个参数的话，这是一个目录的路径名的话，那么就会列出此目录下的文件，例如 <code>ls Code</code></p><p>Tab键可以补全命令/路径，敲两下tab键。</p><h3 id="命令行快捷键"><a href="#命令行快捷键" class="headerlink" title="命令行快捷键"></a>命令行快捷键</h3><p>上下键切换历史命令</p><p><code>ctrl+r</code>查找使用过的命令；</p><p><code>history</code>显示所有输入的命令；</p><p><code>ctrl+l</code>清屏；</p><p><code>ctrl+d</code>给终端传递EOF（文件结束符）；</p><p><code>shift+PgUp</code>用于向上滚屏</p><p><code>ctrl+a</code>/<code>home </code>     <code>ctrl+e</code>/<code>end</code>光标跳到一行命令的开始/结尾</p><p><code>ctrl+u</code>/<code>ctrl+k</code>删除光标左侧/右侧的命令</p><p><code>ctrl+w</code>删除光标左侧的一个“单词”（空格隔开的一部分）</p><p><code>ctrl+y</code>用于粘贴上面u/k/w删除的字符串</p><h2 id="Linux下的文件操作"><a href="#Linux下的文件操作" class="headerlink" title="Linux下的文件操作"></a>Linux下的文件操作</h2><h3 id="Linux下文件目录组织形式"><a href="#Linux下文件目录组织形式" class="headerlink" title="Linux下文件目录组织形式"></a>Linux下文件目录组织形式</h3><ul><li>在Linux中<font color='red'>一切都是文件</font>，不像windows分为文件和非文件，甚至连目录也是文件</li><li>Linux中只有一个根目录就是<code>/</code>，最顶级的目录，不同于windows很多个盘：<code>C:\</code>等</li><li>windows中用反斜杠表明目录层级和包含关系，而Linux中用<code>/</code>来表示，例如：<code>/usr/bin</code></li><li>一般在Linux命令目录时尽量不使用空格或其他特殊符号，尽量用小写字母</li><li>linux中以点开头的文件是隐藏文件。但是<code>.</code>（一个点）表示当前目录，<code>..</code>（两个点）表示上一级目录</li></ul><p>/bin：包含用户可执行的二进制文件；/boot: 包含linux启动密切相关的文件；/etc：系统配置文件；/home: 用户私人目录；/lib：包含被程序调用的库文件，<code>.os</code>结尾，类似于win的dll；/media: 访问外设（usb等）内容；/mnt：临时挂载一些装置；/opt：用于安装第三方软件；/root：超级用户目录；/sbin系统级重要可执行文件；/usr：安装大部分用户需要调用的程序 ….；/var：程序日志文件</p><p><code>pwd</code>命令 获知当前目录</p><p><code>which</code>命令获取命令的可执行文件的位置，参数为命令，如<code>which pwd</code>获取pwd命令可执行文件的位置。</p><h3 id="ls、cd、du命令"><a href="#ls、cd、du命令" class="headerlink" title="ls、cd、du命令"></a>ls、cd、du命令</h3><p>不带参数列出非隐藏文件，-a参数列出所有文件，-A列出不带<code>.</code>和<code>..</code>的目录，</p><p>-l参数列出文件详细信息, <code>total xx</code> 表示当前目录的总字节数（k）</p><p><img src="linux-go1/image-20201231122820898.png" alt="image-20201231122820898"></p><p>里面每一行的内容分别代表：文件权限、链接数目、文件所有者、文件所在的群组、文件大小（仅指目录文件的大小）、文件修改时间、名称</p><p>可以很多参数合并一起使用如<code>ls -ltah</code>显示所有文件详情</p><h4 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h4><p>change directory 切换路径</p><p><code>cd ~</code>或直接<code>cd</code>会到直接回到家目录</p><h4 id="du命令"><a href="#du命令" class="headerlink" title="du命令"></a>du命令</h4><p>disk usage, du可以让我们直到文件和目录所占的空间大小；相比<code>ls -l</code>命令，du命令统计的才是真正的文件大小</p><p><code>-h</code>便于阅读模式，<code>-a</code>显示所有目录、文件的大小，<code>-s</code>直接出现总大小</p><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>syslog文件位于<code>/var/log</code>这个目录中，记录了电脑的所有事情的日志。</p><h4 id="cat和less命令"><a href="#cat和less命令" class="headerlink" title="cat和less命令"></a>cat和less命令</h4><p>cat命令和less命令：显示文件内容，不能对内容进行修改。</p><p>cat一次性在终端显示文件所有内容，加上想要显示的文件路径即可：<code>cat syslog</code>，中间加上<code>-n</code>参数显示行号。适合显示小文件</p><p>less命令分页显示文件内容。空格键翻页显示，<code>↓</code>/<code>enter</code>显示下一行，<code>d</code>前进半个屏幕，<code>b</code>向上一页，<code>y</code>/<code>↑</code>显示到上一行，<code>=</code>等号显示你在当前文件中的位置，h键进入使用手册，<code>/</code>进入搜索模式（按n键在结果中跳转，shift+n往上跳转），</p><h4 id="head和tail命令"><a href="#head和tail命令" class="headerlink" title="head和tail命令"></a>head和tail命令</h4><p>显示文件开头和结尾几行。</p><p>可以加上参数<code>tail -n 5 syslog</code>显示末尾五行，</p><p>配合<code>-f</code>参数可实时追踪文件的更新。</p><p><code>tail -f syslog</code>实时观察syslog文件的增加内容，默认一秒检查是否有更新，也可指定间隔参数，比如<code>tail -f -s 4 syslog</code>设置为4秒</p><h4 id="文件创建"><a href="#文件创建" class="headerlink" title="文件创建"></a>文件创建</h4><p>touch命令直接更跟路径，创建空白文件</p><p>mkdir创建新文件夹，可以用<code>-p</code>来递归创建目录结构：<code>mkdir -p one/two/three</code></p><h4 id="拷贝、移动文件或目录"><a href="#拷贝、移动文件或目录" class="headerlink" title="拷贝、移动文件或目录"></a>拷贝、移动文件或目录</h4><p>cp命令拷贝，<code>cp file file_copy</code>拷贝file_copy文件，可以换为目录名就可以复制到那里去并改名</p><p>拷贝目录需要在cp命令之后加上<code>-r</code>或者<code>-R</code>参数，目录中所有内容被拷贝</p><p><strong>使用通配符*</strong></p><p>用于代替任何字符，和正则一样。<code>cp *.txt folder</code>把当前目录下的所有txt文件拷贝到folder目录中取</p><p>mv命令移动，使用类似cp，但是移动目录不需要添加额外的参数，和移动文件一样，同样也可以使用通配符。</p><p>mv命令还可以重命名，使用方法一样。</p><h4 id="删除文件和目录"><a href="#删除文件和目录" class="headerlink" title="删除文件和目录"></a>删除文件和目录</h4><p>rm命令用于删除文件和目录，但是不可撤销。直接加文件名</p><p>加上<code>-i</code>参数会询问是否需要删除，<code>-r</code>参数递归（recursive）删除，删除目录</p><h3 id="文件中的软链接和硬链接"><a href="#文件中的软链接和硬链接" class="headerlink" title="文件中的软链接和硬链接"></a>文件中的软链接和硬链接</h3><p>ln命令用于在文件之间创建链接。</p><p>Linux下有两种链接类型：软链接（Symbolic link）和硬链接（Physical link）。Linux文件有三部分：文件名、权限和文件内容。</p><p><strong>Linux文件存储</strong>：每个文件的文件内容被分配到一个inode，因此每个文件名都绑定到它的文件内容（用inode标识）</p><p><strong>硬链接原理</strong>：使链接的两个文件共享同样的文件内容，就是同样的inode。如果两个文件之间有了硬链接，修改文件修改的是同一块内容。硬链接一般只能创建指向文件的硬链接，而<strong>软连接</strong>可以指向文件和目录。</p><p><code>ln file1 file2</code>这个命令创建了一个file1的硬链接file2。</p><p><em>此时如果通过<code>ls -i</code>来查看文件相关的inode信息，会发现二者指向了同一个inode</em></p><p>对于硬链接来说，删除任意一方文件，共同指向的文件内容并不会从硬盘上被删除，只有同时删除，该inode才会被删除。</p><p><img src="linux-go1/image-20210102142105447.png" alt="image-20210102142105447"></p><p>第一列是inode信息，第三列中数字为2，对于文件来说指的是有相同inode号的文件数。（对于目录，指的是目录下的文件数）</p><p><strong>软链接</strong>类似与windows下的快捷方式。创建软链接需要带上<code>-s</code>参数</p><p><em>图示创建了file3软链接，链接到file1</em></p><p><img src="linux-go1/image-20210102142711614.png" alt="image-20210102142711614"></p><p>如果删掉了file1，file2就会失效。</p><h2 id="Linux下的权限管理"><a href="#Linux下的权限管理" class="headerlink" title="Linux下的权限管理"></a>Linux下的权限管理</h2><p>在Ubuntu系统中可以用sudo(Substitute User DO)命令暂时成为root超级用户。</p><p><code>sudo su</code>切换超级用户，输入exit推出也可以<code>sudo</code>后面直接接待执行命令</p><p><code>adduser username</code>命令添加用户</p><p><code>passwd username</code>命令修改用户密码</p><p><code>deluser username</code>命令删除用户，直接删除，谨慎使用！</p><h3 id="用户群组管理"><a href="#用户群组管理" class="headerlink" title="用户群组管理"></a>用户群组管理</h3><p>如果不设置群组的话，默认是创建一个和用户名一样的群组。当群组多的时候则需要进行管理。</p><p><code>addgroup groupname</code>命令添加新的群组；<code>usermod</code>命令，<code>-l</code>参数可以用于修改用户名，<code>-g</code>参数可用来修改用户的群组：<code>usermod -g groupname username</code></p><p><code>groups username</code>查看用户的所在群组<br><em>添加用户到多个群组<br><code>usermod -G group1,group2,group3 username</code>，<code>-aG</code>参数可以追加而不是移动到这些群组</em></p><p><code>delgroup groupname</code>删除群组</p><h3 id="文件权限设置"><a href="#文件权限设置" class="headerlink" title="文件权限设置"></a>文件权限设置</h3><p><code>chown newuser file</code>命令改变文件所有者，但是文件所属群组依旧不变</p><p><code>chgrp newgroup file</code>命令改变群组，或者<code>chown username:groupname file</code>也可以同时改变群组和所有者</p><p><code>chown</code>的<code>-R</code>参数递归设置子目录和子文件，配合上面的方法使用</p><h4 id="修改访问权限"><a href="#修改访问权限" class="headerlink" title="修改访问权限"></a>修改访问权限</h4><p><strong>权限的原理</strong>：Linux系统中，每个文件和目录都有一系列权限属性，在<code>ls -l</code>运行的第一列信息就是访问权限符。</p><p>第一个字符中：<code>-</code>表示普通文件；<code>d</code>表示目录；<code>l</code>表示软链接文件</p><img src="linux-go1/image-20210102152128235.png" alt="image-20210102152128235" style="zoom:50%;" /><p>后面的字符中，<code>r</code>可读，<code>w</code>可写，<code>x</code>可执行/可读（对于目录），如果相应位置有字母，表示有相应的权限，短横<code>-</code>表示没有相应权限</p><p><img src="linux-go1/image-20210102152505598.png" alt="image-20210102152505598"></p><p>例如file1这个文件<code>-</code>表示普通文件，<code>rw-</code>在sheelite用户下，可读可写，非可执行文件，第二个<code>rw-</code>scheelite群组其他用户也可读可写，不可执行，<code>r--</code>其他用户只能读该文件</p><h4 id="chmod命令改变文件的访问权限"><a href="#chmod命令改变文件的访问权限" class="headerlink" title="chmod命令改变文件的访问权限"></a>chmod命令改变文件的访问权限</h4><p>Linux系统对每种权限（r、w和x）分配了对应的数字</p><table><thead><tr><th>权限</th><th>数字</th></tr></thead><tbody><tr><td>r</td><td>4</td></tr><tr><td>w</td><td>2</td></tr><tr><td>x</td><td>1</td></tr></tbody></table><p>要合并这些权限，就需要简单的数字相加；比如6表示有读和写的权限</p><img src="linux-go1/113366367897643514.jpg" alt="113366367897643514" style="zoom:33%;" /><p>用三组数字来表示这些权限，例如640：</p><ul><li>6 文件所有者有读写权限</li><li>4 文件所在群组其他用户具有读的权限</li><li>0 除此之外其他用户没有任何权限</li></ul><p><code>chmod 640 file1</code>修改文件权限：</p><p><img src="linux-go1/image-20210102153745678.png" alt="image-20210102153745678"></p><p><strong>用字母划分权限</strong></p><p><code>chmod u+rx file1</code>对文件的所有者增加读和运行的权限</p><p><code>chmod g+r o-r file</code>文件file的群组其他用户增加读的权限，其他用户移除读的权限</p><p>配合<code>-R</code>参数可以递归修改目录及其中的文件</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> Terminal </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法1查找与排序</title>
      <link href="/2020/11/08/%E7%AE%97%E6%B3%951/"/>
      <url>/2020/11/08/%E7%AE%97%E6%B3%951/</url>
      
        <content type="html"><![CDATA[<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p><strong>判断时间复杂度</strong><br>时间复杂度判断占用时间<br>快速判断算法复杂度：</p><ol><li>   确定问题规模n</li><li>   循环减半过程 –&gt; logn</li><li>   K层关于n的循环 —&gt;n<sup>k</sup><br>复杂情况：根据算法执行过程判断</li></ol><p><strong>判断空间复杂度</strong><br>评估算法内存占用大小的式子，表达方式与时间复杂度完全一样</p><ol><li>   算法使用了几个变量：O(1)</li><li>   算法使用了长度为n的一维列表：O(n)</li><li>   算法使用了m行n列的二维列表：O(mn)<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2>递归的两个特点：1.调用自身；2.结束条件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">func1(x-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">func2(x+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">func3(x-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span>(<span class="params">x</span>):</span></span><br><span class="line"><span class="keyword">if</span> x&gt;<span class="number">0</span>:</span><br><span class="line">func4(x-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>所以func3和func4是递归，x为正整数，func3会连续输出x到1，func4会输出1 到x<h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h2>把盘子从a移动到c</li></ol><p><img src="%E7%AE%97%E6%B3%951/image-20201108012255921.png" alt="image-20201108012255921"></p><p>这样思考过后，就把问题规模由n变成了n-1，这就是一种递归的思想。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">n,a,b,c</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        hanota问题。</span></span><br><span class="line"><span class="string">        n: 盘子数</span></span><br><span class="line"><span class="string">        a: 初始位置</span></span><br><span class="line"><span class="string">        b: 中转位置</span></span><br><span class="line"><span class="string">        c: 目标位置</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n &gt;<span class="number">0</span>:</span><br><span class="line">        move(n-<span class="number">1</span>,a,c,b)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;moving from &#123;&#125; to &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a,c))</span><br><span class="line">        move(n-<span class="number">1</span>,b,a,c)</span><br><span class="line"></span><br><span class="line">move(<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure><p>moving from a to c<br>moving from a to b<br>moving from c to b<br>moving from a to c<br>moving from b to a<br>moving from b to c<br>moving from a to c<br>共7次移动</p><p>汉诺塔移动次数递推式：h(x)=h(x-1)+1</p><h2 id="列表查找"><a href="#列表查找" class="headerlink" title="列表查找"></a>列表查找</h2><p><strong>查找</strong>：在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程。<br><strong>列表查找（线性表查找）</strong>：从列表中查找指定元素</p><ul><li>输入：列表，待查找元素</li><li>输出： 元素下标（未找到返回None或者-1）<br>Python内置列表查找函数: index()<h3 id="顺序查找（Linear-Search）"><a href="#顺序查找（Linear-Search）" class="headerlink" title="顺序查找（Linear Search）"></a>顺序查找（Linear Search）</h3>顺序查找：线性查找，从列表第一个元素开始，顺序进行搜索，直到找到元素或者搜索到列表最后一个元素为止。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_search</span>(<span class="params">val,li</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">        <span class="keyword">if</span> li[i]==val:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="二分查找（Binary-Search）"><a href="#二分查找（Binary-Search）" class="headerlink" title="二分查找（Binary Search）"></a>二分查找（Binary Search）</h3></li></ul><p><strong>二分查找</strong>：又叫折半查找 ，从<font color=’red’>有序</font>列表的初始候选区li[0:n]开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">val, li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        val: 待查找值</span></span><br><span class="line"><span class="string">        li：有序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 候选区有值</span></span><br><span class="line">        mid = (left+right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">            right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 没查找到</span></span><br></pre></td></tr></table></figure><p>时间复杂度O(logn)</p><h3 id="二分与顺序查找比较"><a href="#二分与顺序查找比较" class="headerlink" title="二分与顺序查找比较"></a>二分与顺序查找比较</h3><p>为了证明二分查找比顺序查找效率要高，可以试验一下<br>写一个计算函数时间的装饰器，给两种方法加上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">time_wrapper</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args,**kwargs</span>):</span></span><br><span class="line">        t1=time.time()</span><br><span class="line">        result = func(*args,**kwargs)</span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; running time: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(func.__name__,t2-t1))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>算法比较：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wrappers <span class="keyword">import</span> time_wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@time_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_search</span>(<span class="params">val,li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        有序查找</span></span><br><span class="line"><span class="string">        val: 待查找值</span></span><br><span class="line"><span class="string">        li: 列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">        <span class="keyword">if</span> li[i] == val:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">val, li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        二分查找</span></span><br><span class="line"><span class="string">        val: 待查找值</span></span><br><span class="line"><span class="string">        li：有序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(li)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:  <span class="comment"># 候选区有值</span></span><br><span class="line">        mid = (left+right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> li[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">elif</span> li[mid] &gt; val:</span><br><span class="line">            right = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            left = mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 没查找到</span></span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100000000</span>))</span><br><span class="line"><span class="built_in">print</span>(binary_search(<span class="number">123109</span>,li))</span><br><span class="line"><span class="built_in">print</span>(order_search(<span class="number">123109</span>,li))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：<br>binary_search running time: 0.0<br>123109<br>order_search running time: 0.04597640037536621<br>123109<br>内置列表查找函数index()用的是顺序查找，二分查找需要有序列表</p><h2 id="六种常见排序方法"><a href="#六种常见排序方法" class="headerlink" title="六种常见排序方法"></a>六种常见排序方法</h2><p>排序：将一组“无序”的记录序列调整为“有序”的记录序列<br>列表排序：将无序列表转变为有序列表</p><ul><li>输入：列表</li><li>输出：有序列表<br>内置排序函数：sort()</li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><ul><li>列表每两个相邻的数，如果前面比后面大，则交换这两个数</li><li>一趟排序完成后，则无序区减少一个数，有序区增加一个数</li><li>代码关键点：趟、无序区范围<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        冒泡排序</span></span><br><span class="line"><span class="string">        li: 无序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># 第i趟</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):  <span class="comment"># 遍历比较列表内数值</span></span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">li = [random.randint(<span class="number">0</span>, <span class="number">10000</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]  <span class="comment"># 10个随机数</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(bubble_sort(li))</span><br></pre></td></tr></table></figure>关键在于理解排序的过程，将列表中的每一个数依次比较。<br>时间复杂度O(n<sup>2</sup>)</li></ul><p>但是如果在某一趟过程中没有发生交换，说明已经结束排序。则需要改进算法，提高效率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        冒泡排序</span></span><br><span class="line"><span class="string">        li: 无序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># 第i趟</span></span><br><span class="line">        exchange = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-i-<span class="number">1</span>):  <span class="comment"># 遍历比较列表内数值</span></span><br><span class="line">            <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>]:</span><br><span class="line">                li[j], li[j+<span class="number">1</span>] = li[j+<span class="number">1</span>], li[j]</span><br><span class="line">                exchange = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> exchange:</span><br><span class="line">            <span class="keyword">return</span> li</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = [<span class="number">9672</span>, <span class="number">9123</span>, <span class="number">4409</span>, <span class="number">9845</span>, <span class="number">4436</span>, <span class="number">98</span>, <span class="number">1768</span>, <span class="number">7077</span>, <span class="number">730</span>, <span class="number">5105</span>]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"><span class="built_in">print</span>(bubble_sort(li))</span><br></pre></td></tr></table></figure><p>对于相同的列表，则将会减少循环次数，提高效率</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><ul><li>一趟排序记录最小的数，放到第一个位置</li><li>再一趟排序记录列表无序区最小的数，放到第二个位置<br>…</li><li>算法关键点：有序区和无序区、无序区最小数的位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        排序算法，将每次查找过程中较小的数放在列表最左端</span></span><br><span class="line"><span class="string">        li: 待排序列表</span></span><br><span class="line"><span class="string">        return: li    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)-<span class="number">1</span>):  <span class="comment"># 第i趟</span></span><br><span class="line">        min_loc = i  <span class="comment"># 无序区第一个数开始查找</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(li)):</span><br><span class="line">            <span class="keyword">if</span> li[j] &lt; li[min_loc]:</span><br><span class="line">                min_loc = j</span><br><span class="line">        li[i], li[min_loc] = li[min_loc], li[i]</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure>时间复杂度O(n<sup>2</sup>)</li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><ul><li>初始时手里（有序区）只有一张牌</li><li>每次（从无序区）摸一张牌，插入到手里已有牌的正确位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        插入排序，将无序区的数据依次取出，与有序区数据比较，然后放在合理的位置</span></span><br><span class="line"><span class="string">        li: 无序列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(li)):  <span class="comment"># 无序列表第一个数</span></span><br><span class="line">        temp = li[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; temp: <span class="comment">#如果有序区的数依次与无序列表第一个数比较，直到找到对应位置</span></span><br><span class="line">            li[j+<span class="number">1</span>] = li[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        li[j+<span class="number">1</span>] = temp</span><br><span class="line">    <span class="keyword">return</span> li</span><br></pre></td></tr></table></figure></li></ul><p>时间复杂度O(n<sup>2</sup>)</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li>快速排序：快</li><li>快速排序思路：<ul><li>取一个元素 p ，是元素p归为；</li><li>列表被p分成两部分，左边都比p小，右边都比p大；</li><li>递归完成排序</li></ul></li></ul><p><img src="%E7%AE%97%E6%B3%951/image-20201114212701000.png" alt="image-20201114212701000"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速排序-框架</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">data,left,right</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    data: 列表</span></span><br><span class="line"><span class="string">    left: 列表左边index</span></span><br><span class="line"><span class="string">    right: 列表右边right</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        mid = partition(data,left,right)</span><br><span class="line">        quick_sort(data,left,mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(data,mid+<span class="number">1</span>,right)</span><br></pre></td></tr></table></figure><p>partition函数需要实现：<br>先提出列表的第一位，单独存储为a，从列表最右边开始依次找比a小的数，放在左边的空位，然后从左边找比a大的数填补右边的空位…依次执行，左右筛选完之后（left和right重合），把a防在空位中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    temp = li[left]  <span class="comment"># 将列表左边第一个数提出来</span></span><br><span class="line">    <span class="keyword">while</span> left &lt; right:</span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[right] &gt;= temp:  <span class="comment"># 从右边依次找比temp小的数</span></span><br><span class="line">            right -= <span class="number">1</span></span><br><span class="line">        li[left] = li[right]  <span class="comment"># 将找到的比temp小的数放在左边空位</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right <span class="keyword">and</span> li[left] &lt;= temp:   <span class="comment"># 从左边找比temp大的数</span></span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        li[right] = li[left]  <span class="comment"># 将找到的比temp大的数放在右边空位</span></span><br><span class="line">    li[left] = temp  <span class="comment"># 当左右相等 列表放置结束，将temp放在列表空位上</span></span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">li, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:  <span class="comment"># 递归调用每一部分列表，直到完成排序</span></span><br><span class="line">        mid = partition(li, left, right)</span><br><span class="line">        quick_sort(li, left, mid-<span class="number">1</span>)</span><br><span class="line">        quick_sort(li, mid+<span class="number">1</span>, right)</span><br></pre></td></tr></table></figure><p>快排的效率：</p><p>时间复杂度：O(n(logn))</p><p>存在的问题：</p><p>最坏情况，将倒叙的列表排序，时间复杂度接近O(n)了，但是这点可以通过随机取数解决</p><p>python在windows上递归最大深度为998，但是可以设置修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序前传-树与二叉树</p><ul><li>树是一种数据结构 比如：目录结构</li><li>树是一种可以递归定义的数据结构</li><li>树是由n个节点组成的集合：<ul><li>如果n=0，那是一颗空树；</li><li>如果n&gt;0，那存在一个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一个树。</li></ul></li></ul><p><img src="%E7%AE%97%E6%B3%951/image-20201119225548961.png" alt="image-20201119225548961"></p><p><strong>根节点</strong>：如图里的A</p><p><strong>叶子节点</strong>：不可分叉的节点，如图中的B C H I P Q…</p><p><strong>树的深度（高度）</strong>：看有几层，如图中是四层</p><p><strong>树的度</strong>：就是往下分了几个叉，比如E的度是2，如果说一整棵树，就是指分叉分得最多的节点的度，比如图中是A，度为6。</p><p><strong>孩子节点</strong>、<strong>父节点</strong>：不解释</p><p><strong>子树</strong>：树的一部分</p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>就是度不超过的2的树，每个节点最多有两个孩子节点，两个孩子节点被区分为左孩子节点，右孩子节点</p><p><strong>满二叉树</strong>：一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树</p><p><strong>完全二叉树</strong>：叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树</p><img src="算法1/image-20201123235002681.png" alt="image-20201123235002681" style="zoom: 67%;" /><p><strong>二叉树的存储排序</strong>（表达方式）</p><p>分链式存储方式（后面阐述）和<strong>顺序存储方式</strong></p><p>顺序存储类似于列表，挨个存储，存储之后可以找到，父节点与左右孩子节点的关系。</p><p><img src="%E7%AE%97%E6%B3%951/image-20201123235917151.png" alt="image-20201123235917151"></p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p><strong>堆</strong>：一种特殊的完全二叉树结构</p><ul><li>大根堆：一棵完全二叉树，满足任一节点都比其孩子节点大</li><li>小根堆：一棵完全二叉树，满足任一节点都比其孩子节点小</li></ul><p><img src="%E7%AE%97%E6%B3%951/image-20201124224317521.png" alt="image-20201124224317521"></p><p><strong>堆的向下调整</strong>：假设节点的左右子树都是堆，但自身不是堆。可以通过一次向下的调整来将其变成一个堆(和较低层级元素交换形成大根堆或小根堆)</p><h4 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h4><p>过程：</p><ol><li><p>建立堆</p><p>从最低 最右 层级进行调整，构造成堆</p></li><li><p>得到堆顶元素，为最大元素</p></li><li><p>去掉堆顶元素，将堆最后一个元素放到堆顶，此时可通过一次向下调整重新使堆有序</p></li><li><p>堆顶元素为第二大元素</p></li><li><p>重复步骤3，直到堆变空</p></li></ol><p><img src="%E7%AE%97%E6%B3%951/55.gif" alt="55"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        堆向下调整过程</span></span><br><span class="line"><span class="string">        li: 待调整列表</span></span><br><span class="line"><span class="string">        low: 根节点元素</span></span><br><span class="line"><span class="string">        high: 最后一个节点元素</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low  <span class="comment"># 最开始i为根节点元素</span></span><br><span class="line">    j = i*<span class="number">2</span>+<span class="number">1</span>   <span class="comment"># j为i的左孩子</span></span><br><span class="line">    tmp = li[low]   <span class="comment"># 将根节点元素临时存储起来</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:  <span class="comment"># 只要j位置有数</span></span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span> &lt;= high <span class="keyword">and</span> li[j+<span class="number">1</span>] &gt; li[j]:   <span class="comment"># 只要右孩子存在且大于左孩子</span></span><br><span class="line">            j = j+<span class="number">1</span>   <span class="comment"># j指向右孩子</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; tmp:  <span class="comment"># 如果j节点数大于i节点</span></span><br><span class="line">            li[i] = li[j]  <span class="comment"># j节点数上移</span></span><br><span class="line">            i = j   <span class="comment"># 继续下一层级</span></span><br><span class="line">            j = i*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    li[i] = tmp</span><br></pre></td></tr></table></figure><p>开始<strong>构造（建立）堆</strong></p><p>需要从最后的父节点开始，最后一个节点的小标为n-1，可以求出其父节点为<code>(n-2)//2</code></p><p>之后<strong>挨个出数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((n-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"><span class="comment"># i 为待调整堆的根节点位置</span></span><br><span class="line">        sift(li, i, n - <span class="number">1</span>)<span class="comment"># 到这里堆建立完成</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># i 指向当前堆的最后一个元素</span></span><br><span class="line">        li[<span class="number">0</span>], li[i] = li[i], li[<span class="number">0</span>]</span><br><span class="line">        sift(li, <span class="number">0</span>, i - <span class="number">1</span>) <span class="comment"># i已经被提上low的位置，high的位置所以变成了i-1</span></span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)</p><h5 id="堆排序内置模块"><a href="#堆排序内置模块" class="headerlink" title="堆排序内置模块"></a>堆排序内置模块</h5><p>python内置模块——heapq</p><p> <strong>补充模块说明</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq <span class="comment"># q--&gt;queue 优先队列（小的先出或者大的先出</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">li = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">100</span>))</span><br><span class="line">random.shuffle(li)</span><br><span class="line"></span><br><span class="line">heapq.heapify(li)<span class="comment"># 建堆,建立的是小根堆</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)):</span><br><span class="line">    heapq.heappop(li)<span class="comment"># 挨个出数</span></span><br></pre></td></tr></table></figure><h4 id="堆排序——topk问题"><a href="#堆排序——topk问题" class="headerlink" title="堆排序——topk问题"></a>堆排序——topk问题</h4><p>现在有n个数，设计算法得到前k大的数。（k&lt;n)</p><p>解决思路：</p><ul><li>排序后切片     复杂度：O(nlogn+k)k可以忽略</li><li>排序LowB三人组      复杂度：O(kn) </li><li>堆排序思路        复杂度：O(nlogk)</li></ul><p>堆排序解决topk思路：</p><ol><li>取列表前k个元素建立一个小根堆，堆顶就是目前的第k大的树</li><li>依次向后遍历原列表，对列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一此调整</li><li>遍历列表所有元素后，倒序弹出堆顶</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sift_k</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        向下调整</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    i = low</span><br><span class="line">    j = i*<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    tmp = li[low]</span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> li[j] &gt; li[j+<span class="number">1</span>] <span class="keyword">and</span> j+<span class="number">1</span> &lt;= high:</span><br><span class="line">            j = j+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> li[j] &lt; tmp:</span><br><span class="line">            li[i] = li[j]</span><br><span class="line">            i = j</span><br><span class="line">            j = j*<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    li[i] = tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topk</span>(<span class="params">li, k</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        取出列表中最大的k个数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    <span class="comment"># 取出前k个数建立小根堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((k-<span class="number">2</span>)//<span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        sift_k(li, i, k-<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(li)</span><br><span class="line">    <span class="comment"># 遍历k后面的数，比li[0]大则替换且重新调整</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k, n):</span><br><span class="line">        <span class="keyword">if</span> li[i] &gt; li[<span class="number">0</span>]:</span><br><span class="line">            li[<span class="number">0</span>] = li[i]</span><br><span class="line">            sift_k(li, <span class="number">0</span>, k-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 出数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        li[i], li[<span class="number">0</span>] = li[<span class="number">0</span>], li[i]</span><br><span class="line">        sift_k(li, <span class="number">0</span>, i-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> li[<span class="number">0</span>:k]</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>假设现在的列表分两段有序，如何将其合并成一个有序列表。这样的合并操作就成为归并（merge）</p><p><img src="%E7%AE%97%E6%B3%951/27.gif" alt="GIF 2020-12-7 21-21-27"></p><p>归并函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">li, low, mid, high</span>):</span></span><br><span class="line">    i = low</span><br><span class="line">    j = mid+<span class="number">1</span></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= high:</span><br><span class="line">        <span class="keyword">if</span> li[i] &lt; li[j]:</span><br><span class="line">            tmp.append(li[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp.append(li[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 两边肯定有一部分没有数了</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">        tmp.append(li[i])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= high:</span><br><span class="line">        tmp.append(li[j])</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    li[low:high+<span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure><h4 id="使用归并"><a href="#使用归并" class="headerlink" title="使用归并"></a>使用归并</h4><ul><li>分解：将列表越分越小，直到分成一个元素</li><li>终止条件：一个元素是有序的</li><li>合并：将两个有序列表归并，列表越来越大</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">li, low, high</span>):</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:  <span class="comment"># 说明至少有两个元素，递归归并</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        merge_sort(li, low, mid)</span><br><span class="line">        merge_sort(li, mid+<span class="number">1</span>, high)</span><br><span class="line">        merge(li, low, mid, high)   <span class="comment"># 调用归并方法</span></span><br></pre></td></tr></table></figure><p>每次归并是O(n)，所以时间复杂度是O(nlogn)。空间复杂度是O(n)</p><p>python的<code>sort()</code>使用的一种‘team sort’的算法，结合了插入排序与归并排序</p><h3 id="排序方法对比"><a href="#排序方法对比" class="headerlink" title="排序方法对比"></a>排序方法对比</h3><p>三种快速排序的时间复杂度都是O(nlogn)</p><p>一般情况下，就运行时间而言：快速排序&lt;归并排序&lt;堆排序</p><p>三种算法的缺点：</p><ul><li>快速排序：极端情况下排序效率低</li><li>归并排序：需要额外的内存开销</li><li>堆排序：在快的排序算法中仙骨笛较慢</li></ul><p><img src="%E7%AE%97%E6%B3%951/image-20201209144244938.png" alt="image-20201209144244938"></p><p>稳定性：稳定指的是排序中的两个相同的数，排序后相对其初始位置不发生改变。挨个比较的算法就是稳定的！！</p><h2 id="其他排序"><a href="#其他排序" class="headerlink" title="其他排序"></a>其他排序</h2><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序（Shell Sort）是一种分组插入排序算法。</p><ol><li><p>首先取一个整数d<sub>1</sub>=n/2，将元素分为d<sub>1</sub>个组，每组相邻两个元素之间的距离是d<sub>1</sub>，在各组内进行直接插入排序；</p><p><img src="%E7%AE%97%E6%B3%951/28.gif" alt="GIF 2020-12-14 20-48-28"></p></li><li><p>取第二个数d<sub>2</sub>=d<sub>1</sub>/2，重复上述分组排序过程，直到d<sub>i</sub>=1，即所有元素在同一组内进行直接插入排序。</p></li></ol><p>希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。</p><p><img src="%E7%AE%97%E6%B3%951/11.gif" alt="GIF 2020-12-14 20-55-11"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_insert_sort</span>(<span class="params">gap, li</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot; 这一部分采用的是插入排序的思想 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(li)):</span><br><span class="line">        temp = li[i]</span><br><span class="line">        j = i - gap</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> li[j] &gt; temp:</span><br><span class="line">            li[j+gap] = li[j]</span><br><span class="line">            j -= gap</span><br><span class="line">        li[j+gap] = temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 分组之后 各组采用插入排序 &quot;&quot;&quot;</span></span><br><span class="line">    n = <span class="built_in">len</span>(li)</span><br><span class="line">    d = n//<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> d &gt; <span class="number">0</span>:</span><br><span class="line">        shell_insert_sort(d, li)</span><br><span class="line">        d //= <span class="number">2</span></span><br></pre></td></tr></table></figure><p>时间复杂度与选取的gap序列有关</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p>对列表进行排序，已知列表中的数范围都在0到100之间。设计时间复杂度为O(n)的算法</p><p>优点：比系统自带的<code>sort()</code>方法都快</p><p>缺点：消耗空间（需要100个数的列表），有限制（需要知道列表中数的范围）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coun_sort</span>(<span class="params">li,max_count=<span class="number">100</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计数排序，已知列表中的数的范围，新建0-最大数的顺序列表用于记录每个数的出现次数，从而排序</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    count_list = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_count+<span class="number">1</span>)] <span class="comment"># 生成一个长度为li的最大值的统计次数列表</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> li:</span><br><span class="line">        count_list[val] += <span class="number">1</span> <span class="comment"># 统计每个数出现的次数</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> index, count <span class="keyword">in</span> <span class="built_in">enumerate</span>(count_list): <span class="comment"># 遍历生成新的列表</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">            li.append(index)</span><br></pre></td></tr></table></figure><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>在计数排序中，如果元素的范围比较大（比如在1到1亿之间），如何改造算法？</p><p>桶排序(Bucket Sort): 首先将元素分在不同的桶中，在对每个桶中的元素排序</p><p><img src="%E7%AE%97%E6%B3%951/image-20201229222547450.png" alt="image-20201229222547450"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span>(<span class="params">li, n=<span class="number">10</span>, max_num=<span class="number">10000</span></span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">桶排序，将列表中的数分为10个桶，将每个桶中的数排序</span></span><br><span class="line"><span class="string">li:待排序列表</span></span><br><span class="line"><span class="string">n:桶个数</span></span><br><span class="line"><span class="string">max_num:列表最大数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建桶</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line"><span class="comment"># 将列表中的数依次放入桶中，对于列表中的最大数，放入最后一个桶</span></span><br><span class="line">        i = <span class="built_in">min</span>(var//(max_num//n), n-<span class="number">1</span>)</span><br><span class="line">        buckets[i].append(var)</span><br><span class="line">        <span class="comment"># 将每个桶中元素进行排序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(buckets[i])-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> buckets[i][j] &lt; buckets[i][j-<span class="number">1</span>]:</span><br><span class="line">            buckets[i][j], buckets[i][j-<span class="number">1</span>] = buckets[i][j-<span class="number">1</span>], buckets[i][j]</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    li.clear()</span><br><span class="line">    <span class="keyword">for</span> buk <span class="keyword">in</span> buckets:</span><br><span class="line">        li.extend(buk)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>桶排序表现取决于数据的分布。也就是需要对不同数据排序时采取不同的分桶策略。</li><li>平均情况时间复杂度：O(n+k)，k约一个桶中元素个数。</li><li>最坏情况时间复杂度：O(n<sup>2</sup>k)</li><li>空间复杂度：O(nk)</li></ul><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>多关键字排序：假如现在有一个员工表，要求按照薪资排序，年龄相同的员工按照年龄排序。</p><p>思路：先按照年龄进行排序，再按照薪资进行稳定的排序</p><p>对于32、13、94、52、17、54、93是否可以看做多关键字排序（先看十位，后看个位）</p><p>在基数排序中，先排序个位，再排序十位！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redix_sort</span>(<span class="params">li</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    基数排序，将列表中的数依次按个位、十位、百位...最高位排序</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_digit = <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">max</span>(li))) <span class="comment"># 获取最大数的位数</span></span><br><span class="line">    t = <span class="number">0</span> <span class="comment"># t代表循环的次数</span></span><br><span class="line">    <span class="keyword">while</span> t &lt;= max_digit:</span><br><span class="line">        <span class="comment"># 每次都构建十个桶</span></span><br><span class="line">        buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> li:</span><br><span class="line">            i = (var//(<span class="number">10</span>**t)) % <span class="number">10</span> <span class="comment"># 获取列表中数对应位数上的值</span></span><br><span class="line">            buckets[i].append(var)</span><br><span class="line">        li.clear()</span><br><span class="line">        <span class="keyword">for</span> buk <span class="keyword">in</span> buckets:</span><br><span class="line">            li.extend(buk)</span><br><span class="line">       t += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>时间复杂度：（kn)</p><p>空间复杂度：（n+k)</p><p>k表示最大数位数</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 查找算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络3传输层</title>
      <link href="/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/"/>
      <url>/2020/11/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/</url>
      
        <content type="html"><![CDATA[<p>传输层只涉及到两个终端设备之间，路由器中没有这一层。实现的是终端之间的进程与进程的通信，与之前的Unix域套接字和共享内存等单机进程通信不同。</p><p><strong>端口</strong>（Port）用来标记计算机中不同的网路进程，使用16比特位表示（0-65535）</p><p>常用协议的端口</p><table><thead><tr><th>FTP</th><th>HTTP</th><th>HTTPS</th><th>DNS</th><th>FELNET</th></tr></thead><tbody><tr><td>21</td><td>80</td><td>443</td><td>53</td><td>23</td></tr></tbody></table><p>各层之间的相关协议：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/clip_image002.jpg" alt="img"></p><h2 id="UDP协议详解"><a href="#UDP协议详解" class="headerlink" title="UDP协议详解"></a>UDP协议详解</h2><p>UDP（User Datagram Protocol: 用户数据报协议）</p><p>传输数据报时不拆分不合并</p><p>UDP在IP数据报内部</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/clip_image004.jpg" alt="img"></p><p>UDP协议首部分为16位源端口号、16位目的端口号、16位UDP长度、16位UDP校验和。剩下为UDP数据</p><ul><li><p>UDP是无连接协议，即发送数据前不需要建立连接</p></li><li><p>UDP不能保证可靠的交付数据</p></li><li><p>UDP是面向报文传输的，即直接传输UDP数据报的数据</p></li><li><p>UDP没有拥塞控制</p></li><li><p>UDP的首部开销很小      </p></li></ul><h2 id="TCP协议详解"><a href="#TCP协议详解" class="headerlink" title="TCP协议详解"></a>TCP协议详解</h2><p>TCP（Transmission Control Protocol: 传输控制协议）</p><p>TCP同样也在IP数据报内部</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/clip_image006.jpg" alt="img"></p><p><strong>特点：</strong></p><ul><li><p>TCP是面向连接的协议，即需要通信前建立连接</p></li><li><p>TCP的一个连接有两端（点对点通信）</p></li><li><p>TCP提供可靠的传输服务</p></li><li><p>TCP协议提供全双工的通信，即可同时发送或接收数据</p></li><li><p>TCP是面向字节流的协议。这里的流的指的是流出流入进程的字节序列，相对于数据报来说，是可以一个字节一个字节进行处理的。tcp数据可合并可分拆</p></li></ul><p><strong>TCP协议的首部</strong>：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/clip_image008.jpg" alt="img"></p><p>（表格宽度代表位数）</p><p>固定有20个字节长度，即表格中的前五行</p><p><strong>序号</strong>范围0~2<sup>32</sup>-1，一个字节一个序号，代表了数据首字节字号</p><p><strong>确认号</strong>范围0~2<sup>32</sup>-1，一个字节一个序号，代表期望收到数据的首字节序号。一般来说确认号为N：则表示N-1序号的数据都已经收到</p><p><strong>数据偏移</strong>占4位：0~15，单位为32位字，即每一个偏移都可以表示4个字节的偏移，表示数据偏离首部的距离（因为TCP选项未知，需要存储数据偏移来找到真实数据位置）。15*4=60字节，最大数据便宜是60个字节，所以TCP首部是20~60字节范围</p><p><strong>TCP标记</strong>占6位，每位各有不同意义，分别是URG\ACK\PSH\PST\SYN\FIN</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/tcp.png" alt="tcp"></p><p><strong>窗口</strong>：占16位：0<del>2<sup>16</sup>-1，窗口指明对方发送的数据量。比如确认号是501，窗口是1000，表明501</del>1500这么多个字节的数据都是可以接收的。</p><p><strong>紧急指针</strong>：紧急数据（当URG=1启用)，指定紧急数据在报文的位置</p><p><strong>TCP选项</strong>：最多40个字节，用于支持TCP未来的拓展</p><h2 id="可靠传输的基本原理"><a href="#可靠传输的基本原理" class="headerlink" title="可靠传输的基本原理"></a>可靠传输的基本原理</h2><h3 id="停止等待协议（超时定时器）"><a href="#停止等待协议（超时定时器）" class="headerlink" title="停止等待协议（超时定时器）"></a>停止等待协议（超时定时器）</h3><p>为了简化讨论协议，简化为接收方和发送方。</p><p>无差错情况下，接收方发送消息，接收方收到后发送确认。在收到对方消息前都是停止等待状态。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209011832049.png" alt="image-20201209011832049"></p><p>出差错的情况下，发送方发送消息后，出现差错，接收方没有接收到，无法发送确认消息，等待一段时间后发送方重传消息。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209012107845.png" alt="image-20201209012107845"></p><p>确认消息丢失，同样发生超时重传</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209012132010.png" alt="image-20201209012132010"></p><p>确认的消息很久才到，超时重传</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209012315181.png" alt="image-20201209012315181"></p><p><strong>超时定时器</strong>：每发送一个消息，都需要设置一个定时器</p><p>小结：停止等待协议是最简单的可靠传输协议；停止等待协议对<font color='red'>信道的利用效率</font>不高</p><h3 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h3><p>ARQ(Automatic Repeat reQuest: 自动重传请求) 。用于批量发送消息和确认</p><p><font color='red'><strong>滑动窗口</strong></font>：窗口里的数据都可以发送，只要窗口内的数据发送的确认号到达了，就往前继续滑动。不需要对里面的每个数据进行确认，而采用<font color='red'><strong>累计确认</strong></font>的方法。即只要收到某个消息的确认，说明之前的消息都已经确认了。</p><p>图中 数据5已经收到，窗口直接滑动到6继续发送。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209013106137.png" alt="image-20201209013106137"></p><h2 id="TCP协议的可靠传输"><a href="#TCP协议的可靠传输" class="headerlink" title="TCP协议的可靠传输"></a>TCP协议的可靠传输</h2><ul><li>TCP的可靠传输基于连续ARQ协议</li><li>TCP的滑动窗口是以字节为单位</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209151112625.png" alt="image-20201209151112625"></p><p>假设存在一个窗口大小为7的滑动窗口，收到确认号是22，那么滑动窗口从23开始。此时连续发送了23-26，收到确认号为24，如上图所示，窗口向前滑动两位。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201209151330091.png" alt="image-20201209151330091"></p><p>如果出现了仅收到不连续确认号情况。如上图，此时23、24确认号未收到，需要从23开始重传。这样传输效率就不高，则需要一种方法提高传输效率，这就是<strong>选择重传</strong></p><h3 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a>选择重传</h3><ul><li>选择重传需要指定需要重传的字节（通过字节的32位序号指定）</li><li>序号选择的是需要重传的边界，传输其间的字节流</li></ul><p>注意：选择重传是重传整个字节流，而不是单个字节。</p><h2 id="TCP协议的流量控制"><a href="#TCP协议的流量控制" class="headerlink" title="TCP协议的流量控制"></a>TCP协议的流量控制</h2><p>流量控制指让发送方发送速率不要太快。流量控制是使用滑动窗口来实现的</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201211212117045.png" alt="image-20201211212117045"></p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201211212449952.png" alt="image-20201211212449952"></p><p>再进行数据传输之后，接收方将窗口设置为0，停止传送。等待接收方处理完数据之后，发送调整窗口为1000的消息。此时如果该调整窗口的消息发生了丢失，两边都在等待，形成了死锁，该怎么办？（对于接受带ACK的这种确认消息才有超时重传机制，特殊消息不具有）</p><h3 id="坚持定时器"><a href="#坚持定时器" class="headerlink" title="坚持定时器"></a>坚持定时器</h3><ul><li>当发送方接收到窗口为0的消息，则启动坚持定时器</li><li>坚持定时器每隔一段时间发送一个窗口探测报文。（即便调整窗口的消息丢失也不会变成死锁）</li></ul><h2 id="TCP协议的拥塞控制"><a href="#TCP协议的拥塞控制" class="headerlink" title="TCP协议的拥塞控制"></a>TCP协议的拥塞控制</h2><ul><li>一条数据链路经过非常多的设备</li><li>数据链路中各个部分都有可能成为网路传输的瓶颈</li></ul><p>流量控制考虑点对点的通信量的控制，拥塞控制考虑整个网络，是全局性的考虑</p><p><strong>报文超时可以是判断拥塞的方法</strong></p><p>拥塞控制的两个算法：</p><h3 id="慢启动算法"><a href="#慢启动算法" class="headerlink" title="慢启动算法"></a>慢启动算法</h3><p>由小到大逐渐增加发送数据量，每收到一个保温确认，就加一。比如第一次发送1个报文，收到1次确认后，增发一次报文，第二次发送两个报文，以此类推1，2，4，8，16… 呈现指数增长。</p><p>当指数增长到<strong>慢启动阈值(ssthresh)<strong>，就不再增长了，进行</strong>拥塞避免算法</strong></p><h3 id="拥塞避免算法"><a href="#拥塞避免算法" class="headerlink" title="拥塞避免算法"></a>拥塞避免算法</h3><p>维护一个拥塞窗口的变量；只要网络不拥塞，就试探着拥塞窗口调大。</p><p>假设前面提到发送报文到达了慢启动阈值16，收到16个报文的确认后，随后发送17个报文，18个报文，直到发生拥塞。</p><img src="计算机网络3/image-20201214203005176.png" alt="image-20201214203005176" style="zoom:67%;" /><p>拥塞控制可以保证网络不发生拥塞的情况下，更多得发送数据</p><h2 id="TCP连接的建立"><a href="#TCP连接的建立" class="headerlink" title="TCP连接的建立"></a>TCP连接的建立</h2><p>TCP首部标记中ACK\SYN\FIN，在TCP连接的建立中非常重要</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201217132914099.png" alt="image-20201217132914099"></p><p>三次握手的过程：</p><ol><li>发送方发送SYN=1,seq=x（同步位是1，序列号为x）的报文，表示请求建立连接</li><li>接收方收到后发送SYN=1,ACK=1,seq=y,ack=x+1（同步位为1，确认位为1，序列号为y，确认号为x+1)的报文，表示收到请求，确认号生效，建立连接</li><li>发送方发送ACK=1,seq=x+1，ack=y+1(确认位为1，序列号为x+1,确认号为y+1)的报文，连接建立成功。</li></ol><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201217134034435.png" alt="image-20201217134034435"></p><h3 id="为什么发送方要发出第三个确认报文呢？"><a href="#为什么发送方要发出第三个确认报文呢？" class="headerlink" title="为什么发送方要发出第三个确认报文呢？"></a>为什么发送方要发出第三个确认报文呢？</h3><p>避免已经失效的连接请求发送到对方，引起错误</p><p>如果第一次连接请求发送后超时，重发之后（假如两次握手建立起连接后），可能会建立起两次连接</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201217134552335.png" alt="image-20201217134552335"></p><h2 id="TCP连接的释放"><a href="#TCP连接的释放" class="headerlink" title="TCP连接的释放"></a>TCP连接的释放</h2><p>第一次挥手：发送方发送FIN=1,seq=u（终止位为1，序列号为u）的报文，表示准备连接释放，发送方进入断开连接的第一次等待状态</p><p>第二次挥手：接收方发送ACK=1,seq=v,ack=u+1(确认位为1，序列号为v，确认号为u+1)的报文，接收方进入关闭等待状态，但是此时接收方还可以继续进行数据传输给发送方。发送方接收到报文后进入断开连接的第二次等待状态。</p><p>第三次挥手：待发送方发送完数据后，就发送FIN=1,ACK=1,seq=w,ack=u+1（终止位为1，确认位为1，序列号为w，确认号为u+1）的报文，随后接收方进入最后确认状态</p><p>第四次挥手：发送方接受到报文后，随即发送ACK=1,seq=u+1,ack=w+1（确认位为1，序列号为u+1，确认号为w+1）的报文，发送方<font color='red'>等待计时器</font>生效，随后进入关闭状态。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201224163319872.png" alt="image-20201224163319872"></p><h3 id="等待定时器"><a href="#等待定时器" class="headerlink" title="等待定时器"></a>等待定时器</h3><p>对于等待定时器，会等待2倍MSL（Max Segment Lifetime）：最长报文段寿命</p><p>MSL建议设置为2分钟</p><p>在等待定时器作用期间不会释放端口（一个TCP连接会占用一个端口），要等待其结束才能重新复用该端口</p><p><strong>为什么需要2MSL</strong></p><p>2MSL一般是报文在网络中存活的最长时间</p><ol><li>确保发送方的ACK可以到达接收方，2MSL时间内没有收到，则接收方会重发报文（第三次挥手步骤）</li><li>确保当前连接的所有报文都已经过期</li></ol><h2 id="套接字与套接字编程"><a href="#套接字与套接字编程" class="headerlink" title="套接字与套接字编程"></a>套接字与套接字编程</h2><p>端口（Port）用来标记不同的网络进程，使用16个比特位表示（0~65535）</p><p>ip加端口的组合就可以用来指定网络中某一台主机的具体进程，这个组合又叫<strong>套接字</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;IP:Port&#125;</span><br></pre></td></tr></table></figure><p><strong>套接字（Socket）</strong>是抽象概念，表示TCP连接的一端。通过套接字就可以进行数据发送和接收</p><p>对与TCP连接就可以表示为两个套接字的连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCP=&#123;Socket1:Socket2&#125;=&#123;&#123;IP:Port&#125;&#123;IP:Port&#125;&#125;</span><br></pre></td></tr></table></figure><p>服务端（左）和客户端（右）套接字编程过程</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C3/image-20201224172347839.png" alt="image-20201224172347839"></p><p>实例：</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span>():</span></span><br><span class="line">    <span class="comment"># 创建socket</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    host = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    port = <span class="number">8000</span></span><br><span class="line">    <span class="comment"># 绑定套接字</span></span><br><span class="line">    s.bind((host, port))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监听，参数为backlog，代表已建立连接队列和未完成建立的连接队列数之和。</span></span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c, addr = s.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Connect Addr:&#x27;</span>, addr)</span><br><span class="line">        c.send(<span class="string">b&#x27;Welcome to my server&#x27;</span>)</span><br><span class="line">        c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    server()</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="comment"># 创建套接字</span></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    <span class="comment"># 连接套接字</span></span><br><span class="line">    s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># recv(bufsize),bufsize表示一次接收的最大数据量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Recv msg:&#123;&#125;,Client:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(s.recv(<span class="number">1024</span>), i))</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        client(i)</span><br></pre></td></tr></table></figure><p>运行服务端之后，会自动开启监听，再运行客户端，连接套接字之后就可以通信了，此时服务端也可以知道客户端的地址信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8874)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8875)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8876)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8877)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8878)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8879)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8880)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8881)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8882)</span><br><span class="line">Connect Addr: (&#x27;127.0.0.1&#x27;, 8883)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">0</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">1</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">2</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">3</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">4</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">5</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">6</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">7</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">8</span></span><br><span class="line">Recv msg:<span class="string">b&#x27;Welcome to my server&#x27;</span>,Client:<span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>网络套接字对比域套接字</strong></p><p>使用网络套接字进行通信会经过四层模型的协议栈；域套接字不需要经过协议栈，适合单机间的通信。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask表单介绍</title>
      <link href="/2020/10/17/flask%E8%A1%A8%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/10/17/flask%E8%A1%A8%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="wtf表单介绍"><a href="#wtf表单介绍" class="headerlink" title="wtf表单介绍"></a>wtf表单介绍</h2><p>特点：</p><ul><li>集成wtforms</li><li>CSRF保护</li><li>与Flask-Uploads一起支持文件上传</li></ul><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-WTF</span><br></pre></td></tr></table></figure><p>配置（CSRF保护）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;WTF_CSRF_SECRET_KEY&#x27;</span>] = <span class="string">&#x27;a random string&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="第一个表单模型"><a href="#第一个表单模型" class="headerlink" title="第一个表单模型"></a>第一个表单模型</h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户名 &quot;&quot;&quot;</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="表单常用字段类型及渲染"><a href="#表单常用字段类型及渲染" class="headerlink" title="表单常用字段类型及渲染"></a>表单常用字段类型及渲染</h2><ul><li>label——label标签（如输入框前的文字描述）</li><li>default——表单的默认值</li><li>validators——表单验证规则</li><li>widget——定制界面显示方式（如：文本框、选择框）</li><li>description——帮助文字（在Django表单中使用的是help_text）</li></ul><p><strong>使用模板语法渲染表单内容</strong>：</p><ul><li><p>表单输入区域：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.username &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>表单label：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.username.label.text &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>文本/字符串：</p><ul><li>StringField——字符串输入</li><li>PasswordField——密码输入</li><li>TextAreaField——长文本输入</li><li>HiddenField——隐藏表单域</li></ul><p>数值：</p><ul><li>FloatField——浮点数输入</li><li>IntegerField——整数输入</li><li>DecimalField——小数输入（更精确）</li></ul><p>选择：</p><ul><li>RadioField——radio单选</li><li>SelectField——下拉单选</li><li>SelectMutipleField——下拉多选</li><li>BooleanField——勾选（复选框）</li></ul><p>日期/时间：</p><ul><li>DateField——日期选择</li><li>DateTimeField——日期时间选择</li></ul><p>文件上传：</p><ul><li>FileField——文件单选</li><li>MultipleFileField——文件多选</li></ul><p>其他：</p><ul><li>SubmitField——提交按钮</li><li>FieldList——自定义的表单选择列表（如：选择用户对象）</li><li>FormField——自定义多个字段构成的选项</li></ul><p>from文件，app内引用该表单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, SubmitField</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 模拟登陆表单 &quot;&quot;&quot;</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>,description=<span class="string">&#x27;仅限英文大小写&#x27;</span>)</span><br><span class="line">    password=PasswordField(label=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">    submit = SubmitField(label=<span class="string">&#x27;提交&#x27;</span>)</span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> form <span class="keyword">import</span> LoginForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/form&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_form</span>():</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;form.html&#x27;</span>,form=form)</span><br></pre></td></tr></table></figure><p>然后html中可以渲染表单内容</p><p><strong>也可以通过前面提到的宏来简化表单</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.username.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.username &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.password.label &#125;&#125;</span><br><span class="line">    &#123;&#123; form.password &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.submit &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="flask%E8%A1%A8%E5%8D%95%E4%BB%8B%E7%BB%8D/image-20201125224156148.png" alt="image-20201125224156148"></p><h2 id="通过表单来保存数据"><a href="#通过表单来保存数据" class="headerlink" title="通过表单来保存数据"></a>通过表单来保存数据</h2><ul><li><p>第一步：检测表单是否已经通过验证</p><p><code>form.validate_on_submit()</code></p></li><li><p>第二步：获取表单中传递过来的值</p><p><code>form.field_name.data</code></p></li><li><p>第三步：业务逻辑代码编写（可结合ORM）</p></li></ul><p>涉及到表单提交必然会有<strong>csrf保护</strong>，防止表单重复提交等风险。</p><p>Flask是默认开启CSRF保护的</p><p>关闭单个表单的CSRF保护（不推荐）：</p><p><code>form = LoginForm(csrf_enabled=False)</code></p><p>可能需要同步改写LoginForm的构造方法将参数顺利传入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,csrf_enabled,*args,**kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(csrf_enabled=csrf_enabled,*args,**Kwargs)</span><br></pre></td></tr></table></figure><p>全局关闭（不推荐）：</p><p><code>WTF_CSRF_ENABLED = False</code></p><p><strong>同步请求CSRF保护</strong></p><ul><li><p>模板中添加csrf_token</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方式一 --&gt;</span></span><br><span class="line">&#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!-- 方式二 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;hidden&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;csrf_token&#x27;</span> <span class="attr">vlaue</span>=<span class="string">&#x27;&#123;&#123; csrf_token() &#125;&#125;&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>异步请求（AJAX）CSRF保护</strong></p><ul><li><p>第一步：模板中添加csrf_token</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;csrf-token content=&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span></span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    var csrftoken=&quot;</span><span class="template-variable">&#123;&#123; <span class="name">csrf_token</span>() &#125;&#125;</span><span class="xml">&quot;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二步：填加X-CSRFToken头</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> csrftoken = $(<span class="string">&#x27;meta[name=csrf-token]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">    <span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, settings</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/i</span>.test(settings.type)</span><br><span class="line">          &amp;&amp; !<span class="built_in">this</span>.crossDomain)&#123;</span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;X-CSRFToken&quot;</span>, csrftoken)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>通过表单传递用户数据并添加进入数据库：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;user_add&#x27;) &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加csrf保护 --&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.username.label &#125;&#125;</span><br><span class="line">        &#123;&#123; form.username &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.password.label &#125;&#125;</span><br><span class="line">        &#123;&#123; form.password &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.birthdate.label &#125;&#125;</span><br><span class="line">        &#123;&#123; form.birthdate &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.age.label &#125;&#125;</span><br><span class="line">        &#123;&#123; form.age &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.submit &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% if form.errors %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.errors &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>forms.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, DateField, IntegerField, SubmitField</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddUser</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 新增用户 &quot;&quot;&quot;</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>, description=<span class="string">&#x27;仅限英文大小写&#x27;</span>)</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">    birthdate = DateField(label=<span class="string">&#x27;生日&#x27;</span>)</span><br><span class="line">    age = IntegerField(label=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    submit = SubmitField(label=<span class="string">&#x27;提交&#x27;</span>)</span><br></pre></td></tr></table></figure><p>app.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, flash, redirect, url_for</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> form <span class="keyword">import</span> AddUser</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 配置数据库的连接参数</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:960423@127.0.0.1/flasker&#x27;</span></span><br><span class="line"><span class="comment"># 消息通知用到了session，基于安全的考虑需要加密</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;abacdef&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意添加提交方式method</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/add&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_add</span>():</span></span><br><span class="line">    form = AddUser()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        username = form.username.data</span><br><span class="line">        password = form.password.data</span><br><span class="line">        birthday = form.birthdate.data</span><br><span class="line">        age = form.age.data</span><br><span class="line">        <span class="comment"># 保存数据</span></span><br><span class="line">        user = User(username=username, password=password, birthday=birthday, age=age)</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;add_user_form.html&#x27;</span>,form=form)</span><br></pre></td></tr></table></figure><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>步骤一：导入内置的表单验证器（或自定义）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br></pre></td></tr></table></figure><p>步骤二：配置到表单字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以使用自定义的表单验证器</span></span><br><span class="line">username=StringField(<span class="string">&#x27;用户名&#x27;</span>,validators=[InputRequired(), my_validator])</span><br></pre></td></tr></table></figure><p>内置表单的验证器：</p><ul><li><code>DataRequired/InputRequired</code>——必填</li><li><code>Email/URL/UUID</code>——电子邮箱/URL/UUID</li><li><code>Length(min=-1,max=-1,message=None)</code>——长度范围验证</li><li><code>EqualTo(filename, message=None)</code>——两个字段输入的值相等（如：密码确认）</li></ul><p>自定义表单验证器：</p><p>场景一：只在本表单中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span>(<span class="params">self, field</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(field.data) &gt; <span class="number">50</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;不超过50个字符&#x27;</span>)</span><br></pre></td></tr></table></figure><p>场景二：在所用表单中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phone_validate</span>(<span class="params">form, field</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(field.data) &gt; <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;不超过50个字符&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>,validators=[phone_validate])</span><br></pre></td></tr></table></figure><p>举个例子：</p><p>验证用户名为手机号，且密码不能为空（采用自带验证器）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddUser</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 新增用户 &quot;&quot;&quot;</span></span><br><span class="line">    username = StringField(label=<span class="string">&#x27;用户名&#x27;</span>, description=<span class="string">&#x27;仅限英文大小写&#x27;</span>)</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码&#x27;</span>, validators=[DataRequired()])</span><br><span class="line">    birthdate = DateField(label=<span class="string">&#x27;生日&#x27;</span>)</span><br><span class="line">    age = IntegerField(label=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line">    submit = SubmitField(label=<span class="string">&#x27;提交&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在表单强制为validate_field的这种格式的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_username</span>(<span class="params">self, field</span>):</span></span><br><span class="line">        <span class="comment"># 自定义用户表单验证，强制输入为手机号</span></span><br><span class="line">        username = field.data</span><br><span class="line">        pattern = <span class="string">r&#x27;1[1-9]&#123;10&#125;$&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.search(pattern, username):</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;用户名必须为手机号&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h2><ul><li>方式一：不使用wtf实现</li><li>方式二：使用FileField并添加验证</li></ul><p>文件名称格式化：<code>werkzeug.utils.secure_filename</code></p><h3 id="不使用wtf"><a href="#不使用wtf" class="headerlink" title="不使用wtf"></a>不使用wtf</h3><ol><li><p>设置<code>&lt;form&gt;</code>的enctype</p><p><code>enctype=&quot;multipart/form-data&quot;</code></p></li><li><p>在视图函数中获取文件对象</p><p><code>f = request.files</code></p></li><li><p>保存文件</p><p><code>f.save(file_path)</code></p></li></ol><p>app.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, url_for, request</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> secure_filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file_upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_upload</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前温江路径，获得相对的存放上传文件的文件夹路径</span></span><br><span class="line">    media_path = os.path.join(os.path.dirname(__file__), <span class="string">&#x27;medias&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 获取文件对象，字典格式</span></span><br><span class="line">        file = request.files[<span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file:</span><br><span class="line">            <span class="comment"># 格式化文件名（主要是将文件名中的空格用下划线代替）</span></span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            file_path = os.path.join(media_path, filename)</span><br><span class="line">            <span class="comment"># 保存文件</span></span><br><span class="line">            file.save(file_path)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;file_upload.html&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;file_upload&#x27;) &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&#x27;submit file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于文件目录可以在项目顶部配置：</p><p><code>app.config[&#39;UPLOAD_PATH&#39;]=os.path.join(os.path.dirname(__file__), &#39;medias&#39;)</code></p><p>在url中就可以通过<code>app.config[&#39;UPLOAD_PATH&#39;]</code>调取项目路径</p><h3 id="使用FileField并图片验证"><a href="#使用FileField并图片验证" class="headerlink" title="使用FileField并图片验证"></a>使用FileField并图片验证</h3><p><code>FileRequired</code>、<code>FileAllowed</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> flask_wtf.file <span class="keyword">import</span> FileField, FileRequired, FileAllowed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAvtarForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">avatar = FileField(label=<span class="string">&#x27;上传头像&#x27;</span>, validators=[</span><br><span class="line">        FileRequired(<span class="string">&#x27;请选择图片文件&#x27;</span>), </span><br><span class="line">        FileAllowed([<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>],<span class="string">&#x27;格式不支持&#x27;</span>)</span><br><span class="line">    ])</span><br></pre></td></tr></table></figure><p>添加路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file_upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_upload</span>():</span></span><br><span class="line">    form = UserAvatarForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        avatar = form.avatar.data</span><br><span class="line">        <span class="comment"># 格式化文件名（主要是将文件名中的空格用下划线代替）</span></span><br><span class="line">        filename = secure_filename(avatar.filename)</span><br><span class="line">        file_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_PATH&#x27;</span>], filename)</span><br><span class="line">        avatar.save(file_path)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;file_upload.html&#x27;</span>, form=<span class="keyword">from</span>)</span><br></pre></td></tr></table></figure><p>模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;file_upload&#x27;) &#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    &#123;&#123; form.avatar &#125;&#125;</span><br><span class="line">    &#123;#  显示图片验证未通过的错误 #&#125;</span><br><span class="line">    &#123;% for err in form.avatar.errors %&#125;</span><br><span class="line">        &#123;&#123; err &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&#x27;submit file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="flask%E8%A1%A8%E5%8D%95%E4%BB%8B%E7%BB%8D/html.png" alt="html"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Jinja2 </tag>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python使用openpyxl操作excel</title>
      <link href="/2020/10/05/python-openpyxl/"/>
      <url>/2020/10/05/python-openpyxl/</url>
      
        <content type="html"><![CDATA[<p>使用Python的openpyxl库操作Excel</p><p>在获得实验Hf同位素数据后，需要自己手动复制粘贴提取出来太麻烦了，所以就想到了python的强大的第三方库，借此机会学一下python操作excel表格。</p><p>首先要有openpyxl库,这里使用的是3.0版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure><blockquote><p>该模块支持最新版的Excel文件格式，对Excel文件具有响应的读写操作，对此有专门的Reader和Writer两个类，便于对Excel文件的操作。也可以直接用workbook来进行操作。openpyxl的官方文档地址：<a href="https://openpyxl.readthedocs.io/en/stable/">https://openpyxl.readthedocs.io/en/stable/</a></p></blockquote><p>写入excel：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="keyword">from</span> openpyxl.utils <span class="keyword">import</span> get_column_letter</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line"></span><br><span class="line">dest_filename = <span class="string">&#x27;empty_book.xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建名为‘range names’的sheet,添加39行数据每行0-599</span></span><br><span class="line">ws1 = wb.active</span><br><span class="line">ws1.title = <span class="string">&quot;range names&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">40</span>):</span><br><span class="line">    ws1.append(<span class="built_in">range</span>(<span class="number">600</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 新建名为‘Pi’的sheet，给F5表格写入3.14</span></span><br><span class="line">ws2 = wb.create_sheet(title=<span class="string">&quot;Pi&quot;</span>)</span><br><span class="line"></span><br><span class="line">ws2[<span class="string">&#x27;F5&#x27;</span>] = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建‘Data’sheet,在指定区域放入对应列名的数据</span></span><br><span class="line">ws3 = wb.create_sheet(title=<span class="string">&quot;Data&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line">     <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>, <span class="number">54</span>):</span><br><span class="line">         ws3.cell(column=col, row=row, value=<span class="string">&quot;&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(get_column_letter(col)))</span><br><span class="line">        </span><br><span class="line">wb.save(filename = dest_filename)</span><br></pre></td></tr></table></figure><p>读取已存在的表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line">wb = load_workbook(filename = <span class="string">&#x27;empty_book.xlsx&#x27;</span>)</span><br><span class="line">sheet_ranges = wb[<span class="string">&#x27;range names&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(sheet_ranges[<span class="string">&#x27;D18&#x27;</span>].value)</span><br></pre></td></tr></table></figure><h2 id="实战提取实验数据"><a href="#实战提取实验数据" class="headerlink" title="实战提取实验数据"></a>实战提取实验数据</h2><p>直接上代码，注释中解释具体用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hf_data</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用于读取/写入excel中的Hf同位素数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, work_path, data_file, i</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param work_path: 数据所在的工作文件夹</span></span><br><span class="line"><span class="string">        :param data_file: 待写入文件</span></span><br><span class="line"><span class="string">        :param i: 写入hf数据编号</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.work_path = work_path</span><br><span class="line">        self.data_file = data_file</span><br><span class="line">        self.i = i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># listdir获取工作文件夹下的所有文件名，返回列表</span></span><br><span class="line">        hf_data_filename = os.listdir(self.work_path)[self.i]</span><br><span class="line">        <span class="keyword">return</span> hf_data_filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 去掉后缀的文件名，用于填写数据编号</span></span><br><span class="line">        <span class="keyword">return</span> self.get_file_name()[:-<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param i: 数据文件在文件夹中的位置</span></span><br><span class="line"><span class="string">        :return: 数据列表</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hf_data_filename = self.get_file_name()</span><br><span class="line">        sheet_name = self.get_data_name()</span><br><span class="line">        <span class="comment"># 拼接数据文件路径</span></span><br><span class="line">        file_path = os.path.join(self.work_path, hf_data_filename)</span><br><span class="line">        <span class="comment"># 加载数据文件，data_only表示只读取数值，sheet_name是数据编号</span></span><br><span class="line">        hf_data = openpyxl.load_workbook(file_path, data_only=<span class="literal">True</span>)[sheet_name]</span><br><span class="line">        aim_row = hf_data.max_row-<span class="number">8</span></span><br><span class="line">        <span class="comment"># [&#x27;A1&#x27;]等价于 sheet.cell(row=int,column=int)</span></span><br><span class="line">        <span class="keyword">return</span> hf_data[<span class="string">&#x27;P&#123;&#125;:R&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(aim_row,aim_row+<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将数据写入新xlsx文件</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        hf_data = self.get_data()</span><br><span class="line">        hf_file = self.data_file</span><br><span class="line">        hf_file[<span class="string">&#x27;A&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = self.get_data_name()</span><br><span class="line">        hf_file[<span class="string">&#x27;B&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">0</span>][<span class="number">0</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;D&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">0</span>][<span class="number">1</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;F&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">0</span>][<span class="number">2</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;C&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">4</span>][-<span class="number">3</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;E&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">4</span>][-<span class="number">2</span>].value</span><br><span class="line">        hf_file[<span class="string">&#x27;G&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.i+<span class="number">1</span>)] = hf_data[<span class="number">4</span>][-<span class="number">1</span>].value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    work_path = <span class="string">&#x27;H:\ZHONGYEDING 20191222&#x27;</span></span><br><span class="line">    <span class="comment"># 这里用的是原有excel文件打开 写入</span></span><br><span class="line">    data_file = openpyxl.load_workbook(<span class="string">&#x27;hf.xlsx&#x27;</span>)</span><br><span class="line">    data_sheet = data_file[<span class="string">&#x27;Sheet&#x27;</span>]</span><br><span class="line">    <span class="comment"># 循环写入数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(os.listdir(work_path))):</span><br><span class="line">        hf = Hf_data(work_path=work_path, data_file=data_sheet, i=i)</span><br><span class="line">        hf.write_data()</span><br><span class="line">    data_file.save(filename=<span class="string">&#x27;hf.xlsx&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> openpyxl </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask之ORM的介绍与项目实战</title>
      <link href="/2020/10/03/flask-ORM/"/>
      <url>/2020/10/03/flask-ORM/</url>
      
        <content type="html"><![CDATA[<p>Flask ORM的介绍与项目实战</p><h2 id="Flask-SQLAlchemy介绍"><a href="#Flask-SQLAlchemy介绍" class="headerlink" title="Flask-SQLAlchemy介绍"></a>Flask-SQLAlchemy介绍</h2><p>pip安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Flask-SQLAlchemy</span><br></pre></td></tr></table></figure><p>源码安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/">https://flask-sqlalchemy.palletsprojects.com/en/2.x/</a></p><p><a href="https://www.sqlalchemy.org/">https://www.sqlalchemy.org/</a></p><h3 id="Flask-SQLAIchemy配置"><a href="#Flask-SQLAIchemy配置" class="headerlink" title="Flask-SQLAIchemy配置"></a>Flask-SQLAIchemy配置</h3><p><strong>数据库URI</strong><br><code>SQLALCHEMY_DATABASE_URI</code></p><p>URI参数格式：<br>Postgres:<br><code>postgresql://username:password@127.0.0.1/mydatabase</code><br>MySQL:<br><code>mysql://username:password@127.0.0.1/mydatabase</code><br>Oracle:<br><code>oracle://usernname:password@127.0.0.1/mydatabase</code><br>SQLite:<br><code>sqlite:////absolute/path/to/foo.db</code></p><p><strong>多个数据库支持</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SQLALCHEMY_BINDS = &#123;</span><br><span class="line"><span class="string">&#x27;db1&#x27;</span>: <span class="string">&#x27;mysqldb://localhost/user&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;db2&#x27;</span>: <span class="string">&#x27;sqlite:////path/to/appmeta.db&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如 flask中配置mysql数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 配置数据库的连接参数</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:960423@127.0.0.1/flasker&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="使用ORM进行CURD操作"><a href="#使用ORM进行CURD操作" class="headerlink" title="使用ORM进行CURD操作"></a>使用ORM进行CURD操作</h2><h3 id="设计数据库模型并创建表"><a href="#设计数据库模型并创建表" class="headerlink" title="设计数据库模型并创建表"></a>设计数据库模型并创建表</h3><p>绑定到Flask对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><p>ORM模型创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line"><span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>指定表的名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__tablename__ = <span class="string">&#x27;mall_product&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="创建和删除表"><a href="#创建和删除表" class="headerlink" title="创建和删除表"></a>创建和删除表</h4><ul><li><p>手动创建数据库</p></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; db.create_all()</span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; db.drop_all()</span><br></pre></td></tr></table></figure></li></ul><h4 id="ORM模型字段类型支持"><a href="#ORM模型字段类型支持" class="headerlink" title="ORM模型字段类型支持"></a>ORM模型字段类型支持</h4><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>Integer/Float</td><td>整型/浮点类型</td></tr><tr><td>String(size)</td><td>有长度限制的字符串</td></tr><tr><td>Text</td><td>一些较长的文本（如：通知详情、商品详情）</td></tr><tr><td>Date Time</td><td>表示为Python datetime 对象的 时间和日期</td></tr><tr><td>Boolean</td><td>存储为布尔值</td></tr><tr><td>PickleType</td><td>存储为一个持久化的Python对象</td></tr><tr><td>LargeBinary</td><td>存储一个任意大的二进制数据</td></tr></tbody></table><ul><li><p>一对多关系，外键关联。relation</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">address = db.relationship(<span class="string">&#x27;UserAddress&#x27;</span>,backref=db.backref(<span class="string">&#x27;person&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>多对多关系(建议使用Table实现，不建议使用Model)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags = db.Table(<span class="string">&#x27;mall_product_tags&#x27;</span>,</span><br><span class="line">db.Column(<span class="string">&#x27;tag_id&#x27;</span>,db.Integer,db.ForeignKey(<span class="string">&#x27;tag.id&#x27;</span>)),</span><br><span class="line">                db.Column(<span class="string">&#x27;product_id&#x27;</span>,db.Integer,db.ForeignKey(<span class="string">&#x27;Product.id&#x27;</span>))</span><br><span class="line">               )</span><br></pre></td></tr></table></figure></li></ul><p><strong>举例</strong>：先创建用户表和用户地址表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.ext.sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:password@127.0.0.1/flasker&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户基本信息表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;flask_user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    birthday = db.Column(db.Date, nullable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户地址表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;flask_user_address&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    addr = db.Column(db.String(<span class="number">64</span>), nullable=<span class="literal">True</span>)</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;flask_user.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 关联的是表的类名</span></span><br><span class="line">    user = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;address&#x27;</span>, lazy=<span class="string">&#x27;select&#x27;</span>))</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from app import db</span><br><span class="line">&gt;&gt;&gt; db.create_all()</span><br></pre></td></tr></table></figure><p>如果中途报错<code>ModuleNotFoundError: No module named &#39;MySQLdb&#39;</code>,说明缺少Python操作数据库的模块可以通过安装包解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure><h3 id="插入-修改-删除数据"><a href="#插入-修改-删除数据" class="headerlink" title="插入/修改/删除数据"></a>插入/修改/删除数据</h3><h4 id="新增-修改数据"><a href="#新增-修改数据" class="headerlink" title="新增/修改数据"></a>新增/修改数据</h4><ul><li><p>构造ORM模型对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User(<span class="string">&#x27;amdin&#x27;</span>,<span class="string">&#x27;admin@exmaple.com&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加到db.session (备注：可添加多个对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.add(user)</span><br></pre></td></tr></table></figure></li><li><p>提交到数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure></li></ul><h4 id="物理删除数据"><a href="#物理删除数据" class="headerlink" title="物理删除数据"></a>物理删除数据</h4><ul><li><p>查询ORM 模型对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user = User.query.filter_by(username=<span class="string">&#x27;zhangshan&#x27;</span>).first()</span><br></pre></td></tr></table></figure></li><li><p>添加到db.session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.delete(user)</span><br></pre></td></tr></table></figure></li><li><p>提交到数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用ORM查询并展示数据"><a href="#使用ORM查询并展示数据" class="headerlink" title="使用ORM查询并展示数据"></a>使用ORM查询并展示数据</h3><h4 id="ORM-查询"><a href="#ORM-查询" class="headerlink" title="ORM 查询"></a>ORM 查询</h4><ul><li><p>返回结果集(list)</p><ul><li><p>查询所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure></li><li><p>按条件查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.query.filter_by(username=<span class="string">&#x27;giao&#x27;</span>)</span><br><span class="line">User.query.<span class="built_in">filter</span>(User.username.endswith(<span class="string">&#x27;o&#x27;</span>)).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.order_by(User.username)</span><br></pre></td></tr></table></figure></li><li><p>查询TOP10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.limit(<span class="number">10</span>).<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>返回单个ORM对象</p><ul><li><p>根据pk查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.get(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>查询第一条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.first()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>视图快捷函数：有则返回，无则返回404</p><p><code>first()</code>vs<code>first_or_404()</code></p><p><code>get()</code>vs<code>get_or_404()</code></p></li><li><p>多表关联查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.session.query(User).join(Address)</span><br><span class="line">User.query.join(Address)</span><br></pre></td></tr></table></figure></li></ul><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><ol><li><p>使用offset 和limit</p><p><code>.offset(offset).limit(limit)</code></p></li><li><p>paginate分页支持</p><p><code>.paginate(page=2,per_page=4)</code> 返回Pagination对象</p></li></ol><p><code>has_prev/has_next</code>——是否有上一页/下一页</p><p><code>iter_pages()</code>——当前页的数据列表</p><p><code>prev_num/next_num</code>——上一页/下一页页码</p><p><code>total</code>——总记录数</p><p><code>pages</code>——总页数</p><h4 id="结合模板实现分页"><a href="#结合模板实现分页" class="headerlink" title="结合模板实现分页"></a>结合模板实现分页</h4><ol><li><p>准备数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_user = User.query.filter_by(is_valid=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_user.paginate(page=<span class="number">2</span>,per_page=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li><li><p>在模板中实现分页操作</p></li></ol><p>举例分页展示数据库用户表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 配置数据库的连接参数</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:password@127.0.0.1/flasker&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户基本信息表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;flask_user&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    password = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    birthday = db.Column(db.Date, nullable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户地址表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;flask_user_address&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    addr = db.Column(db.String(<span class="number">64</span>), nullable=<span class="literal">True</span>)</span><br><span class="line">    user_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;flask_user.id&#x27;</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 关联的是表的类名</span></span><br><span class="line">    user = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=db.backref(<span class="string">&#x27;address&#x27;</span>, lazy=<span class="string">&#x27;select&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;int:page&gt;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_list</span>(<span class="params">page</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 分页器的使用 &quot;&quot;&quot;</span></span><br><span class="line">    page_size = <span class="number">5</span></span><br><span class="line">    page_data = User.query.paginate(page=page, per_page=page_size)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;user_list.html&#x27;</span>, page_data=page_data, page=page)</span><br></pre></td></tr></table></figure><p>user_list.html:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;共有&#123;&#123; page_data.total &#125;&#125;个用户，&#123;&#123; page_data.pages &#125;&#125;页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;当前是第&#123;&#123; page &#125;&#125;页&lt;/h3&gt;</span><br><span class="line">    &#123;% for user in page_data.items %&#125;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;username: &#123;&#123; user.username &#125;&#125;, password: &#123;&#123; user.password &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    &#123;% if page_data.has_prev %&#125;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(&#x27;user_list&#x27;,page=page_data.prev_num) &#125;&#125;&quot;&gt;上一页&lt;/a&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% if page_data.has_next %&#125;</span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(&#x27;user_list&#x27;,page=page_data.next_num) &#125;&#125;&quot;&gt;下一页&lt;/a&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><img src="flask-ORM/image-20201003203249331.png" alt="image-20201003203249331" style="zoom:50%;" /><h2 id="实践：创建商城模型"><a href="#实践：创建商城模型" class="headerlink" title="实践：创建商城模型"></a>实践：创建商城模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid <span class="keyword">as</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:password@127.0.0.1/flasker&#x27;</span></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品标签表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;product_tag&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    uid = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>, default=uuid.uuid4, unique=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    desc = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">    is_valid = db.Column(db.Boolean, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = db.Column(db.DateTime)</span><br><span class="line">    update_time = db.Column(db.DateTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductClass</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品分类表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;product_class&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    uid = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>, default=uuid.uuid4, unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 对应父类 一对多关系</span></span><br><span class="line">    parent_class = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;product_class.id&#x27;</span>))</span><br><span class="line">    name = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    desc = db.Column(db.Text)</span><br><span class="line">    img = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    is_valid = db.Column(db.Boolean, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = db.Column(db.DateTime)</span><br><span class="line">    update_time = db.Column(db.DateTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品表 &quot;&quot;&quot;</span></span><br><span class="line">    __tablename__ = <span class="string">&#x27;product&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    uid = db.Column(db.String(<span class="number">128</span>), nullable=<span class="literal">False</span>, default=uuid.uuid4, unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 商品名称</span></span><br><span class="line">    name = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    desc = db.Column(db.Text, nullable=<span class="literal">False</span>)</span><br><span class="line">    img = db.Column(db.String(<span class="number">256</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    storage = db.Column(db.Integer, default=<span class="number">0</span>)</span><br><span class="line">    view_count = db.Column(db.Integer, default=<span class="number">0</span>)</span><br><span class="line">    score = db.Column(db.Float(precision=<span class="number">2</span>))</span><br><span class="line">    price = db.Column(db.Float(precision=<span class="number">2</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    origin_price = db.Column(db.Float(precision=<span class="number">2</span>))</span><br><span class="line">    <span class="comment"># 外键关联</span></span><br><span class="line">    tag = db.relationship(<span class="string">&#x27;Tag&#x27;</span>, backref=<span class="string">&#x27;product&#x27;</span>, lazy=<span class="literal">True</span>)</span><br><span class="line">    p_class = db.relationship(<span class="string">&#x27;ProductClass&#x27;</span>, backref=<span class="string">&#x27;product&#x27;</span>, lazy=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    is_valid = db.Column(db.Boolean, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = db.Column(db.DateTime)</span><br><span class="line">    update_time = db.Column(db.DateTime)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品与标签、分类之间的多对多关系</span></span><br><span class="line">tags = db.Table(<span class="string">&#x27;tags&#x27;</span>,</span><br><span class="line">                db.Column(<span class="string">&#x27;tag_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product_tag.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">                db.Column(<span class="string">&#x27;product_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product.id&#x27;</span>), primary_key=<span class="literal">True</span>))</span><br><span class="line">p_class = db.Table(<span class="string">&#x27;class&#x27;</span>,</span><br><span class="line">                   db.Column(<span class="string">&#x27;class_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product_class.id&#x27;</span>), primary_key=<span class="literal">True</span>),</span><br><span class="line">                   db.Column(<span class="string">&#x27;product_id&#x27;</span>, db.Integer, db.ForeignKey(<span class="string">&#x27;product.id&#x27;</span>), primary_key=<span class="literal">True</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 实战 </tag>
            
            <tag> Flask </tag>
            
            <tag> Jinja2 </tag>
            
            <tag> SQLAlchemy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络2之网络层</title>
      <link href="/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
      <url>/2020/09/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>TCP/IP四层模型（应用层、传输层、网络层、网络接口层）之网络层</p><p>前面讲到数据链路层只能解决相邻物理节点传输的问题，而网络层能解决跨节点传输的问题。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200902200857189.png" alt="image-20200902200857189"></p><h2 id="IP协议详解"><a href="#IP协议详解" class="headerlink" title="IP协议详解"></a>IP协议详解</h2><h3 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h3><p>实际的计算机网络是错综复杂的，物理设备通过使用IP协议，屏蔽了物理网络之间的差异，当网络中的主机使用IP协议连接时，则无需关注网络细节。这就是<strong>虚拟互连网络</strong>的概念</p><ul><li><p>IP协议使得复杂的实际网络变为一个虚拟互连的网络</p></li><li><p>IP协议使得网络层可以屏蔽底层细节而专注网络层的数据转发</p></li><li><p>IP协议<font color='red'>解决了在虚拟网络中数据传输路径的问题</font></p></li></ul><h3 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h3><p>MAC地址是不可改变的，IP地址根据网络环境发生变化。</p><ul><li>IP地址长度为32位，常分为4个8位</li><li>IP地址常使用点分十进制来表示</li></ul><p>这样的IP地址可以有2<sup>32</sup>个</p><p>前面提到，数据传输对于物理层来说传输的是01…这样的比特流，对于数据链路层，传输的是<strong>数据帧</strong>，而其中出去帧首尾部以外，帧数据里面就是<strong>IP数据报</strong>的内容了</p><p><strong>IP数据报</strong>分为IP首部和IP数据报的数据</p><p>下表就是IP协议中IP首部的具体内容，每一行都是32位（4个字节），前五行就是IP协议头部的内容，所以对于IP头部至少有20个字节大小：</p><img src="计算机网络之网络层/image-20200906142941406.png" alt="image-20200906142941406" style="zoom: 50%;" /><p><strong>版本</strong>：占4位，指的是IP协议的版本，通信双方的版本必须一致，有IPv4、IPv6。</p><p><strong>首部长度</strong>：占4位，最大数值为15，表示的是IP首部长度，单位是“32位字“（4个字节），也即是IP首部最大长度我60字节。</p><p><strong>总长度</strong>：占16位，最大数值为65535（32位字），表示的是IP数据报总长度（IP首部+IP数据）。之前的数据链路层知识中，最大传输单元<strong>MTU</strong>一般为1500个字节，存在总长度比MTU高的情况，把一个较长的IP数据报拆分成多个数据帧进行传输。</p><p><strong>标记</strong>：标记IP报文是否可以分片，目前只有2位有意义，IP数据报较长会进行分片处理</p><p><strong>片偏移</strong>：如果需要分片处理，用于记录当前数据帧保存的是第几个偏移的数据。</p><p><strong>TTL</strong>：占8位，表示IP数据报文在网络中的寿命，每经过一个设备TTL减1，当TTL=0时，网络设备必须丢弃该报文。避免数据被无限的传输而消耗带宽。</p><p><strong>协议</strong>：占8位，表明IP数据所携带的具体数据是什么协议的（如TCP、UDP等）</p><p>下列这些协议在使用ip协议进行传输的时候，都会附上各协议对应字段值。同时在ip协议中还可以继续封装ip协议</p><table><thead><tr><th>协议名</th><th>ICMP</th><th>IGMP</th><th><em>IP</em></th><th>TCP</th><th>UDP</th><th>OSPF</th><th>…</th></tr></thead><tbody><tr><td>字段值</td><td>1</td><td>2</td><td>4</td><td>6</td><td>17</td><td>89</td><td></td></tr></tbody></table><p><strong>首部校验和</strong>：占16位，校验IP首部是否有出错</p><p><strong>源IP地址</strong>：指示发送IP地址</p><h2 id="IP协议的转发流程"><a href="#IP协议的转发流程" class="headerlink" title="IP协议的转发流程"></a>IP协议的转发流程</h2><h3 id="路由表简介"><a href="#路由表简介" class="headerlink" title="路由表简介"></a>路由表简介</h3><p><strong>逐跳（hop-by-hop)</strong>: 就是发出的ip报文从各个网络、路由器最后到接收设备的过程</p><p><strong>路由表简介</strong></p><p>在单个路由表中，根据MAC地址寻找对应接口的过程：</p><ol><li>A通过网卡发出数据帧</li><li>数据帧到达路由器，路由器取出前6字节</li><li>路由器匹配MAC地址表，找到对应的网络接口</li><li>路由器往该网络接口发送数据帧</li></ol><p>而在通过<strong>路由表</strong>，我们可以在逐跳过程中找到目的IP地址对应的下一跳的IP地址</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200906220623339.png" alt="image-20200906220623339"></p><p>计算机或者路由器都拥有路由表</p><h3 id="IP协议的转发流程-1"><a href="#IP协议的转发流程-1" class="headerlink" title="IP协议的转发流程"></a>IP协议的转发流程</h3><img src="计算机网络之网络层/image-20200906220946384.png" alt="image-20200906220946384" style="zoom:50%;" /><ul><li>A发出目的地为C的IP数据报，查询路由器表发现下一跳为E</li><li>A将数据报发送给E</li><li>E查询路由表发现下一跳为F，将数据报发送给F</li><li>F查询路由表发现目的地C直接连接，将数据报发送给C</li></ul><p><strong>将网络层与数据链路层结合起来看，该过程为：</strong></p><p><strong>A-路由E</strong>：</p><ul><li>A发出目的地为C的IP数据报，<font color='red'>查询路由表发现下一跳为E</font></li><li>A将IP数据报<font color='red'>交给数据链路层，并告知目的MAC地址是E</font></li><li>数据链路层<font color='red'>填充源MAC地址</font>和<font color='red'>目的MAC地址E</font></li><li>数据链路层通过物理层将数据发送给E</li></ul><p><strong>路由E-路由F</strong>：</p><ul><li>E的数据链路层收到数据帧，<font color='red'>把数据交给网络层</font></li><li>E<font color='red'>查询路由表，发现下一跳为F</font></li><li>E<font color='red'>把数据交给数据链路层，并告知目的MAC地址为F</font></li><li>E的数据链路层<font color='red'>封装数据帧并发送</font></li></ul><p><strong>路由F-C</strong>：</p><ul><li>F的数据链路层接收到数据帧，<font color='red'>把帧数据交给网络层</font></li><li>F<font color='red'>查询路由表，发现下一跳为C</font></li><li>F<font color='red'>把数据交给数据链路层，并告知目的MAC地址为C</font></li><li>F的数据链路层<font color='red'>封装数据帧并发送</font></li></ul><p>值得注意的是：</p><p><strong>数据帧的每一跳MAC地址都在变化</strong>，因为发送端开始不知道目的主机的MAC地址，所以没经过一个路由MAC地址是在变化的。</p><p><strong>IP数据报每一跳的IP地址始终不变</strong>。路由器只是在接收到数据报时候，检查数据报的目的IP地址，然后查找路由表，选择合适的接口发送出去。</p><h2 id="IP地址的子网划分"><a href="#IP地址的子网划分" class="headerlink" title="IP地址的子网划分"></a>IP地址的子网划分</h2><h3 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h3><p>如果对42亿多个ip地址进行分类的话十分复杂，则需要先把ip地址进一步划分为两个部分，网络号和主机号，加起来为32位。</p><p>A类地址：网络号8位，主机号24位；B类地址：网络号16位，主机号16位；C类地址：网络号24位，主机号8位。</p><p>注意：<font color='red'>根据网络号的前几位判断，比如A类是0开头，B类是10开头</font></p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20200913131127092.png" alt="image-20200913131127092"></p><table><thead><tr><th></th><th>最小网络号</th><th>最大网络号</th><th>子网数量</th><th>最小主机号</th><th>最大主机号</th><th>主机数量</th></tr></thead><tbody><tr><td>A</td><td>0（00000000）</td><td>127（01111111）</td><td>2^7</td><td>0.0.0</td><td>255.255.255</td><td>2^24</td></tr><tr><td>B</td><td>128.0</td><td>192.255</td><td>2^14</td><td>0.0</td><td>255.255</td><td>2^16</td></tr><tr><td>C</td><td>192.0.0</td><td>223.255.255</td><td>2^21</td><td>0</td><td>255</td><td>2^8</td></tr></tbody></table><p><strong>特殊主机号</strong></p><ul><li><p>主机号全0表示当前网络段，不可分配为特定主机</p><p>例如1.0.0.0（主机号全为0）表示A类地址的网路段</p></li><li><p>主机号为全1表示广播地址，向当前网络段所有主机发消息</p><p>例如1.255.255.255，如果往这个地址发送信息的话，会广播给所有当前网络段的所有主机</p></li></ul><p><strong>特殊的网络号</strong></p><ul><li>A类地址网路段0(00000000)表示特殊网络</li><li>A类地址网络段后7位全1(01111111:127)表示回环地址</li><li>B类地址网络段(10000000.00000000:128.0)是不可使用的</li><li>C类地址网络段(192.0.0)是不可使用的</li></ul><p>出去这些特殊网络号和主机号之后</p><img src="计算机网络之网络层/QQ拼音截图20201010203015.png" alt="QQ拼音截图20201010203015" style="zoom:60%;" /><blockquote><p>127.0.0.1，通常被称为本地回环地址(Loopback Address)，不属于任何一个有类别地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会宕掉的接口。在Windows操作系统中也有相似的定义，所以通常在安装网卡前就可以ping通这个本地回环地址。一般都会用来检查本地网络协议、基本数据接口等是否正常的。</p></blockquote><p>另外D类地址网络号前几位为1110……;E类地址网络号1111……</p><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><p><strong>假设某公司拥有256名员工，没人配备一个计算机，请问该公司应该申请哪种网路段？</strong></p><p>答：只能分配B类地址，比如分配192.17.0.0这个网络段，有2^16-2个主机号/ip地址</p><p>但是会造成很大的地址空间浪费，因此提出了<strong>子网划分</strong>的概念</p><p>把ip地址分为网路号、子网号、主机号</p><p>比如将193.10.10.0分为两个子网：最后八位主机号分别是.00000000和.10000000。即193.10.10.0<del>193.10.10.127和193.10.10.128</del>193.10.10.255，每个子网有128个ip地址</p><p><strong>子网号这么多人，有没有办法快速判断某个IP的网络号？</strong></p><p><strong>子网掩码</strong></p><blockquote><p>子网掩码(subnet mask)又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分。</p></blockquote><ul><li>子网掩码和IP地址一样，都是32位</li><li>子网掩码由连续的1和连续的0组成</li><li>某一个子网的子网掩码具备网络号位数个连续的1</li></ul><p>所以A类地址的子网掩码是255.0.0.0；B类地址的是255.255.0.0；C类地址的是255.255.255.0</p><p>通过ip与其子网掩码可以快速得到该ip地址的网络号</p><img src="计算机网络之网络层/QQ拼音截图20201010211843.png" alt="QQ拼音截图20201010211843" style="zoom:60%;" /><p>例如一个ip地址为193.10.10.6，其子网掩码为255.255.255.128，将他们转换为二进制，做<strong>AND运算</strong>，得到二进制的网络号，其网络号为193.10.10.0</p><p>假设一个ip为193.10.10.129，子网掩码为255.255.255.128，其网络号为？</p><p>答：193.10.10.128</p><p>内网通信问题：</p><p>如果两个ip在同一个网络号下，就可以实现内网通信。</p><h3 id="无分类编址CIDR"><a href="#无分类编址CIDR" class="headerlink" title="无分类编址CIDR"></a>无分类编址CIDR</h3><ul><li><p>CIDR中没有A\B\C类网络号，和子网划分的概念</p></li><li><p>CIDR将网络前缀相同的IP地称为一个“CIDR地址块”</p><p>将ip地址分为<strong>网络前缀</strong>和主机号，网络前缀是任意位数的</p></li></ul><p>CIDR使用斜线记法</p><p>例如193.10.10.129/25 表明其网络前缀有25位，主机号7位。其他前缀长度有13,14,15,16…等</p><p>CIDR除去网络前缀的概念外，其他的子网掩码等性质与前面一致，其相比原来子网划分更加灵活，目前较为通用。</p><h2 id="网络地址转换NAT技术"><a href="#网络地址转换NAT技术" class="headerlink" title="网络地址转换NAT技术"></a>网络地址转换NAT技术</h2><p>内网地址：内部机构使用；避免与外网地址重复</p><p>外网地址：网球范围使用；全球公网唯一</p><p>三类内网地址：</p><ul><li>10.0.0.0~10.255.255.255(支持千万数量级设备)</li><li>172.16.0.0~172.31.255.255(支持百万数量级设备)</li><li>192.168.0.0~192.168.255.255(支持万数量级设备)</li></ul><p>当内网多个设备使用同一个外网IP请求外网的服务，外部怎么知道具体是哪个设备在请求的？</p><p>此时需要使用网络地址转换NAT(Network Address Translation)，NAT技术用于多个主机通过一个公有IP访问互联网的私有网络中；</p><p>NAT技术减缓了IP地址的损耗，但是增加了网络通信的复杂度</p><img src="计算机网络之网络层/QQ拼音截图20201016145019.png" alt="QQ拼音截图20201016145019" style="zoom:60%;" /><p>举例：当内网设备192.168.2.11进程与外网某目的计算机进行通信时使用到了NAT技术（路由器的外网IP地址为173.21.59.10）：</p><p>192.168.2.11:6666进程通过NAT技术转化为新的地址和端口号然后发送到网络中去。接收数据也是这一过程。</p><p>这个映射表就成为NA(P)T表</p><h2 id="ICMP协议详解"><a href="#ICMP协议详解" class="headerlink" title="ICMP协议详解"></a>ICMP协议详解</h2><p>网际控制报文协议（Internet Control Message Protocal）</p><p>ICMP协议可以报告错误信息或者异常情况</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20201016150645.png" alt="QQ拼音截图20201016150645"></p><p>ICMP报文数据包含8位类型8位代码和16位校验和</p><p>如果ip协议传输的是ICMP数据的话，将会在IP首部中的8位协议写入1</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20201016151046.png" alt="QQ拼音截图20201016151046"></p><p>报文种类：差错报告报文和询问报文</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20201016151307.png" alt="QQ拼音截图20201016151307"></p><p>举例：如果一个计算机和另一个已关机的计算机通信，此时就会返回ICMP代码为1，类型为3的报文</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20201016151718.png" alt="QQ拼音截图20201016151718"></p><h2 id="ICMP协议的应用"><a href="#ICMP协议的应用" class="headerlink" title="ICMP协议的应用"></a>ICMP协议的应用</h2><h3 id="Ping应用"><a href="#Ping应用" class="headerlink" title="Ping应用"></a>Ping应用</h3><p>ping这个命令返回的就是一种询问报文，报文类型为回送请求或应答</p><p>网络故障排查：</p><p>ping127.0.01可以检查本地协议或数据接口是否正常；ping网关地址（路由器地址192.168.1.1）检查与路由器的连接是否正常；ping远端地址 不通说明运营商问题</p><h3 id="Traceroute应用"><a href="#Traceroute应用" class="headerlink" title="Traceroute应用"></a>Traceroute应用</h3><p>Traceroute可以探测IP数据报在网络中走过的路径。原理是通过TTL不停增加1，返回ICMP协议<strong>终点不可达差错报文</strong>来确定每个经过的路径</p><p>可通过命令行查询 例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tracert rice-and-bran.site</span><br></pre></td></tr></table></figure><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20201016163314268.png" alt="image-20201016163314268"></p><h2 id="网络层的路由概述"><a href="#网络层的路由概述" class="headerlink" title="网络层的路由概述"></a>网络层的路由概述</h2><p>进行网络通信时候，通过路由表来查找下一跳地址，那么：</p><p>下一跳地址是怎么来的？下一跳地址是唯一的吗？下一跳地址是最佳的吗？</p><p>路由器是怎么协同工作的？</p><p>为了解决这些问题，需要一个好的路由算法。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/clip_image001.png" alt="img"></p><ul><li><p>每一顶点表示一个网络、路由器或者计算机</p></li><li><p>每一条边表示一条网络路劲</p></li></ul><p>路由算法实际上是图论的算法，但是网络环境复杂，又要比图论的算法要复杂！</p><p>一个好的路由算法需要满足：</p><ul><li><p>算法是正确的、完整的</p></li><li><p>算法在计算上应该尽可能的简单</p></li><li><p>算法可以适应网络中的变化</p></li><li><p>算法是稳定的和公平的</p></li></ul><p><strong>自治系统（Autonomous System）</strong>：一个自治系统是处于一个管理机构下的网络设备群；AS内部自行管理，AS对外提供一个或者多个出入口。</p><p>在之前提到的网络层次划分，每一个主干ISP或者地区ISP或者校园都可以理解为一个AS</p><p>自治系统内部路由的协议称为：内部网关协议（RIP、OSPF）</p><p>自治系统外部路由的协议称为：外部网关协议（BGP）</p><h2 id="内部网关路由协议之RIP协议"><a href="#内部网关路由协议之RIP协议" class="headerlink" title="内部网关路由协议之RIP协议"></a>内部网关路由协议之RIP协议</h2><h3 id="距离矢量（DV）算法"><a href="#距离矢量（DV）算法" class="headerlink" title="距离矢量（DV）算法"></a>距离矢量（DV）算法</h3><ul><li>每一个节点使用两个向量D<sub>i</sub>和S<sub>i</sub></li><li>D<sub>i</sub>描述的是当前节点到别的节点的距离</li><li>S<sub>i</sub>描述的是当前节点到别的节点的下一节点</li><li>每一个节点与相邻的节点交换D<sub>i</sub>和S<sub>i</sub>的信息</li><li><font color='red'>每一个节点根据交换的信息更新自己的节点信息</font></li></ul><h3 id="RIP协议的过程"><a href="#RIP协议的过程" class="headerlink" title="RIP协议的过程"></a>RIP协议的过程</h3><ul><li>RIP(Routing Information Protocol)协议，是使用DV算法的一种路由协议</li><li>RIP协议把网络的跳数(hop)作为DV算法的距离</li><li>RIP协议每隔30s交换一次路由信息</li><li>RIP协议认为跳数&gt;15的路由则为不可达路由</li></ul><ol><li>路由初始化路由信息(两个向量D<sub>i</sub>和S<sub>i</sub>)</li><li>对相邻路由器X发过来的信息，对信息的内容进行修改（下一跳地址设置为X，所有距离加1）<ol><li>检索本地路由，将信息中新的路由插入到路由表里面</li><li>检索本地路由，对于下一跳为X的，更新为修改后的信息</li><li>检索本地路由，对此相同目的的距离，如果信息的距离更小，则更新本地路由表</li></ol></li><li>如果3分钟没有收到路由信息，则把相邻路由设置为不可达（16跳）</li></ol><h3 id="RIP协议缺点"><a href="#RIP协议缺点" class="headerlink" title="RIP协议缺点"></a>RIP协议缺点</h3><p>故障信息传递慢：</p><p>过度依赖相邻路由信息，“视野不够广”，如果A宕机，B、C之间会反复查找，直到达到16跳。</p><img src="计算机网络之网络层/image-20201115104650763.png" alt="image-20201115104650763" style="zoom: 67%;" /><p>RIP协议优点是实现简单，开销很小，但是限制了网络的规模，“坏消息传的慢”，更新收敛时间过长</p><h2 id="Dijkstra-迪杰斯特拉-算法"><a href="#Dijkstra-迪杰斯特拉-算法" class="headerlink" title="Dijkstra(迪杰斯特拉)算法"></a>Dijkstra(迪杰斯特拉)算法</h2><p>Dijkstra(迪杰斯特拉)算法是准名的图算法，解决有权图从一个节点到其他节点的最短路径问题。</p><p>特点是“以起点为中心，向外层层扩展”</p><p>例如：</p><p>我们要从A到E，每两个节点之间距离已知，则可以有以下五条路径</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B9%8B%E7%BD%91%E7%BB%9C%E5%B1%82/image-20201129184837923.png" alt="image-20201129184837923"></p><p>算法实现过程：</p><p><em>1. 初始化两个集合(S,U)(S为只有初始顶点点A的集合，U为其他顶点集合)</em></p><p><em>2. 如果U不为空，对U集合顶点进行距离的排序，并取出距离A最近的一个顶点D</em></p><ul><li><em>将顶点D纳入S集合</em></li><li><em>更新A通过顶点D到达U集合所有点的距离（如果距离更小则更新，否则不更新）</em></li><li><em>重复2步骤</em></li></ul><p><em>3. 直到U集合为空，算法完成</em></p><h2 id="内部网关协议之OSPF协议"><a href="#内部网关协议之OSPF协议" class="headerlink" title="内部网关协议之OSPF协议"></a>内部网关协议之OSPF协议</h2><p>LS协议定义了内部网关的规则，OSPF协议用于实现该规则</p><h3 id="链路状态（LS）协议"><a href="#链路状态（LS）协议" class="headerlink" title="链路状态（LS）协议"></a>链路状态（LS）协议</h3><p>规则：</p><p>路由器向所有的相邻路由器发送信息，一传十，十传百。而RIP协议中只和相邻的路由器交换信息。</p><p>该协议的消息描述该路由器与相邻路由器的链路状态（包括距离、时延、带宽等），而前面的RIP协议只能交换并使用信息中的跳数</p><p>只有链路状态发生变化时，才发送更新信息</p><h3 id="OSPF协议的过程"><a href="#OSPF协议的过程" class="headerlink" title="OSPF协议的过程"></a>OSPF协议的过程</h3><p>OSPF(Open Shortest Path First: 开放最短路径优先)，核心是Dijkstra算法。</p><p>向所有路由器发送信息，实现”网络的完整拓扑”，也称”链路状态数据库“。然后通过Dijstra算法，每个路由器都能找到最短路径</p><p> 消息描述该路由器与相邻路由器的链路状态（包括距离、时延、带宽等），OSPF协议实现起来更客观更先进</p><p>只有链路状态发生变化时，才发送更新信息，减少了数据的交换，更快的收敛</p><p>OSPF协议的五种消息类型：</p><ul><li>问候消息</li><li>链路状态数据库描述信息</li><li>链路状态请求信息</li><li>链路状态更新信息</li><li>链路状态确认信息</li></ul><p>过程：1. 路由器接入网络 2. 路由器向邻居发出问候信息 3. 与邻居交流链路状态数据库 4.路由器广播和更新未知路由</p><p><strong>RIP对比OSPF</strong></p><table><thead><tr><th>RIP协议</th><th>OSPF协议</th></tr></thead><tbody><tr><td>从邻居看网络</td><td>整个网络的拓扑</td></tr><tr><td>在路由器之间累加距离</td><td>Dijstra算法计算最短路径</td></tr><tr><td>频繁、周期更新、收敛很慢</td><td>状态变化更新，收敛很快</td></tr><tr><td>路由间拷贝路由信息</td><td>路由间传递链路状态，自行计算路径</td></tr></tbody></table><h2 id="外部网关路由协议之BGP协议简述"><a href="#外部网关路由协议之BGP协议简述" class="headerlink" title="外部网关路由协议之BGP协议简述"></a>外部网关路由协议之BGP协议简述</h2><p>BGP（Border Gateway Protocol: 边际网关协议），是运行在AS(自治系统)之间的一种协议</p><p>外部网关使用BGP协议的原因：</p><ul><li>互联网规模很大，如果使用到“链路状态数据库”则十分庞大；</li><li>且AS内部之间使用不同的路由协议，无法直接兼容</li><li>AS之间需要考虑除网络特性之外的一些因素（政治、安全等）</li></ul><p>BGP协议因为很多其他的因素，能够找到一条到达目的地比较好的路由（不一定是最好的）</p><p>BGP发言人（speaker）：一般将AS边界路由器配置为BGP发言人。BGP并不关心内部网络拓扑，AS之间通过BGP发言人交流信息，BGP Speaker可以人为策略配置。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程问答基础篇2(更新中)</title>
      <link href="/2020/08/27/Python%E9%9D%A2%E8%AF%95/"/>
      <url>/2020/08/27/Python%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-def-func-a-b-这种写法有什么坑？"><a href="#1-def-func-a-b-这种写法有什么坑？" class="headerlink" title="1.def func(a,b=[]) 这种写法有什么坑？"></a>1.<code>def func(a,b=[])</code> 这种写法有什么坑？</h2><p>参数如果不填的话最好设置为None，而不要这样设置为空列表。因为函数在定义的时候b已经被赋值了，而列表是不可变类型，添加元素存储地址不发生改变，下面例子的func(2)结果中返回的列表显然还是第一次调用时候的列表，列表并没有重置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a,b=[]</span>):</span></span><br><span class="line">    b.append(a)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>)</span><br><span class="line">func(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1]</span></span><br><span class="line"><span class="string">[1,2]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-如何实现-“1-2-3”-变成-‘1’-’2’-’3’"><a href="#2-如何实现-“1-2-3”-变成-‘1’-’2’-’3’" class="headerlink" title="2.如何实现 “1,2,3” 变成 [‘1’,’2’,’3’] ?"></a>2.如何实现 “1,2,3” 变成 [‘1’,’2’,’3’] ?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&#x27;1,2,3&#x27;</span></span><br><span class="line">string.split(<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-如何实现-‘1’-’2’-’3’-变成-1-2-3"><a href="#3-如何实现-‘1’-’2’-’3’-变成-1-2-3" class="headerlink" title="3.如何实现[‘1’,’2’,’3’]变成[1,2,3] ?"></a>3.如何实现[‘1’,’2’,’3’]变成[1,2,3] ?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num_list = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]</span><br><span class="line">[<span class="built_in">int</span>(n) <span class="keyword">for</span> n <span class="keyword">in</span> num_list]</span><br></pre></td></tr></table></figure><h2 id="4-比较：a-1-2-3-和-b-1-2-3-以及-c-1-2-3-的区别？"><a href="#4-比较：a-1-2-3-和-b-1-2-3-以及-c-1-2-3-的区别？" class="headerlink" title="4.比较：a = [1,2,3] 和 b = [(1),(2),(3) ] 以及 c = [(1,),(2,),(3,) ] 的区别？"></a>4.比较：a = [1,2,3] 和 b = [(1),(2),(3) ] 以及 c = [(1,),(2,),(3,) ] 的区别？</h2><p>a和b里面的元素是一样的，c里面的元素是元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>] == b[<span class="number">0</span>] <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="5-如何用一行代码生成-1-4-9-16-25-36-49-64-81-100"><a href="#5-如何用一行代码生成-1-4-9-16-25-36-49-64-81-100" class="headerlink" title="5.如何用一行代码生成[1,4,9,16,25,36,49,64,81,100] ?"></a>5.如何用一行代码生成[1,4,9,16,25,36,49,64,81,100] ?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br></pre></td></tr></table></figure><h2 id="6-一行代码实现删除列表中重复的值"><a href="#6-一行代码实现删除列表中重复的值" class="headerlink" title="6.一行代码实现删除列表中重复的值 ?"></a>6.一行代码实现删除列表中重复的值 ?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num_list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">set</span>(num_list))</span><br></pre></td></tr></table></figure><h2 id="7-如何在函数中设置一个全局变量"><a href="#7-如何在函数中设置一个全局变量" class="headerlink" title="7.如何在函数中设置一个全局变量 ?"></a>7.如何在函数中设置一个全局变量 ?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># global关键字(内部作用域想要对外部作用域的变量进行修改)</span></span><br><span class="line"><span class="comment"># 首先外部要有被变量</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>()：</span></span><br><span class="line"><span class="function"><span class="title">global</span> <span class="title">a</span></span></span><br><span class="line"><span class="function">    <span class="title">a</span> = &#x27;<span class="title">wdnmd</span>&#x27;</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"># 调用之后，<span class="title">global</span>才会起作用    </span></span><br><span class="line"><span class="function"><span class="title">func</span>()</span></span><br><span class="line"><span class="function"><span class="title">print</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&quot;&quot;&quot;</span></span><br><span class="line"><span class="function"><span class="title">wdnmd</span></span></span><br><span class="line"><span class="function">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="8-logging模块的作用？以及应用场景？"><a href="#8-logging模块的作用？以及应用场景？" class="headerlink" title="8.logging模块的作用？以及应用场景？"></a>8.logging模块的作用？以及应用场景？</h2><p>日志模块，用来记录用户的行为 或者 代码执行的过程。作用:可以了解程序的运行情况是否正常,在程序出现故障快速定位出错地方以及故障分析。</p><blockquote><p><a href="https://www.jianshu.com/p/e539636ab854">https://www.jianshu.com/p/e539636ab854</a></p></blockquote><h2 id="9-请用代码简答实现stack-。"><a href="#9-请用代码简答实现stack-。" class="headerlink" title="9.请用代码简答实现stack 。"></a>9.请用代码简答实现stack 。</h2><blockquote><p>栈（stack）在计算机科学中是限定仅在表尾进行插入或删除操作的线性表。栈是一种数据结构，它按照后进先出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据。</p></blockquote><p>我们来通过list简单实现stack</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stack=[]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.stack.append(value)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.stack:</span><br><span class="line">            self.stack.pop()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> LookupError(<span class="string">&#x27;stack is empty&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_exsit</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bool</span>(self.stack)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 取出栈中的最新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="10-简述-生成器、迭代器、可迭代对象-以及应用场景？"><a href="#10-简述-生成器、迭代器、可迭代对象-以及应用场景？" class="headerlink" title="10.简述 生成器、迭代器、可迭代对象 以及应用场景？"></a>10.简述 生成器、迭代器、可迭代对象 以及应用场景？</h2><p><strong>生成器</strong>：</p><p>Python使用生成器对延迟操作提供了支持，所谓延迟操作，是指在需要的时候才产生结果，而不是立即产生结果。</p><p>比如我们要循环输出有规律的数组，我们可以计算一次，返回一次，这就是<strong>生成器</strong>，而不是一次性生成列表。</p><p>产生生成器的方法：</p><ol><li><p>生成器表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>generator_object = (x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>generator_object</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x000001A77EDB16D8</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>生成器函数</p><blockquote><p>和常规函数定义一样,但是返回语句return被yield语句代替了.yield语句一次返回一个结果,在每个结果中间,挂起函数的状态,以便下次从它离开的地方继续执行.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">generator_func</span>(<span class="params">n</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> i*i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>generator_func(<span class="number">10</span>)</span><br><span class="line">&lt;generator <span class="built_in">object</span> generator_func at <span class="number">0x000001A77EDB19A8</span>&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>自动实现迭代器协议:对于生成器,Python会自动实现它的可迭代协议,以便用在可以迭代的地方.所以我们可调用它的next方法,获取下一个元素,并且在没有值可以返回的时候,生成器会自动产生StopIteration异常</p></blockquote><p><strong>迭代器</strong>：</p><p>迭代器对象就是实现了<code>iter()</code> 和 <code>next()</code>方法的对象.其中<code>iter()</code>返回迭代器本身,而<code>next()</code>返回容器的下一个元素,在结尾处引发StopInteration异常.</p><p><code>ir=iter(itrable)</code>将一个可迭代对象转化为迭代器，<code>next(ir)</code>获取下迭代器中的下一个值。</p><p>可迭代对象就是可以转化为迭代器的对象，比如dict、tuple、list、str等。而且他们都可用作for循环，遵循可迭代协议。</p><h2 id="11-用Python实现一个二分查找的函数。"><a href="#11-用Python实现一个二分查找的函数。" class="headerlink" title="11.用Python实现一个二分查找的函数。"></a>11.用Python实现一个二分查找的函数。</h2><blockquote><p>二分查找又称折半查找，优点是比较次数少、查找速度快、平均性能好；其缺点是要求待查表为有序表，且插入删除困难，因此折半查找适用于不经常变动而查找频繁的有序序列。其算法思想是将表中中间位置记录的关键字与要查找的关键字比较，如果两者相等则查找成功，否则利用中间位置将表分成前、后两个子表。如果中间记录的关键字大于查找关键字，则进一步查找前一字表，否则进一步查找后一子表。重复以上过程，直到满足条件则查找成功，否则查找失败。</p></blockquote><p>算法实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span>(<span class="params">array, val</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        python二分查找，查找数值在有序列表中的位置，找到后返回在列表中顺序</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(array)</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = length+<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high):</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> val &lt; array[mid]:</span><br><span class="line">            high = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> val &gt; array[mid]:</span><br><span class="line">            low = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">    <span class="built_in">print</span>(binary_search(array, <span class="number">5</span>))</span><br><span class="line">    <span class="built_in">print</span>(binary_search(array, <span class="number">4</span>))</span><br><span class="line">    <span class="built_in">print</span>(binary_search(array, <span class="number">1</span>))</span><br><span class="line">    <span class="built_in">print</span>(binary_search(array, <span class="number">10</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12-谈谈你对闭包的理解？"><a href="#12-谈谈你对闭包的理解？" class="headerlink" title="12.谈谈你对闭包的理解？"></a>12.谈谈你对闭包的理解？</h2><blockquote><p>闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">origin</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closure</span>(<span class="params">y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> x+y</span><br><span class="line">    <span class="keyword">return</span> closure</span><br></pre></td></tr></table></figure><p>函数origin中返回的是函数closure，而函数closure对orign的x变量进行了引用，这就是闭包。闭包也是装饰器的原理</p><h2 id="13-os和sys模块的作用？"><a href="#13-os和sys模块的作用？" class="headerlink" title="13.os和sys模块的作用？"></a>13.os和sys模块的作用？</h2><p>Python 的 os 模块封装了常见的文件和目录操作</p><p>下面是部分常见的用法：</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">os.mkdir</td><td align="center">创建目录</td></tr><tr><td align="center">os.rmdir</td><td align="center">删除目录</td></tr><tr><td align="center">os.rename</td><td align="center">重命名</td></tr><tr><td align="center">os.remove</td><td align="center">删除文件</td></tr><tr><td align="center">os.getcwd</td><td align="center">获取当前工作路径</td></tr><tr><td align="center">os.walk</td><td align="center">遍历目录</td></tr><tr><td align="center">os.path.join</td><td align="center">连接目录与文件名</td></tr><tr><td align="center">os.path.split</td><td align="center">分割文件名与目录</td></tr><tr><td align="center">os.path.abspath</td><td align="center">获取绝对路径</td></tr><tr><td align="center">os.path.dirname</td><td align="center">获取路径</td></tr><tr><td align="center">os.path.basename</td><td align="center">获取文件名或文件夹名</td></tr><tr><td align="center">os.path.splitext</td><td align="center">分离文件名与扩展名</td></tr><tr><td align="center">os.path.isfile</td><td align="center">判断给出的路径是否是一个文件</td></tr><tr><td align="center">os.path.isdir</td><td align="center">判断给出的路径是否是一个目录</td></tr></tbody></table><blockquote><p>“sys”即“system”，“系统”之意。该模块提供了一些接口，用于访问 Python 解释器自身使用和维护的变量，同时模块中还提供了一部分函数，可以与解释器进行比较深度的交互。</p></blockquote><p>下面是部分常见的用法：</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">sys.argv</td><td align="center">展示调用python提供的命令行参数</td></tr><tr><td align="center">sys.platform</td><td align="center">运行的平台</td></tr><tr><td align="center">sys.executable</td><td align="center">解释器对应的绝对路径</td></tr><tr><td align="center">sys.getsizeof</td><td align="center">作用对象占用的字节数</td></tr></tbody></table><h2 id="14-Python面向对象中的继承有什么特点？"><a href="#14-Python面向对象中的继承有什么特点？" class="headerlink" title="14.Python面向对象中的继承有什么特点？"></a>14.Python面向对象中的继承有什么特点？</h2><p>提高代码的复用程度，避免重复操作</p><p>特点：</p><ol><li>在继承中基类的构造(<code>__init__()</code>方法)不会被自动调用，它需要在其派生类的构造中亲自专门调用。</li><li>在调用基类的方法时候，需要加上基类的类名前缀，且需要带上self参数变量。区别于在类中调用普通函数时候并不需要带上self参数</li><li>python总是首先札沼对应类型的方法，如果不能在派生类中找到对应的方法，它才开始到基类中逐个查找</li></ol><h2 id="15-面向对象深度优先和广度优先是什么？"><a href="#15-面向对象深度优先和广度优先是什么？" class="headerlink" title="15.面向对象深度优先和广度优先是什么？"></a>15.面向对象深度优先和广度优先是什么？</h2><p>Python的类可以继承多个类，Python的类如果继承了多个类，那么其寻找方法的方式有两种： 当类是经典类时，多继承情况下，会按照深度优先方式查找 （py3） ；当类是新式类时，多继承情况下，会按照广度优先方式查找（ py2）</p><p>简单点说就是：经典类是纵向查找，新式类是横向查找</p><p>经典类和新式类的区别就是，在声明类的时候，新式类需要加上object关键字。</p><p>在python3中默认全是新式类</p><p>来源：<a href="https://blog.csdn.net/CHERISHGF/article/details/105300072">https://blog.csdn.net/CHERISHGF/article/details/105300072</a></p><h2 id="16-是否使用过functools中的函数？其作用是什么？"><a href="#16-是否使用过functools中的函数？其作用是什么？" class="headerlink" title="16.是否使用过functools中的函数？其作用是什么？"></a>16.是否使用过functools中的函数？其作用是什么？</h2><p>参考：<a href="https://learnku.com/docs/pymotw/functools-function-operation-toolbox/3376">https://learnku.com/docs/pymotw/functools-function-operation-toolbox/3376</a></p><p>functools用于高阶函数：指那些作用于函数或者返回其他函数的函数。通常情况下，只要是可以被当做函数调用的对象就是这个模块的目标。模块提供了许多改写或拓展函数或其他可调用对象的工具，而无需完全重写它们。</p><blockquote><p>functools 模块中提供的主要工具是 partial 类，它可以用来包装一个可调用对象，使其具有默认参数。生成的对象也是一个可调用对象，并且可以把它当做原来的函数。新生成的可调用对象可接受和原有函数完全一样的参数，并且可以在调用时接受额外的位置参数或关键词参数。partial 可以代替 lambda 为函数参数提供默认值，并同时留下一些没有指定默认值的参数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">foo = partial(<span class="built_in">int</span>,base=<span class="number">2</span>) <span class="comment"># 重新包装int函数为foo，将二进制转换为10进制</span></span><br><span class="line"><span class="built_in">print</span>(foo(<span class="string">&#x27;11110111&#x27;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">247</span></span><br></pre></td></tr></table></figure><h2 id="17-列举面向对象中带双下划线的特殊方法，如：-new-、-init"><a href="#17-列举面向对象中带双下划线的特殊方法，如：-new-、-init" class="headerlink" title="17.列举面向对象中带双下划线的特殊方法，如：__new__、__init__"></a>17.列举面向对象中带双下划线的特殊方法，如：<code>__new__</code>、<code>__init__</code></h2><ul><li><code>_xx</code>前置单下划线，私有属性或方法，意思是只有类对象和子类对象自己能访问到这些变量；</li><li><code>__xx</code>前置双下划线，私有化属性或方法，无法在外部直接访问（名字重整所以访问不到,只能是允许这个类本身进行访问了。连子类也不可以）。</li><li><code>__xx__</code>：前后双下划线，系统定义名字（这就是在python中强大的魔法方法），因为变量名<code>__xx__</code>对Python 来说有特殊含义，对于普通的变量应当避免这种命名风格。</li><li><code>xx_</code>：后置单下划线，用于避免与Python关键词的冲突</li></ul><p><code>__init__</code>是属于Python中的魔法方法。所谓魔法方法，即是Python中内置的、当进行特定操作时，会自动调用的方法，表现为方法名前后有两个下划线</p><p><code>__new__</code>方法是将对象创建出来的方法。在实际运行中，先走<code>__new__</code>方法，生成对象并返回，后调用<code>__init__</code>方法，将对象的引用传给<code>__init__</code>方法中的self</p><h2 id="18-如何判断是函数还是方法？"><a href="#18-如何判断是函数还是方法？" class="headerlink" title="18.如何判断是函数还是方法？"></a>18.如何判断是函数还是方法？</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Capybara</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self,food=<span class="string">&#x27;melon&#x27;</span></span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">small_capy = Capybara()</span><br><span class="line"><span class="built_in">print</span>(Capybara.eat)</span><br><span class="line"><span class="built_in">print</span>(small_capy.eat)</span><br><span class="line">&gt;&gt;&gt;&lt;function Capybara.eat at <span class="number">0x0000013BB6436AE8</span>&gt;</span><br><span class="line">&gt;&gt;&gt;&lt;bound method Capybara.eat of &lt;__main__.Capybara <span class="built_in">object</span> at <span class="number">0x0000013BB6395E80</span>&gt;&gt;</span><br></pre></td></tr></table></figure><p>可以看出通过类的方法调用就是函数，通过实例化调用就是方法</p><h2 id="19-静态方法和类方法区别？"><a href="#19-静态方法和类方法区别？" class="headerlink" title="19.静态方法和类方法区别？"></a>19.静态方法和类方法区别？</h2><p>实例方法只能被实例对象调用，静态方法(由@staticmethod装饰的方法)、类方法(由@classmethod装饰的方法)，可以被类或类的实例对象调用。<br> 实例方法，第一个参数必须要默认传实例对象，一般习惯用self。<br> 静态方法，参数没有要求。<br> 类方法，第一个参数必须要默认传类，一般习惯用cls。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;类三种方法语法形式&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance_method</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是类&#123;&#125;的实例方法，只能被实例对象调用&quot;</span>.<span class="built_in">format</span>(Foo))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是静态方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是类方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">foo = Foo()</span><br><span class="line">foo.instance_method()</span><br><span class="line">foo.static_method()</span><br><span class="line">foo.class_method()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;----------------&#x27;</span>)</span><br><span class="line">Foo.static_method()</span><br><span class="line">Foo.class_method()</span><br></pre></td></tr></table></figure><p>作者：python爱好者<br>链接：<a href="https://www.jianshu.com/p/212b6fdb2c50">https://www.jianshu.com/p/212b6fdb2c50</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="20-列举面向对象中的特殊成员以及应用场景"><a href="#20-列举面向对象中的特殊成员以及应用场景" class="headerlink" title="20.列举面向对象中的特殊成员以及应用场景"></a>20.列举面向对象中的特殊成员以及应用场景</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__doc__描述类的信息</span></span><br><span class="line"><span class="string">__module__表示当前操作对象在哪个模块</span></span><br><span class="line"><span class="string">__class__表示当前操作对象的类</span></span><br><span class="line"><span class="string">__del__构析方法，当对象在内存中被释放时，自动触发执行</span></span><br><span class="line"><span class="string">__call__如果类中定义了call方法对象后面加括号，触发执行</span></span><br><span class="line"><span class="string">__dict__类或对象中的所有成员</span></span><br><span class="line"><span class="string">__str__如果类中定义了str方法，打印对象时，默认输出该方法的返回值</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="21-1、2、3、4、5-能组成多少个互不相同且无重复的三位数"><a href="#21-1、2、3、4、5-能组成多少个互不相同且无重复的三位数" class="headerlink" title="21.1、2、3、4、5 能组成多少个互不相同且无重复的三位数"></a>21.1、2、3、4、5 能组成多少个互不相同且无重复的三位数</h2><p>实现思路：</p><ol><li>从列表中依次取出一个数，作为百位</li><li>从列表中依次取出一个数，作为十位</li><li>列表中取出剩下的百位。</li></ol><p>实现方式有两种，都是三层循环嵌套，第一种是在每次循环中拷贝原列表，pop出元素，不影响列表完整性；第二种在每次循环pop元素，套下一层循环之后，将元素添加回去，同样不影响列表完整性。</p><p>这里使用的是方法二</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)): <span class="comment"># 循环找出百位</span></span><br><span class="line">    x = <span class="built_in">str</span>(li.pop(i))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)): <span class="comment"># 在列表剩下的数中寻找十位</span></span><br><span class="line">        y = <span class="built_in">str</span>(li.pop(j))</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(li)): <span class="comment"># 在列表剩下的数中寻找个位</span></span><br><span class="line">            z = <span class="built_in">str</span>(li[k]) <span class="comment"># 注意这里不能用pop弹出数据，因为pop之后，列表发生了改变，要依次使用列表中剩余的数字</span></span><br><span class="line">            <span class="built_in">print</span>(x+y+z, end=<span class="string">&quot;|&quot;</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        li.insert(j, <span class="built_in">int</span>(y)) <span class="comment"># 将数字送回列表，方便下一次循环</span></span><br><span class="line">    li.insert(i, <span class="built_in">int</span>(x))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;number of unrepeated number is&#x27;</span>, count)</span><br></pre></td></tr></table></figure><h2 id="22-什么是反射？以及应用场景？"><a href="#22-什么是反射？以及应用场景？" class="headerlink" title="22. 什么是反射？以及应用场景？"></a>22. 什么是反射？以及应用场景？</h2><p>放射：通过字符串映射object对象的方法或者属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hasattr(obj,name_str): 判断objec是否有name_str这个方法或者属性</span><br><span class="line">getattr(obj,name_str): 获取object对象中与name_str同名的方法或者函数</span><br><span class="line">setattr(obj,name_str,value): 为object对象设置一个以name_str为名的value方法或者属性</span><br><span class="line">delattr(obj,name_str): 删除object对象中的name_str方法或者属性</span><br></pre></td></tr></table></figure><p>可以用一个方法方便调用不同的函数，比如在我们做接口自动化的时候,需要通过不同的请求方式,调用不同的函数：</p><p>参考：<a href="https://www.jianshu.com/p/628f61f01a54">https://www.jianshu.com/p/628f61f01a54</a></p><p>68、metaclass作用？以及应用场景？<br>69、用尽量多的方法实现单例模式。<br>70、装饰器的写法以及应用场景。<br>71、异常处理写法以及如何主动跑出异常（应用场景）<br>72、什么是面向对象的mro<br>73、isinstance作用以及应用场景？</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 问答题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络1概述篇</title>
      <link href="/2020/08/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/08/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>计算机网络主要是由一些通用的、可编程的硬件互连而成，通过这些硬件，可以传送不同类型的数据，并且可以支持广泛日益增长的应用。</p><ul><li>计算机网络不是软件概念，还包括硬件设备</li><li>计算机网络不仅仅是信息通信，还可以支持广泛的应用</li></ul><p>网络作用范围：</p><ul><li>广域网</li><li>城域网</li><li>局域网</li></ul><table><thead><tr><th>分类</th><th>英文</th><th>范围</th><th>区域</th></tr></thead><tbody><tr><td>广域网</td><td>WAN(Wide Area Network)</td><td>几十到几千公里</td><td>跨省、跨国</td></tr><tr><td>城域网</td><td>MAN(Metro Area Network)</td><td>5km-50km</td><td>城市间</td></tr><tr><td>局域网</td><td>LAN(Local Area Network)</td><td>1km以内</td><td>地区内</td></tr></tbody></table><p>根据网络使用者分类：</p><ul><li>公用网络</li><li>专用网络</li></ul><h2 id="计算机网络的发展简史"><a href="#计算机网络的发展简史" class="headerlink" title="计算机网络的发展简史"></a>计算机网络的发展简史</h2><h3 id="互联网的发展历史"><a href="#互联网的发展历史" class="headerlink" title="互联网的发展历史"></a>互联网的发展历史</h3><h4 id="第一阶段：单个网络ARPANET"><a href="#第一阶段：单个网络ARPANET" class="headerlink" title="第一阶段：单个网络ARPANET"></a>第一阶段：单个网络ARPANET</h4><p>计算机和交换机组成</p><h4 id="第二阶段：三级结构互联网"><a href="#第二阶段：三级结构互联网" class="headerlink" title="第二阶段：三级结构互联网"></a>第二阶段：三级结构互联网</h4><p>主干网——地区网——校园网</p><h4 id="第三阶段：-多层次ISP互联网"><a href="#第三阶段：-多层次ISP互联网" class="headerlink" title="第三阶段： 多层次ISP互联网"></a>第三阶段： 多层次ISP互联网</h4><p>ISP(Internet Service Provider)：网络服务提供商</p><p>多个主干ISP全球互连——地区ISP——公司、校园、家庭</p><h3 id="中国互联网发展简史"><a href="#中国互联网发展简史" class="headerlink" title="中国互联网发展简史"></a>中国互联网发展简史</h3><p>1980年开始互联网实验——1989年第一个公用网络建立运行——1994接入国际互联网</p><p>中国当前最大的五个计算机网络：</p><ul><li>中国电信互联网CHINANET</li><li>中国联通互联网UNINET</li><li>中国移动互联网CMNET</li><li>中国教育与科研计算机网CERNET</li><li>中国科学技术网CSTNET</li></ul><h2 id="计算机网络的层次结构"><a href="#计算机网络的层次结构" class="headerlink" title="计算机网络的层次结构"></a>计算机网络的层次结构</h2><h3 id="层次结构设计的基本原则"><a href="#层次结构设计的基本原则" class="headerlink" title="层次结构设计的基本原则"></a>层次结构设计的基本原则</h3><p>如果计算机A需要与计算机B进行通信，则需要</p><ul><li>保证数据通路畅通</li><li>识别目的计算机</li><li>查询目的计算机的状态</li><li>数据是否错误</li></ul><p>分层实现不同的功能，这些功能基本可以通过三层来实现<font color='red'>网络应用数据、数据可靠通信、物理网络接入</font></p><p>层次结构设计的基本原则：</p><ul><li>各层之间是相互独立的</li><li>每一层有足够的灵活性</li><li>各层之间完全解耦</li></ul><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><p><strong>应用层</strong>：为计算机提供接口和服务</p><p><strong>表示层</strong>：数据处理（编码解码、加码解密等）</p><p><strong>会话层</strong>：管理（建立、维护、重连）通信会话</p><p><strong>传输层</strong>：管理端到端的通信连接</p><p><strong>网络层</strong>：数据路由（决定数据在网络的路径）</p><p><strong>数据链路层</strong>：管理相邻节点之间的通信</p><p><strong>物理层</strong>：数据通信的光电物理特性</p><ul><li>OSI欲成为全球计算机都遵循的标准</li><li>OSI在市场化过程中困难重重，TCP/IP在全球范围成功运行</li><li>OSI最终并没有成为广泛使用的标准模型</li></ul><h3 id="TCP-IP四层模型（重点）"><a href="#TCP-IP四层模型（重点）" class="headerlink" title="TCP/IP四层模型（重点）"></a>TCP/IP四层模型（重点）</h3><p><strong>应用层</strong>：对应七层模型中的应用层、表示层和会话层，主要有HTTP/FTP/SMTP/POP3等协议</p><p><strong>传输层</strong>：对应七层模型中的传输层，TCP/UDP协议</p><p><strong>网络层</strong>：对应七层模型中的网络层，IP/ICMP协议</p><p><strong>网络接口层</strong>：对应七层模型中的数据链路层和物理层，Ethernet/ARP/RARP协议</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200826172715303.png" alt="image-20200826172715303"></p><h3 id="TCP-IP各层之间的协议简述"><a href="#TCP-IP各层之间的协议简述" class="headerlink" title="TCP/IP各层之间的协议简述"></a>TCP/IP各层之间的协议简述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TCP/IP各层实现的协议</span><br><span class="line">应用层：</span><br><span class="line">HTTP：超文本传输协议，基于TCP，使用80号端口，是用于从www服务器传输超文本到本地浏览器的传输协议。</span><br><span class="line">SMTP：简单邮件传输协议，基于TCP，使用25号端口，是一组用于由源地址到目的地址传送邮件的规则，用来控制信件的发送、中转。</span><br><span class="line">FTP：文件传输协议，基于TCP，一般上传下载用FTP服务，数据端口是20号，控制端口号是21号。</span><br><span class="line">TELNET：远程登录协议，基于TCP，使用23号端口，是Internet远程登录服务的标准协议和主要方式。为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序连接到服务器。使用明码传送，保密性差，简单方便。</span><br><span class="line">DNS：域名解析，基于UDP，使用53号端口，提供域名到IP地址之间的转换。（访问百度，是www.baidu.com，这些域名对应着IP地址）</span><br><span class="line">SSH：安全外壳协议，基于TCP，使用22号端口，为建立在应用层和传输层基础上的安全 协议。SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。（远程管理网路设备或服务器时，一般都使用ssh工具进行连接）</span><br><span class="line">传输层</span><br><span class="line">TCP：传输控制协议。一种面向连接的、可靠的、基于字节流的传输层通信协议。</span><br><span class="line">UDP：用户数据报协议。一种面向无连接的通讯协议，不可靠的，基于报文的传输层通信协议。</span><br><span class="line">SCTP：流量传输控制协议。一种面向连接的流传输协议。（可以看做TCP协议的改进）</span><br><span class="line">三种优点：</span><br><span class="line">1、多宿主的连接，TCP是单地址进行连接的，SCTP可通知对方有多个IP地址。</span><br><span class="line">2、一个TCP连接支持一个流，SCTP支持多个流，在某条路径堵塞时，将数据转移到较好的备用的路径进行传输的</span><br><span class="line">3、由于使用多条路径传输，SCTP有更好的安全性</span><br><span class="line">MPTCP：多路径传输控制协议。TCP的多路径版本。SCTP虽然在首发两端有多条路径，但实际只是使用一条路径传输，当该条路径出现故障时，不需要断开连接，而是转移到其他路径。MPTCP真正意义上实现了多路径并行传输，在连接建立阶段，建立多条路径，然后使用多条路径同时传输数据。</span><br><span class="line">网络层：</span><br><span class="line">IP：Internet协议。通过路由选择下一条IP封装后交给接口层。IP数据报是连接服务。（分IPv6和IPv4）</span><br><span class="line">ICMP：Internet控制报文协议。是网络层的补充。用于在Ping主机、路由器之间传递控制消息</span><br><span class="line">ARP：地址解析协议。通过目标设备的IP地址，查询目标设备的MAC地址，以保证通信的顺利进行。</span><br><span class="line">RARP：反向地址解析协议</span><br></pre></td></tr></table></figure><h2 id="现代互联网的网络拓扑"><a href="#现代互联网的网络拓扑" class="headerlink" title="现代互联网的网络拓扑"></a>现代互联网的网络拓扑</h2><p>边缘部分：家庭</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200826173128291.png" alt="image-20200826173128291"></p><p>边缘部分：企业</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200826173257315.png" alt="image-20200826173257315"></p><p>核心部分</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200826173418414.png" alt="image-20200826173418414"></p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200826175317706.png" alt="image-20200826175317706"></p><p>从用户角度看互联网：</p><p>客户-服务器模式——用户向服务器请求服务，然后获得服务</p><p>对等连接（P2P）模式</p><h2 id="计算机网络性能指标"><a href="#计算机网络性能指标" class="headerlink" title="计算机网络性能指标"></a>计算机网络性能指标</h2><p>bps=bit/s</p><p><strong>时延</strong>：由发送时延、排队时延、传输时延、处理时延组成</p><p><strong>发送时延</strong>：发送时延=数据长度(bit)/发送速率(bit/s)</p><p>发送速率受限于计算机网卡</p><p><strong>传播时延</strong>：传输时延=传输路径距离/传播速率(bit/s)</p><p>传播速率受限于传播介质</p><p><strong>排队时延</strong>：数据包在网络设备中等待被处理的时间</p><p><strong>处理时延</strong>：数据包达到设备或者目的机器被处理所需要的时间</p><p>总时延=发送时延+排队时延+传播时延+处理时延</p><p><strong>往返时间RTT</strong>：</p><p>RTT(Route-Trip Time是评估网络质量的一项重要指标)，RTT表示的是数据报文在端到端通信中的来回一次的时间。通常使用<code>ping</code>命令查看RTT</p><h2 id="物理层概述"><a href="#物理层概述" class="headerlink" title="物理层概述"></a>物理层概述</h2><h3 id="物理层的作用"><a href="#物理层的作用" class="headerlink" title="物理层的作用"></a>物理层的作用</h3><ul><li>连接不同的物理设备</li><li>传输比特流</li></ul><p>连接不同物理设备的介质：双绞线、同轴电缆、光纤、红外线、无线、激光等</p><p>比特流，通过高低电平传输01数据</p><h3 id="信道基本概念"><a href="#信道基本概念" class="headerlink" title="信道基本概念"></a>信道基本概念</h3><ul><li>信道是往一个方向传送信息的媒体</li><li>一条通信电路包含一个接收信道和一个发送信道</li></ul><p>单工通信信道：只能往一个方向通信，没有反方向反馈的信道，比如有线电视、无线收音机等</p><p>半双工信通信信道：双方都可以发送和接收信息，不能双方同时发送，也不能同时接收</p><p>全双工通信信通：双方都可以同时发送和接收信息。</p><h3 id="分用-复用技术"><a href="#分用-复用技术" class="headerlink" title="分用-复用技术"></a>分用-复用技术</h3><blockquote><p>复用技术是指一种在传输路径上综合多路信道，然后恢复原机制或解除终端各信道复用技术的过程。</p><p>在数据通信中，复用技术提高了信道传输效率，有广泛应用。多路复用技术是在发送端将多路信号进行组合(如广电前端使用的混合器)，在一条专用的物理信道上实现传输，接收端再将复合信号分离出来。</p></blockquote><h2 id="数据链路层概述"><a href="#数据链路层概述" class="headerlink" title="数据链路层概述"></a>数据链路层概述</h2><p>物理层和数据链路层组成了TCP/IP四层模型的网络接口层</p><p>数据链路层需要解决的问题：</p><h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><ul><li>‘帧’是数据链路层数据的基本单位</li><li>发送端在网络层的一段数据前后添加特点标记形成‘帧’</li><li>接收端根据前后特定标记识别出‘帧’</li></ul><p>帧首部和帧尾部是特定的控制字符（特定比特流）</p><p>例如帧首部和真尾部的控制字符：</p><p><code>SOH:000000001</code></p><p><code>EOT:00000100</code></p><p>但是如果数据里面恰好有这些比特流咋办？此时就需要学习透明传输</p><h3 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h3><ul><li>“透明”在计算机领域是非常重要的一个术语</li><li>在数据链路中的”透明“指的是”控制字符在帧数据中，但是要当做不存在的去处理“</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200831000814485.png" alt="image-20200831000814485"></p><p>当帧数据中出现了控制字符，在它前面加一个转义字符ESC，这样就不会将它识别为控制字符处理了。</p><p>但是如果数据中也出现了转义字符怎么办？很简单，再在前面加一个转义字符即可</p><h3 id="差错监测"><a href="#差错监测" class="headerlink" title="差错监测"></a>差错监测</h3><ul><li>物理层只管传输比特流，无法控制是否出错</li></ul><p>见下章</p><h2 id="数据链路层的差错检测"><a href="#数据链路层的差错检测" class="headerlink" title="数据链路层的差错检测"></a>数据链路层的差错检测</h2><h3 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h3><p>在比特流的尾部添加一个比特位来检测</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200831001652551.png" alt="image-20200831001652551"></p><p>所有位数相加，得到奇数则在尾部添加1，反之添加0。如果在传输过程中，数据发生了特定的改变，就能够一定程度上校验出来。如果传输过程过出现偶数个差错的话就很难被检测出来。</p><h3 id="循环冗余校验码CRC"><a href="#循环冗余校验码CRC" class="headerlink" title="循环冗余校验码CRC"></a>循环冗余校验码CRC</h3><ul><li>一种根据传输或保存的数据而<font color='red'>产生固定位数校验码</font>的方法</li><li>检测数据传输或者保存后可能产生的错误</li><li>生成的数据计算出来并且<font color='red'>附加到数据后面</font></li></ul><p>首先来了解<strong>模’2‘除法</strong></p><p><strong>模’2‘除法</strong>是二进制下的除法，与算术除法类似，但除法不借位，实际是“异或”操作（相同0，不同1）</p><p>生成循环冗余校验码CRC步骤：</p><ol><li>选定一个用于检验的多项式G(x)，并在数据尾部添加r个0</li><li>将添加r个0后的数据，使用<font color='red'>模2除法</font>除以<font color='red'>多项式的位串</font></li><li><font color='red'>得到的余数</font>填充在<font color='red'>原数据r个0的位置</font>得到可校验的位串</li></ol><p>例子1：使用CRC计算101001的可校验位串。</p><p><strong>第一步 选定一个用于检验的多项式G(x)，并在数据尾部添加r个0</strong><br>$$<br>G(x)=x^3+x^2+1<br>$$<br>二进制位串：1101，最高阶为3<br>$$<br>G(x)1<em>x^3+1</em>x^2+0<em>x^1+1</em>x^0<br>$$<br>r指的是最阶高数，这里为3</p><p>所以添加3个0之后为，101001<font color='red'>000</font></p><p><strong>第二步 将添加r个0后的数据，使用模2除法除以多项式的位串</strong></p><img src="计算机网络/image-20200831011040853.png" alt="image-20200831011040853" style="zoom:50%;" /><p><strong>第三步 得到的余数填充在原数据r个0的位置得到可校验的位串</strong></p><p>101001<font color='red'>000</font> ——&gt; 101001<font color='red'>001</font></p><p>发送端生成CRC码后，接收端接收的数据除以G(x)的位串，根据余数判断出错，余数不为0则出错</p><img src="计算机网络/image-20200831011434956.png" alt="image-20200831011434956" style="zoom:50%;" /><p>例2：使用CRC计算10110011的可校验位串</p><p>提示G(x)：<br>$$<br>G(x)=x^4+x^3+1<br>$$<br>答案：10110011<font color='red'>0100</font></p><p>几点注意：</p><ul><li>CRC的错误检测能力与位串的阶数r有关</li><li>数据链路层只进行数据的检测，不进行纠正（若出错直接丢弃）</li><li>G(x)一般采用一定的标准</li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200831012210465.png" alt="image-20200831012210465"></p><h2 id="最大传输单元"><a href="#最大传输单元" class="headerlink" title="最大传输单元"></a>最大传输单元</h2><p><strong>最大传输单元MTU（Maximum Transmission Unit）</strong></p><p>数据链路层的数据帧也不是无限大的，MTU用来描述最大数据帧长度。数据帧过大或者过小都会影响传输的效率，过大的话回答导致时延增加，过小影响性能。<font color='red'>以太网MTU一般为1500字节</font>。</p><p><strong>路径MTU</strong></p><p>假设两台通信设备之间通信经过好几个小型网络，他们的路径MTU由链路中MTU的最小值决定。</p><h2 id="以太网协议详解"><a href="#以太网协议详解" class="headerlink" title="以太网协议详解"></a>以太网协议详解</h2><h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><ul><li><p>MAC地址（物理地址、硬件地址）</p></li><li><p>每一个设备都拥有唯一的MAC地址</p></li><li><p>MAC地址共48个比特位，使用十六进制表示</p><p>通过<code>ipconfig -all</code>查看本机所有网络设备的MAC地址。例如<code>30-B4-93-ED-83-AF</code></p></li></ul><h3 id="以太网协议"><a href="#以太网协议" class="headerlink" title="以太网协议"></a>以太网协议</h3><ul><li>以太网（Ethernet）是一种使用广泛的<font color='red'>局域网</font>技术</li><li>以太网是一种应用于数据链路层的协议</li><li>使用以太网可以完成<font color='red'>相邻设备</font>的数据帧传输</li></ul><p>以太网的数据分为五个部分</p><table><thead><tr><th>目的地址</th><th>原地址</th><th>类型</th><th>帧数据</th><th>CRC</th></tr></thead><tbody><tr><td>6</td><td>6</td><td>2</td><td>46~1500</td><td>4</td></tr></tbody></table><p><em>注：这里单位为字节，目的MAC地址48个比特位，为6个字节</em></p><p><em>类型表示帧数据具体是什么协议的数据</em></p><p>比如帧数据为网络层的ip数据的话，它的类型为<code>0800</code>（类型为16进制表示）；ARP请求/应答的类型为<code>0806</code>；RARP请求/应答的类型为<code>8035</code></p><p><strong>MAC地址表</strong>，MAC地址与硬件接口一一对应的表</p><p>假如A设备需要发送数据给C设备，在路由器中经历的过程为：</p><ol><li>A通过网卡发送数据帧</li><li>数据帧达到路由器，路由器取出前6个字节</li><li>路由器匹配MAC地址表，找到对应的网络接口</li><li>路由器往该网络接口发送数据帧</li></ol><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/image-20200901233627164.png" alt="image-20200901233627164"></p><p>但是当MAC地址表中没有C的映射信息，会这样处理：</p><ol><li>A发送数据帧之后，E检查MAC地址表，发现没有C的信息</li><li>E将广播A的数据包到除A以外的端口</li><li>E将收到来自B、C的回应，并将地址记录</li></ol><p>通过MAC表只可以完成<font color='red'>相邻设备</font>的数据帧传输，如果有多个路由跨设备传输怎么办？我们继续学习网络层的内容</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python正则表达式</title>
      <link href="/2020/08/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/08/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>复习一下正则表达式</p><p>正则表达式（regex）是一些由字符和特殊符号组成的字符串，能按照某种模式匹配一系列有相似特征的字符串</p><h2 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h2><ul><li><p>简单匹配 例如：abc   =&gt; abc</p></li><li><p>多个匹配模式 例如：abc | 12c  =&gt; abc， 12c</p></li><li><p>匹配任意字符(.)，除\n之外  例如：.  =&gt; abcdef</p></li><li><p><code>*</code>匹配0次多或多次</p></li><li><p><code>+</code>匹配一次或多次</p></li><li><p><code>?</code>匹配0次或1次</p></li><li><p><code>&#123;N&#125;</code>匹配指定的N次</p></li><li><p><code>&#123;M,N&#125;</code>匹配M-N次，最大化优先</p></li><li><p><code>\d</code>匹配数字</p></li><li><p><code>\w</code>匹配数字和字母</p></li><li><p><code>\s</code>匹配任何空格字符</p></li><li><p>边界匹配 用^匹配开头，用$匹配结尾</p></li><li><p>匹配特殊字符需要用<code>\</code>进行转义</p></li><li><p>指定匹配选项 </p><ul><li><p>使用<code>[]</code>指定要匹配的集合</p><p>例如：<code>[a-zA-Z]&#123;2&#125;</code></p></li><li><p>使用<code>[^]</code>指定<font color='red'>不要</font>匹配的内容 注意是在^括号里，匹配开头是在正则的最前面</p><p>例如：<code>[^abc]&#123;2&#125;</code></p></li></ul></li></ul><h2 id="正则表达式分组"><a href="#正则表达式分组" class="headerlink" title="正则表达式分组"></a>正则表达式分组</h2><p>重复一个字符串时，可以使用()进行分组，使用<code>(?&lt;word&gt;\w+)</code>指定组名。从左向右，以分组的左括号为标志，第一个出现的组号为1，第二个为2，以此类推。</p><ul><li><p>使用()对匹配的内容分组</p><p>例如：<code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code>    匹配192.168.60.14</p></li><li><p>使用\1、\2反向引用</p><p>例如：<code>He (l..e)s her \1r.</code>    匹配He loves her lover.    He likes her liker.</p></li></ul><h2 id="贪婪模式vs非贪婪模式"><a href="#贪婪模式vs非贪婪模式" class="headerlink" title="贪婪模式vs非贪婪模式"></a>贪婪模式vs非贪婪模式</h2><p><strong>贪婪模式</strong>：在整个表达式匹配成功的前提下，尽可能多的匹配</p><p><strong>非贪婪模式</strong>：在整个表达式匹配成功的前提下，以最少的匹配字符</p><p>默认是贪婪模式</p><p>非贪婪模式只需在匹配pattern中加上<code>?</code>：</p><p>表达式<code>ab.*?c</code>    测试数据：abacaxcd，匹配结果：abac</p><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p>re模块</p><ul><li><p>正则编译 — compile()函数<br><code>compile(pattern,flags=0)</code><br>使用任何可选的标记来编译正则表达式的模式,然后返回一个正则表达式的【对象】或者叫pattern</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;([a-z]+) ([a-z]+)&#x27;</span>,re.I)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">&#x27;hello wdnmd hello&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;hello wdnmd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;wdnmd&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">2</span>)<span class="comment"># 返回第二个分组匹配成功的子串索引</span></span><br><span class="line">(<span class="number">6</span>, <span class="number">11</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()</span><br><span class="line">(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;wdnmd&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>正则匹配 — match()函数、search()函数、findall()函数</p><ol><li>match() 函数<br><code>match(pattern,string,flags=0)</code><br>尝试使用带有可选的标记的正则表达式的模式来匹配字符串。如果匹配成功，就返回匹配【对象】；如果失败，就返回【None】</li><li>search()函数<br><code>search(pattern, string, flags=0)</code><br>使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配【对象】；如果失败，则返回【None】<br>match() 和 search() 的区别<br>match()从头开始查找，如果从第1个就不匹配，则立马停止。<br>search()会检索整个字符串</li><li>findall() 函数<br><code>findall(pattern,string[,flags])</code><br>查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配【列表】</li></ol></li><li><p>正则分组 — group(num) 函数、groups()函数、groupdict()函数</p><ol><li>group(num) 函数<br>返回整个匹配对象或编号为num的特定子组的【字符串】</li><li>groups() 函数<br>返回一个包含所有匹配子组的【元组】；如果没有匹配的，则返回一个【空元组】</li><li>groupdict() 函数<br>返回一个【字典】，其中key为子组名，value为子组内容对象</li></ol></li><li><p>正则分割 — split()函数<br><code>split(pattern, string, max = 0)</code> – max：可指定分割次数<br>根据正则表达式的模式分隔符，split函数将字符串分割为列表，然后返回成功匹配的【列表】，分割最多操作max次（默认分割所有成功的位置）</p></li><li><p>正则替换、更换位置和修改内容 — sub()函数<br><code>sub(pattern, repl, string, max = 0)</code> – 可指定替换次数<br>使用repl替换string中每一个匹配的子串后返回替换后的【字符串】，最多操作max次（默认替换所有）</p></li></ul><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">re.I</td><td align="left">使匹配对大小写不敏感</td></tr><tr><td align="left">re.L</td><td align="left">做本地化识别（locale-aware）匹配</td></tr><tr><td align="left">re.M</td><td align="left">多行匹配，影响 ^ 和 $</td></tr><tr><td align="left">re.S</td><td align="left">使 . 匹配包括换行在内的所有字符</td></tr><tr><td align="left">re.U</td><td align="left">根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td></tr><tr><td align="left">re.X</td><td align="left">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td></tr></tbody></table><h2 id="常用正则匹配"><a href="#常用正则匹配" class="headerlink" title="常用正则匹配"></a>常用正则匹配</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 匹配国内电话号码</span><br><span class="line">\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\&#123;7,8&#125;</span><br><span class="line"># 18位身份证</span><br><span class="line">^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)([0-9]|X)$</span><br><span class="line"># 匹配email</span><br><span class="line">[\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\.[\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?</span><br></pre></td></tr></table></figure><p>更多内容<a href="https://www.runoob.com/python3/python3-reg-expressions.html">https://www.runoob.com/python3/python3-reg-expressions.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask模板的介绍与应用</title>
      <link href="/2020/08/14/flask-template/"/>
      <url>/2020/08/14/flask-template/</url>
      
        <content type="html"><![CDATA[<h2 id="模板介绍"><a href="#模板介绍" class="headerlink" title="模板介绍"></a>模板介绍</h2><p>Jinja2是flask的默认模板引擎，自带</p><p>模板的基本配置</p><ul><li><code>template_folder=&#39;templates&#39;</code>    模板的默认目录，可以不用另外指定</li><li><code>render_template()</code>    (x)html自动转义</li><li><code>render_template_string()</code>    字符串自动转义</li><li>![截屏2021-06-07 下午1.17.02](/Users/gan/blog/source/_posts/flask-template/截屏2021-06-07 下午1.17.02.png)</li><li>全局函数和辅助对象    增强模板的功能</li></ul><p><strong>转义</strong>就是把特殊意义的字符串显示出来</p><p><a href="https://tool.oschina.net/commons?type=2">字符转义对照表</a></p><p><strong>全局对象</strong>：</p><ul><li>config——Flask的配置信息</li><li>request——请求对象</li><li>session——会话对象</li><li>g——请求相关的全局变量（如：g.user）</li></ul><p>就是模板可以直接通过<code>&#123;&#123; config &#125;&#125;</code>等获取相关信息</p><p><strong>全局函数</strong></p><ul><li><p><code>url_for()</code></p><p>URL解析函数（如：静态文件地址解析、链接跳转地址解析 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;hello_world&#x27;</span>))</span><br><span class="line">    <span class="comment"># _external=True是打印完整URL</span></span><br><span class="line">    <span class="built_in">print</span>(url_for(<span class="string">&#x27;hello_world&#x27;</span>, _external=<span class="literal">True</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! wdnmd&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>get_flashed_messages()</code></p><p>会话消息</p></li></ul><p><strong>上下文处理器</strong>：</p><ul><li><p>在模板的上下文中添加新的内容</p></li><li><p>内容可以是变量，也可以是函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xx <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.context_processor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_constants</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(&#123;<span class="string">&#x27;constants&#x27;</span>:contants&#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将constants的内容传入模板</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="模板中变量的使用"><a href="#模板中变量的使用" class="headerlink" title="模板中变量的使用"></a>模板中变量的使用</h2><p>回顾模板的渲染机制：</p><ul><li>从磁盘中读取html字符串</li><li>将满足特定规则的内容进行替换</li><li>发送给浏览器展示</li></ul><p>模板变量的语法:</p><p><code>&#123;&#123; ojbect.attribute &#125;&#125;</code></p><p>dict类型数据的渲染<br>list/tuple类型数据的渲染<br>list/tuple嵌套dict复杂类型数据的渲染</p><p>以上都与django模板DTL类似，列表元组传递用的是<code>list[index]</code>，更接近于python语法</p><p>传递方法略有区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render_template(<span class="string">&#x27;index.html&#x27;</span>,<span class="built_in">object</span>=<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure><h2 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h2><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tag %&#125;</span><br></pre></td></tr></table></figure><p>和DTL一样可以使用条件变量 循环等等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 不同与DTL，.items()要加括号</span><br><span class="line">&#123;% for k,v in dict.items() %&#125;</span><br><span class="line">&lt;p class=&#x27;&#123;&#123; loop.cycle(&#x27;odd&#x27;,&#x27;even&#x27;) &#125;&#125;&#x27;&gt;&#123;&#123; k &#125;&#125;,&#123;&#123; v &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="flask-template/image-20200815114709812.png" alt="image-20200815114709812"></p><p>思考：如果要在for循环中使用continue/break怎么办？</p><ul><li>直接在python中添加扩展</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个扩展用于在模板中添加break和continue</span></span><br><span class="line">app.jinja_env.add_extension(<span class="string">&#x27;jinja2.ext.loopcontrols&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其他的扩展可以查看jinja2官方文档</p><ul><li>去除HTML中多余的空白（浏览器渲染时候模板标签会自动加入很多空白）：</li></ul><p>在块的开始或结束位置放置一个减号(-)，不能有空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in seq -%&#125;</span><br><span class="line">&#123;&#123; item &#125;&#125;</span><br><span class="line">&#123;%- endfor %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>设置变量，赋值操作</p><p>先设置，后使用，也可以通过import导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set key,value = (1,2) %&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用代码块，实现块级作用域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% with %&#125;</span><br><span class="line">&#123;% set value = 42 %&#125;</span><br><span class="line">&#123;&#123; value &#125;&#125;只在代码块中有效</span><br><span class="line">&#123;% endwith %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="模板语法之过滤器"><a href="#模板语法之过滤器" class="headerlink" title="模板语法之过滤器"></a>模板语法之过滤器</h2><ul><li><p>过滤器：修改变量（如：格式化显示）</p></li><li><p>和DTL类似，用管道符号<code>|</code>分割</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|striptags &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以链式调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name|striptags|title &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以用圆括号传递可选参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; list|join(&#x27;,&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h3><ul><li><p>使用管道符号（|)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|safe &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% filter upper %&#125;</span><br><span class="line">this text becomes uppercase</span><br><span class="line">&#123;% endfilter %&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="内置过滤器举例"><a href="#内置过滤器举例" class="headerlink" title="内置过滤器举例"></a>内置过滤器举例</h3><ul><li><p>求绝对值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|abs &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>默认值显示 ，boolean参数代表是否作用于为空值的参数，默认为False</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;# default(value,default_value=&#x27;&#x27;,boolean=False) #&#125;</span><br><span class="line">&#123;&#123; value|default(&#x27;默认值&#x27;) &#125;&#125;</span><br><span class="line">or</span><br><span class="line">&#123;&#123; value|d(&#x27;默认值&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>html转义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|escape &#125;&#125;</span><br><span class="line">or</span><br><span class="line">&#123;&#123; vlaue|e &#125;&#125;</span><br></pre></td></tr></table></figure><p>用于传递并显示html文本，jinja模板模式是自动转义的。所以如果需要，可以将转义设置为手动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/filter&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_escape_filter</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 转义使用过滤器 &quot;&quot;&quot;</span></span><br><span class="line">    html = <span class="string">&#x27;&lt;h2&gt;hello&lt;/h2&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;xxx.html&#x27;</span>,html=html)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 手动转义 #&#125;</span><br><span class="line">&#123;% autoescape false %&#125;</span><br><span class="line">&#123;# 不进行转义 #&#125;</span><br><span class="line">&#123;&#123; html &#125;&#125;</span><br><span class="line">&#123;# 进行转义 #&#125;</span><br><span class="line">&#123;&#123; html|escape &#125;&#125;</span><br><span class="line">&#123;% endautoescape %&#125;</span><br></pre></td></tr></table></figure></li><li><p>富文本内容转义显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; vlaue|safe &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>倒序显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; vlaue|reverse &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>更多内容查看官方文档</p><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><ul><li><p>使用装饰器注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter(<span class="params"><span class="string">&#x27;reverse&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_filter</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s[::<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>调用函数注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_filter</span>(<span class="params">s</span>):</span></span><br><span class="line"><span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br><span class="line">app.jinja_env.<span class="built_in">filter</span>[<span class="string">&#x27;reverse&#x27;</span>] = reverse_filter</span><br></pre></td></tr></table></figure></li></ul><h3 id="转义显示"><a href="#转义显示" class="headerlink" title="转义显示"></a>转义显示</h3><ul><li><p>视为字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; &#x27;&#123;&#123; &#125;&#125; &#123;% %&#125;&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用raw标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">&#123;% for key,value in data.items %&#125;</span><br><span class="line">&#123;&#123; key &#125;&#125;:&#123;&#123; value &#125;&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="模板全局函数"><a href="#模板全局函数" class="headerlink" title="模板全局函数"></a>模板全局函数</h2><p>全局函数可以在模板中直接使用</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &#123;% for i in range(10) %&#125;</span><br><span class="line">    &lt;li&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>其他全局函数：</p><p><code>dict(**items)</code></p><p><code>lipsum(n=5,html=True,min=20,max=100)</code>自动生成“乱数假文”，用于测试网页排版设计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set lipsum_context=lipsum(n=5,html=True,min=20,max=100) %&#125;</span><br><span class="line">&#123;&#123; lipsum_context &#125;&#125;</span><br></pre></td></tr></table></figure><p><code>cycler(*items)</code>——可用于css类名的循环</p><p>举例：循环打印1到100，每一行显示一个数字，每一行的字体颜色也不同（通过css控制颜色）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;giao&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .row1&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .row2&#123;</span><br><span class="line">            color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&#123;% set class_name = cycler(&quot;row1&quot;,&quot;row2&quot;) %&#125;</span><br><span class="line">&#123;% for i in range(100) %&#125;</span><br><span class="line">    &lt;p class=&quot;&#123;&#123; class_name.next() &#125;&#125;&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>join(sep=&#39;,&#39;)</code>——可用于字符串的拼接</p><h2 id="模板中的宏"><a href="#模板中的宏" class="headerlink" title="模板中的宏"></a>模板中的宏</h2><p>把常用的功能抽取出来，实现可重用；简单理解：宏≈函数；宏可以写在单独的html文件中。</p><p>使用宏——像调用函数一样调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro input(name,value=&#x27;&#x27;,type=&#x27;text&#x27;,size=20) -%&#125;</span><br><span class="line">&lt;input type=&quot;&#123;&#123; type &#125;&#125;&quot; name=&quot;&#123;&#123; name &#125;&#125;&quot; vlaue=&quot;&#123;&#123; vlaue|e &#125;&#125;&quot; size=&quot;&#123;&#123; sieze &#125;&#125;&quot;&gt;</span><br><span class="line">&#123;%- endmacro %&#125;</span><br></pre></td></tr></table></figure><p>比如调用自定义的input宏：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>macro<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&#123;% macro input(type_name,name,value=&#x27;&#x27;) -%&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&#123;&#123; type_name &#125;&#125;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&#123;&#123; name &#125;&#125;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; value &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;%- endmacro %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;default&quot;&gt;--&gt;</span></span><br><span class="line">&#123;&#123; input(&#x27;text&#x27;,&#x27;username&#x27;,&#x27;default&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文件中宏的使用"><a href="#文件中宏的使用" class="headerlink" title="文件中宏的使用"></a>文件中宏的使用</h3><ol><li><p>将前面定义的宏（body中macro的部分）单独保存为forms.html</p></li><li><p>导入（类似python的语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &#x27;forms.html&#x27; as forms %&#125;</span><br><span class="line">&lt;!-- or --&gt;</span><br><span class="line">&#123;% from &#x27;forms.html&#x27; import input %&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; forms.input(&#x27;username&#x27;) &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="模板的继承之继承语法"><a href="#模板的继承之继承语法" class="headerlink" title="模板的继承之继承语法"></a>模板的继承之继承语法</h2><p>如下场景如何设计：</p><ul><li>每个页面都引用了公共的头部，js，css——继承</li><li>有几个页面结构和内容极其相似（如：页脚）——继承之包含</li></ul><p>继承实现（和DTL类似）：</p><ol><li><p>将可变的部分圈出来（base.html)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block siderbar %&#125;</span><br><span class="line">&lt;!--菜单栏的内容--&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承父模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br></pre></td></tr></table></figure></li><li><p>填充新的内容（index.html)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block siderbar %&#125;</span><br><span class="line">&lt;!--菜单栏的内容--&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>复用父模板的内容（可选）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block siderbar %&#125;</span><br><span class="line">&#123;&#123; super() &#125;&#125;</span><br><span class="line">&lt;!--菜单栏的内容--&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="模板的继承之包含语法"><a href="#模板的继承之包含语法" class="headerlink" title="模板的继承之包含语法"></a>模板的继承之包含语法</h2><p>包含实现：</p><ol><li><p>将拆出来的部分包进来（index.html)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;!-- 页面主要内容区域 --&gt;</span><br><span class="line">&#123;# 公用的footer #&#125;</span><br><span class="line">&#123;% include &quot;footer.html&quot; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p><strong>include标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;# ingore missing 如果模板不存在，jinja2会忽略这条语句 #&#125;</span><br><span class="line">&#123;% include &quot;footer.html&quot; ignore missing %&#125;</span><br><span class="line">&#123;# with context/without context 是否携带当前页面的上下文 #&#125;</span><br><span class="line">&#123;% include &quot;footer.html&quot; ignore missing with context %&#125;</span><br><span class="line">&#123;% include &quot;footer.html&quot; ignore missing without context %&#125;</span><br></pre></td></tr></table></figure><p><strong>代码复用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block title %&#125;</span><br><span class="line">I am title</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&lt;h1&gt;&#123;&#123; self.title() &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&#123;% block body %&#125;&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h2><p>闪现系统的基本工作方式是：在且只在下一个请求中访问上一个请求结束时记录的消息。</p><p>实现步骤：</p><ol><li><p>在视图中产生一个消息（提示/警告/错误）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash(msg_content,msg_type)</span><br></pre></td></tr></table></figure><p>参数msg_content: 消息内容</p><p>参数msg_type: 消息类型</p></li><li><p>在模板中展示消息</p><p><code>get_flashed_messages(category_filter=[&quot;error&quot;])</code></p><p>参数category_filter: 对产生的消息按类别查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=flashes&gt;</span><br><span class="line">&#123;% for category,message in get_flashed_messages(with_categories=true) %&#125;</span><br><span class="line">&lt;li class=&quot;&#123;&#123; category &#125;&#125;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li></ol><p>举个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, flash, redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 消息通知用到了session，基于安全的考虑需要加密</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;abacdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    flash(<span class="string">&#x27;this is a notify&#x27;</span>, <span class="string">&#x27;info&#x27;</span>)</span><br><span class="line">    flash(<span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/flash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flash&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flash_msg</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;flash_msg.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>flash_msg.html:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;flash message test&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .warning&#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">            color: #fff;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;flash message test&lt;/h1&gt;</span><br><span class="line">&lt;!-- 过滤出消息通知中的warning类型，并传递消息的类型参数 --&gt;</span><br><span class="line">&#123;% for category,message in get_flashed_messages(with_categories=true,category_filter=[&quot;warning&quot;]) %&#125;</span><br><span class="line">    &lt;p class=&quot;&#123;&#123;category &#125;&#125;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>此时访问主页时候，会自动跳转到flash message页面，消息闪现的内容也是来自上一个请求（即主页），如果刷新flash message页面，消息闪现内容会消失。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
            <tag> Jinja2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（实践）</title>
      <link href="/2020/08/13/linux3/"/>
      <url>/2020/08/13/linux3/</url>
      
        <content type="html"><![CDATA[<p>实现支持异步任务的线程池</p><p><img src="linux3/image-20200814085740093.png" alt="image-20200814085740093"></p><ul><li>了解python的同步原语</li><li>实现线程安全的队列</li><li>实现基本任务对象</li><li>了解线程池</li><li>实现任务处理线程</li><li>实现任务处理线程池</li><li>实现异步任务处理对象</li></ul><h2 id="python同步原语"><a href="#python同步原语" class="headerlink" title="python同步原语"></a>python同步原语</h2><p><strong>互斥锁</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用线程锁</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="comment"># 加锁</span></span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="comment"># 解锁</span></span><br><span class="line">lock.release()</span><br></pre></td></tr></table></figure><p><strong>条件变量</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用条件变量,Condition底层实现了互斥锁配合使用</span></span><br><span class="line">condition = threading.Condition()</span><br><span class="line"><span class="comment"># 加锁</span></span><br><span class="line">condition.acquire()</span><br><span class="line"><span class="comment"># 解锁</span></span><br><span class="line">condition.release()</span><br><span class="line"><span class="comment"># 等待</span></span><br><span class="line">condition.wait()</span><br><span class="line"><span class="comment"># 通知</span></span><br><span class="line">condition.notify()</span><br></pre></td></tr></table></figure><h2 id="实现线程的安全队列Queue"><a href="#实现线程的安全队列Queue" class="headerlink" title="实现线程的安全队列Queue"></a>实现线程的安全队列Queue</h2><ul><li><p>队列用于存放多个元素，是存放各种元素的”池“</p></li><li><p>实现安全队列步骤：</p><ol><li>获取当前队列的数量</li><li>往队列放入元素</li><li>从队列取出元素</li></ol></li><li><p>队列可能有多个线程同时操作，因此需要保证线程安全</p><p>多个线程同时访问队列元素，要保证多个线程获取的串行。此时需要<strong>使用“锁”保护队列</strong></p><p>队列元素为空时获取队列元素，会发生阻塞，需要等待队列不为空。此时需要<strong>使用条件变量等待队列元素</strong></p></li></ul><p>queue.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程安全的队列</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadingSafeQueueException</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程安全队列</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadingSafeQueue</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, max_size=<span class="number">0</span></span>):</span></span><br><span class="line">        self.queue = []</span><br><span class="line">        self.max_size = max_size</span><br><span class="line">        self.lock = threading.Lock()</span><br><span class="line">        self.condition = threading.Condition()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当前队列元素的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 多线程调用可能会影响队列大小，需要进行加锁和解锁操作</span></span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        size = <span class="built_in">len</span>(self.queue)</span><br><span class="line">        self.lock.release()</span><br><span class="line">        <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 往队列里面放入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.max_size != <span class="number">0</span> <span class="keyword">and</span> self.size() &gt; self.max_size:</span><br><span class="line">            <span class="keyword">return</span> ThreadingSafeQueueException()</span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        self.queue.append(item)</span><br><span class="line">        self.lock.release()</span><br><span class="line">        <span class="comment"># 当队列为空，可能会发生阻塞。往队列放入元素需要通知阻塞的线程继续执行</span></span><br><span class="line">        self.condition.acquire()</span><br><span class="line">        self.condition.notify()</span><br><span class="line">        self.condition.release()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">batch_put</span>(<span class="params">self, item_list</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(item_list, <span class="built_in">list</span>):</span><br><span class="line">            item_list = <span class="built_in">list</span>(item_list)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">            self.put(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从队列中取出元素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self, block=<span class="literal">False</span>, timeout=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        block:当队列中没有元素时，是否阻塞去等待</span></span><br><span class="line"><span class="string">        timeout:阻塞等待时间</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.size() == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 需要阻塞等待</span></span><br><span class="line">            <span class="keyword">if</span> block:</span><br><span class="line">                self.condition.acquire()</span><br><span class="line">                self.condition.wait(timeout=timeout)</span><br><span class="line">                self.condition.release()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        item = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 再次判断队列长度。为保持操作的原子性，操作需要在线程锁中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.queue) &gt; <span class="number">0</span>:</span><br><span class="line">            item = self.queue.pop()</span><br><span class="line">        self.lock.release()</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        item = self.queue[index]</span><br><span class="line">        self.lock.release()</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试队列是否成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    queue = ThreadingSafeQueue(max_size=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">produceor</span>():</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            queue.put(<span class="number">1</span>)</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">consumer</span>():</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            item = queue.pop(block=<span class="literal">True</span>,timeout=<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;get item form queue: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(item))</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    thread1 = threading.Thread(target=produceor)</span><br><span class="line">    thread2 = threading.Thread(target=consumer)</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    thread1.join()</span><br><span class="line">    thread2.join()</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">get item form queue: 1</span></span><br><span class="line"><span class="string">get item form queue: None</span></span><br><span class="line"><span class="string">get item form queue: 1</span></span><br><span class="line"><span class="string">get item form queue: None</span></span><br><span class="line"><span class="string">get item form queue: 1</span></span><br><span class="line"><span class="string">get item form queue: None</span></span><br><span class="line"><span class="string">get item form queue: 1</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 生产者append1之后，消费者取到了，与此同时生产者休眠三秒，消费者休眠一秒。一秒后消费者取到空值，此时进行等待，两秒后，生成者append1，重复。。。</span></span><br></pre></td></tr></table></figure><h2 id="实现基本任务对象Task"><a href="#实现基本任务对象Task" class="headerlink" title="实现基本任务对象Task"></a>实现基本任务对象Task</h2><p>实现基本任务对象：通过任务参数、任务唯一标记（uuid）、任务具体的执行逻辑</p><p>task.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本任务对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, func, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 任务具体逻辑 ，通过函数引用传递过来</span></span><br><span class="line">        self.<span class="built_in">callable</span> = func</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        self.<span class="built_in">id</span> = uuid.uuid4()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Task id: &#x27;</span> + <span class="built_in">str</span>(self.<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><p>测试基本任务对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;this is a task test&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    task = Task(func=my_func)</span><br><span class="line">    <span class="built_in">print</span>(task)</span><br><span class="line">    </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Task id: 31be88be-8d02-4ed6-908a-f28592c35898</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="线程池简介"><a href="#线程池简介" class="headerlink" title="线程池简介"></a>线程池简介</h2><h3 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池"></a>什么是线程池</h3><ul><li>线程池是存放多个线程的容器</li><li>CPU调度线程执行后不会销毁线程，将线程放回线程池重复利用</li></ul><h3 id="为什么使用线程池"><a href="#为什么使用线程池" class="headerlink" title="为什么使用线程池"></a>为什么使用线程池</h3><ul><li>线程是稀缺资源，不应该频繁创建和销毁</li><li>架构解耦，线程创建和业务处理解耦，更加优雅</li><li>线程池是使用线程的最佳实践</li></ul><h2 id="实现任务处理线程ProcessThread"><a href="#实现任务处理线程ProcessThread" class="headerlink" title="实现任务处理线程ProcessThread"></a>实现任务处理线程ProcessThread</h2><ul><li>任务处理线程需要不断的从任务队列里取任务执行</li><li>任务处理线程需要有一个标记，标记线程什么时候应该停止</li></ul><p>实现任务处理线程：<br>基本属性（任务队列，标记）、线程执行的逻辑（run）、线程停止（stop）</p><p>pool.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operate_system.task <span class="keyword">import</span> Task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 实现任务处理线程 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, task_queue, *args, **kwargs</span>):</span></span><br><span class="line">        threading.Thread.__init__(self, *args, **kwargs)</span><br><span class="line">        <span class="comment"># 线程停止标记</span></span><br><span class="line">        self.dismiss_flag = threading.Event()</span><br><span class="line">        <span class="comment"># 任务队列（处理线程不断从队列取出元素处理）</span></span><br><span class="line">        self.task_queue = task_queue</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 判断线程是否被要求停止</span></span><br><span class="line">            <span class="keyword">if</span> self.dismiss_flag.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            task = self.task_queue.pop()</span><br><span class="line">            <span class="comment"># 判断是否为我们定义的基本任务对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(task,Task):</span><br><span class="line">                <span class="comment"># 若不是 忽略任务</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 执行task实际逻辑（是透过函数调用引进来的）</span></span><br><span class="line">            result = task.<span class="built_in">callable</span>(*task.args,**task.kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dismiss</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.dismiss_flag.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.dismiss()</span><br></pre></td></tr></table></figure><h2 id="实现任务处理线程池Pool"><a href="#实现任务处理线程池Pool" class="headerlink" title="实现任务处理线程池Pool"></a>实现任务处理线程池Pool</h2><ul><li>存放多个任务处理线程</li><li>负责多个线程的启停</li><li>管理向线程池的提交任务，下发给线程去执行</li></ul><p>实现任务处理线程池：基本属性、提交任务（put、batch_put）、线程启停（start、join）、线程池大小（size）</p><p>pool.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operate_system.queue <span class="keyword">import</span> ThreadingSafeQueue</span><br><span class="line"><span class="keyword">from</span> operate_system.task <span class="keyword">import</span> Task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 实现线程池 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, size=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> size:</span><br><span class="line">            <span class="comment"># 约定线程池大小为cput核心数的两倍（最佳实践）</span></span><br><span class="line">            size = psutil.cpu_count() * <span class="number">2</span></span><br><span class="line">            <span class="comment"># 线程池</span></span><br><span class="line">            self.pool = ThreadingSafeQueue(size)</span><br><span class="line">            <span class="comment"># 任务队列</span></span><br><span class="line">            self.task_queue = ThreadingSafeQueue()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                self.pool.put(ProcessThread(self.task_queue))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(self.pool.size()):</span><br><span class="line">            thread = self.pool.get(index)</span><br><span class="line">            thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 停止线程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">join</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(self.pool.size()):</span><br><span class="line">            thread = self.pool.get(index)</span><br><span class="line">            thread.stop()</span><br><span class="line">        <span class="comment"># 清空线程池</span></span><br><span class="line">        <span class="keyword">while</span> self.pool.size():</span><br><span class="line">            thread = self.pool.pop()</span><br><span class="line">            thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 往线程池提交任务</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, task</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(task, Task):</span><br><span class="line">            <span class="keyword">raise</span> TaskErrorException()</span><br><span class="line">        self.task_queue.put(task)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量提交</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">batch_put</span>(<span class="params">self, task_list</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(task_list, <span class="built_in">list</span>):</span><br><span class="line">            task_list = <span class="built_in">list</span>(task_list)</span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> task_list:</span><br><span class="line">            self.put(task)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.pool.size()</span><br></pre></td></tr></table></figure><h2 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleTask</span>(<span class="params">task.Task</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, <span class="built_in">callable</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="built_in">callable</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span>():</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;this is SimpleTask callable function 1.&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;this is SimpleTask callable function 2.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="comment"># 1.初始化一个线程池</span></span><br><span class="line">    test_pool = pool.ThreadPool()</span><br><span class="line">    test_pool.start()</span><br><span class="line">    <span class="comment"># 2.生成一系列的任务</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        simple_task = SimpleTask(process)</span><br><span class="line">        <span class="comment"># 3.往线程池提交任务执行</span></span><br><span class="line">        test_pool.put(simple_task)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p><img src="linux3/image-20200821193453104.png" alt="image-20200821193453104"></p><p>可以看到并发执行的函数</p><h2 id="实现异步任务处理AsyncTask"><a href="#实现异步任务处理AsyncTask" class="headerlink" title="实现异步任务处理AsyncTask"></a>实现异步任务处理AsyncTask</h2><p>为了清楚的知道任务什么时候开始和结束。</p><p>需求：需要给任务添加一个标记，任务完成后，则标记为已完成。任务完成时，可直接获取任务运行结果。任务未完成时，获取任务结果，会阻塞获取线程。</p><p>实现AsyncTask：设置运行结果<code>(set_result)</code>，获取运行结果<code>(get_result)</code></p><p>在task.py中添加AsyncTask类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span>(<span class="params">Task</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 异步任务处理对象 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,func, *args, **kwargs</span>):</span></span><br><span class="line">        self.result = <span class="literal">None</span></span><br><span class="line">        self.condition = threading.Condition()</span><br><span class="line">        <span class="built_in">super</span>().__init__(func, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置运行结果</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_result</span>(<span class="params">self,result</span>):</span></span><br><span class="line">        self.condition.acquire()</span><br><span class="line">        self.result = result</span><br><span class="line">        <span class="comment"># 通知可能在等待的线程</span></span><br><span class="line">        self.condition.notify()</span><br><span class="line">        self.condition.release()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取运行结果</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.condition.acquire()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.result:</span><br><span class="line">            self.condition.wait()</span><br><span class="line">        result= self.result</span><br><span class="line">        self.condition.release()</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>同时需要给任务处理线程添加任务结果<code>set_result</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operate_system.queue <span class="keyword">import</span> ThreadingSafeQueue</span><br><span class="line"><span class="keyword">from</span> operate_system.task <span class="keyword">import</span> Task, AsyncTask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProcessThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 实现任务处理线程 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 判断线程是否被要求停止</span></span><br><span class="line">            <span class="keyword">if</span> self.dismiss_flag.is_set():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            task = self.task_queue.pop()</span><br><span class="line">            <span class="comment"># 判断是否为我们定义的基本任务对象</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(task, Task):</span><br><span class="line">                <span class="comment"># 若不是 忽略任务</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 执行task实际逻辑（是透过函数调用引进来的）</span></span><br><span class="line">            result = task.<span class="built_in">callable</span>(*task.args, **task.kwargs)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(task,AsyncTask):</span><br><span class="line">                task.set_result(result)</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>随后我们对异步任务进行测试</p><p>test.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_test</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_process</span>():</span></span><br><span class="line">        num = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">            num += i</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.初始化一个线程池</span></span><br><span class="line">    test_pool = pool.ThreadPool()</span><br><span class="line">    test_pool.start()</span><br><span class="line">    <span class="comment"># 2.生成一系列的任务</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        async_task = task.AsyncTask(func=async_process)</span><br><span class="line">        <span class="comment"># 3.往线程池提交任务执行</span></span><br><span class="line">        test_pool.put(async_task)</span><br><span class="line">        result = async_task.get_result()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get result &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br></pre></td></tr></table></figure><p>运行后输出了结果，说明这个异步任务 任务完成时，可直接获取任务运行结果</p><p>接下来判断异步任务的等待(wait)是否起作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_test2</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 测试是否可以真正的等待（wait）&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_process</span>():</span></span><br><span class="line">        num = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">            num += i</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.初始化一个线程池</span></span><br><span class="line">    test_pool = pool.ThreadPool()</span><br><span class="line">    test_pool.start()</span><br><span class="line">    <span class="comment"># 2.生成一系列的任务</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        async_task = task.AsyncTask(func=async_process)</span><br><span class="line">        <span class="comment"># 3.往线程池提交任务执行</span></span><br><span class="line">        test_pool.put(async_task)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get result in timestamp:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(time.time())))</span><br><span class="line">        result = async_task.get_result()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get result in timestamp:&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(time.time()),result))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 运行后结果：</span></span><br><span class="line"><span class="string"> get result in timestamp:1598018392</span></span><br><span class="line"><span class="string">get result in timestamp:1598018393,19901</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>给task函数添加了1秒等待，在这1秒中，<code>get_result</code>如果没有获得结果会持续等待，说明等待起了作用</p><p>接下来测试没有等待是否可以获取结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_test3</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 测试没有等待是否也可以正常获取结果&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">async_process</span>():</span></span><br><span class="line">        num = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">            num += i</span><br><span class="line">        <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.初始化一个线程池</span></span><br><span class="line">    test_pool = pool.ThreadPool()</span><br><span class="line">    test_pool.start()</span><br><span class="line">    <span class="comment"># 2.生成一系列的任务</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        async_task = task.AsyncTask(func=async_process)</span><br><span class="line">        <span class="comment"># 3.往线程池提交任务执行</span></span><br><span class="line">        test_pool.put(async_task)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get result in timestamp:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(time.time())))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 可以转而去处理其他任务</span></span><br><span class="line">        <span class="comment"># 此时get_result实际上不会发生等待的</span></span><br><span class="line">        result = async_task.get_result()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get result in timestamp:&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(time.time()), result))</span><br><span class="line">        </span><br><span class="line"> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 运行结果为：</span></span><br><span class="line"><span class="string"> get result in timestamp:1598020223</span></span><br><span class="line"><span class="string">get result in timestamp:1598020224,19901</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>这里成功间隔了一秒钟获取到结果。说明将任务提交线程池处理后，可以异步去执行其他任务，而不影响最后获取结果。</p><p>这样我们就实现了异步任务处理。</p><p>本文的内容重点还是异步任务处理，不在于语言，python只是为了帮助理解多线程、异步等原理。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 异步 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask框架入门</title>
      <link href="/2020/08/05/flask1/"/>
      <url>/2020/08/05/flask1/</url>
      
        <content type="html"><![CDATA[<h2 id="Flask微框架"><a href="#Flask微框架" class="headerlink" title="Flask微框架"></a>Flask微框架</h2><h3 id="认识FLask"><a href="#认识FLask" class="headerlink" title="认识FLask"></a>认识FLask</h3><p>Python实现的Web开发微框架，小而美，丰富的周边扩展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv flask//创建虚拟环境</span><br><span class="line">pip install Flask//安装falsk</span><br><span class="line">workon 虚拟环境名//切换虚拟环境</span><br><span class="line">deactivate//退出虚拟环境</span><br></pre></td></tr></table></figure><h4 id="第一个Flask程序"><a href="#第一个Flask程序" class="headerlink" title="第一个Flask程序"></a>第一个Flask程序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello_world&#x27;</span></span><br></pre></td></tr></table></figure><p>参数<code>__name__</code>解释：</p><p>表示Flask应用的主模块或包的名称。Flask使用该参数确定应用的位置，然后找到应用中其他文件的位置，如网页中的图片位置，模块目录</p><p>装饰器<code>app.route()</code>:</p><p>表示一个路由配置，即：用户在浏览器输入URL，使用对应的函数处理其中的业务逻辑</p><h3 id="MTV模型介绍"><a href="#MTV模型介绍" class="headerlink" title="MTV模型介绍"></a>MTV模型介绍</h3><p>模型（Model）</p><ul><li>Flask-PyMongo/Flask-MongoKit</li><li>Flask-SQLAlchemy</li></ul><p>视图（View）</p><ul><li>Flask-WTF/bootstrap-flask/Flask-Uploads</li></ul><p>模板（Template）</p><ul><li>Jinja2</li></ul><h3 id="Flask启动选项及调试"><a href="#Flask启动选项及调试" class="headerlink" title="Flask启动选项及调试"></a>Flask启动选项及调试</h3><p>步骤一：设置环境变量</p><p>先切换到Flask项目目录，将之前的代码保存到flasker.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows：set FLASK_APP=flasker.py</span><br><span class="line">Mac/Linux：export FLASK_APP=flasker.py</span><br></pre></td></tr></table></figure><p>步骤二：flask run启动内置web服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flask run --host=0.0.0.0 --port=8001 或者：</span><br><span class="line">flask run -h 0.0.0.0 -p 8001</span><br><span class="line">flask run //不指定端口 使用默认</span><br></pre></td></tr></table></figure><p>通过flask run -h 0.0.0.0 -p 8001启动之后，可通过电脑ip地址:8001（通过局域网访问）、127.0.0.1:8001、localhost:8001（后两者类似）访问</p><h4 id="开启调试模式"><a href="#开启调试模式" class="headerlink" title="开启调试模式"></a>开启调试模式</h4><p>步骤一：设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows：set FLASK_ENV=development</span><br><span class="line">Mac/Linux：export FLASK_ENV=development</span><br></pre></td></tr></table></figure><p>步骤二：flask run 启动内置web服务器</p><p>对于flask v1.0以前：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flasker.py中添加</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>然后直接执行flasker.py</p><h2 id="URL配置及报文显示"><a href="#URL配置及报文显示" class="headerlink" title="URL配置及报文显示"></a>URL配置及报文显示</h2><h3 id="url配置及路由"><a href="#url配置及路由" class="headerlink" title="url配置及路由"></a>url配置及路由</h3><p>方式一：使用装饰器 method是请求方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params">url, methods</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 登录请求需要GET 和 POST两种请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="comment"># 指定参数类型</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure><p>方式二：使用api配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.add_url_rule(url, url_name, view_name)</span><br></pre></td></tr></table></figure><p>url参数类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>接受任何不包括含斜杠的文本（默认值）</td></tr><tr><td>int</td><td>接受正整数</td></tr><tr><td>float</td><td>接受正浮点数</td></tr><tr><td>path</td><td>类似string，但可以包含斜杠</td></tr><tr><td>uuid</td><td>接受UUID字符串</td></tr></tbody></table><p>查看URL规则列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.url_map</span><br></pre></td></tr></table></figure><p>URL逆向解析（根据名称解析成URL字符串）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url_for(url_name,**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态文件（js/css/图片）引用</span></span><br><span class="line">url_for(<span class="string">&#x27;static&#x27;</span>,filename=<span class="string">&#x27;style.css&#x27;</span>)</span><br></pre></td></tr></table></figure><p>pycharm 可以直接新建flask项目，（如果使用了虚拟环境）同时记得使用虚拟环境的python解释器。</p><p>pycharm - edit configurations 里面可以设置自定义的启动地址和端口号：</p><p><img src="flask1/image-20200805150851566.png" alt="image-20200805150851566"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! wdnmd&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入url值</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">username</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(username)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入url的值为可选时,需要加入两个装饰器</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page/&lt;page&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span>(<span class="params">page=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;this is page &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(page)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出现有url规则</span></span><br><span class="line"><span class="built_in">print</span>(app.url_map)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出了此时的url规则</span></span><br><span class="line"><span class="string">Map([&lt;Rule &#x27;/page&#x27; (HEAD, OPTIONS, GET) -&gt; page&gt;,</span></span><br><span class="line"><span class="string"> &lt;Rule &#x27;/&#x27; (HEAD, OPTIONS, GET) -&gt; hello_world&gt;,</span></span><br><span class="line"><span class="string"> &lt;Rule &#x27;/static/&lt;filename&gt;&#x27; (HEAD, OPTIONS, GET) -&gt; static&gt;,</span></span><br><span class="line"><span class="string"> &lt;Rule &#x27;/hello/&lt;username&gt;&#x27; (HEAD, OPTIONS, GET) -&gt; hello&gt;,</span></span><br><span class="line"><span class="string"> &lt;Rule &#x27;/page/&lt;page&gt;&#x27; (HEAD, OPTIONS, GET) -&gt; page&gt;])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="请求——响应及上下文对象"><a href="#请求——响应及上下文对象" class="headerlink" title="请求——响应及上下文对象"></a>请求——响应及上下文对象</h3><p>请求-响应：就是浏览器发送一个请求，服务器接收后返回相应的视图</p><p><strong>上下文对象</strong>:</p><p>上下文通俗的理解就是工作的环境</p><blockquote><p>每一段程序都有很多外部变量。只有像Add这种简单的函数才是没有外部变量的。一旦你的一段程序有了外部变量，这段程序就不完整，不能独立运行。你为了使他们运行，就要给所有的外部变量一个一个写一些值进去。这些值的集合就叫上下文。</p></blockquote><ul><li><p>应用上下文</p><p>应用指的是flask 的app</p></li><li><p>请求上下文</p></li><li><p>在分派请求之前激活应用上下文和请求上下文</p></li><li><p>在请求处理完成后将其删除</p></li></ul><p><strong>请求分派</strong>：就是分派 url对应视图</p><p><strong>应用上下文对象</strong>：</p><ul><li><p>current_app    当前应用的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,current_app</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(current_app)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! wdnmd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出 &lt;Flask &#x27;app&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 这个app是flask中app.py,不是指的变量app</span></span><br></pre></td></tr></table></figure></li><li><p>g     处理请求时的临时存储对象，每次请求都会重设这个变量</p></li></ul><p><strong>请求上下文对象</strong>：</p><ul><li>request    请求对象，封装了客户端发出的HTTP请求中的内容</li><li>session    用户会话（dict），各请求之间的数据共享</li></ul><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>指的是请求上下文对象中的request</p><p><strong>请求报文常用参数：</strong></p><ul><li><p>method：请求的类型（GET/POST/OPTIONS等）</p></li><li><p>form：POST请求数据dict</p></li><li><p>args：GET请求数据dict</p></li><li><p>values: POST 和 GET请求数据集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取get请求参数</span></span><br><span class="line">request.args.get(<span class="string">&#x27;page&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">request.values.get(<span class="string">&#x27;page&#x27;</span>,<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></li><li><p>files：上传的文件数据dict</p></li><li><p>cookies：请求中的cookie dict</p></li><li><p>headers：HTTP请求头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求头参数</span></span><br><span class="line">request.header</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Host: 127.0.0.1:8001</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36 Edg/84.0.522.52</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="string">Sec-Fetch-Site: none</span></span><br><span class="line"><span class="string">Sec-Fetch-Mode: navigate</span></span><br><span class="line"><span class="string">Sec-Fetch-User: ?1</span></span><br><span class="line"><span class="string">Sec-Fetch-Dest: document</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span></span><br><span class="line"><span class="string">Cookie: csrftoken=mTn4iW7HqnMg40Px3VrnAnuUlhAnV76hwXulU3QeLL4jXHjWqfaISvClGv752MuN; sessionid=ezwv6ohgjt97jmg8yqjbhf8ygpubqvmy</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 获取项目部署地址</span></span><br><span class="line">request.header.get(<span class="string">&#x27;host&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 获取请求头</span></span><br><span class="line">request.header.get(<span class="string">&#x27;user-agent&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 获取用户请求的IP地址</span></span><br><span class="line">request.remote_addr</span><br></pre></td></tr></table></figure></li></ul><p>更多详见官方文档<a href="https://flask.palletsprojects.com/en/1.1.x/">https://flask.palletsprojects.com/en/1.1.x/</a></p><p>中文文档<a href="http://docs.jinkan.org/docs/flask/">http://docs.jinkan.org/docs/flask/</a></p><h4 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a>请求钩子</h4><p>如下场景如何实现：<br>    每个请求汇总都要验证用户信息（是否已登录、是否有权限访问）<br>    限制某些IP的恶意请求</p><p>使用钩子函数可以减少重复代码的编写，便于维护</p><ul><li>before_first_request    服务器初始化后第一个请求到达前执行</li><li>before_request    每一个请求到达前执行</li><li>after_request    每次请求处理完成后执行，如果请求过程中产生了异常，则不执行</li><li>teardown_request    每次请求处理完成后执行，如果请求过程中产生了异常也执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.before_first_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first_request</span>():</span></span><br><span class="line"><span class="comment"># 第一个请求到来前执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;first_request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before_request</span>():</span></span><br><span class="line"><span class="comment"># 每次请求到来前执行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;before_request&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求处理完后，响应给到浏览器，必须带参数</span></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span>(<span class="params">resp</span>):</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;after_request&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>响应可以是字符串，可以是元组，元组的格式为(response,status,headers)或(response,headers)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="comment"># 元组的格式为(response,status,headers)</span></span><br><span class="line">    <span class="comment"># 请求头为字典</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;找不到了&#x27;</span>, <span class="number">403</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;user_id&#x27;</span>: <span class="string">&#x27;abc123&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_found</span>(<span class="params">err</span>):</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;自定义状态 404&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 打印错误信息</span></span><br><span class="line">    <span class="built_in">print</span>(err)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您要的页面丢失了&#x27;</span></span><br></pre></td></tr></table></figure><p>响应元组：<br>response——响应内容<br>status——响应状态码<br>headers——响应头信息</p><p><code>make_response</code>可以用来获取响应对象然后对它进行修改</p><p><code>render_template</code>可以渲染html页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="comment"># 构造一个响应对象</span></span><br><span class="line">    resp = make_response(</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>, <span class="number">404</span>    </span><br><span class="line">    )</span><br><span class="line">    resp.headers[<span class="string">&#x27;token&#x27;</span>] = <span class="string">&#x27;my_token&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/html&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">html</span>():</span></span><br><span class="line">    <span class="comment"># 从templates文件夹中寻找test.html</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;test.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="重定向等内部视图"><a href="#重定向等内部视图" class="headerlink" title="重定向等内部视图"></a>重定向等内部视图</h3><p><code>redirect</code>实现重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(<span class="string">&#x27;/url&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>abort</code>处理错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将视图状态吗改为404</span></span><br><span class="line">abort(<span class="number">404</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django安全及维护————以积分商城为例</title>
      <link href="/2020/07/29/Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/"/>
      <url>/2020/07/29/Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="表单重复提交的问题"><a href="#表单重复提交的问题" class="headerlink" title="表单重复提交的问题"></a>表单重复提交的问题</h2><p>思考：</p><p>支付时，快速点击，多次提交会有什么问题？</p><p>快速多次点击会多次提交表单。比如注册页面多次点击之后会提示已注册，对用户来说不太友好。</p><p>CSRF（Cross-site request forgery）跨站请求伪造</p><blockquote><p>某些恶意网站上包含链接、表单提交按钮或者JavaScript，它们会利用登录过的用户在浏览器中的认证信息视图在你的网站上完成某些操作，这就是跨站请求伪造。</p><p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：<strong>简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的</strong>。</p></blockquote><p>对于上面的表单重复提交问题，解决思路与应对csrf攻击类似。</p><h3 id="使用CSRF保护（针对同步提交，比如注册页面）"><a href="#使用CSRF保护（针对同步提交，比如注册页面）" class="headerlink" title="使用CSRF保护（针对同步提交，比如注册页面）"></a>使用CSRF保护（针对同步提交，比如注册页面）</h3><ol><li><p>在MIDDLEWARE设置中激活CSRF中间件</p><p><code>django.middleware.csrf.CsrfViewMiddleware</code></p></li><li><p><code>&lt;form&gt;</code>元素中使用csrf_token标签（POST请求)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;.&quot;</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择合适的渲染方式</p><p>视图函数中，确保使用RequestContext来渲染（或者render()函数）</p><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/image-20200730170138575.png" alt="image-20200730170138575"></p></li></ol><p>可以看到开启使用CSRF保护之后，浏览器源码会生成一个隐藏的表单域。这个表单中自动生成了唯一的value值（每一次request都会有不同的value值），提交表单时候会将其一并提交，因为value值唯一，就不会有重复提交的情况。</p><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/image-20200730170604352.png" alt="image-20200730170604352"></p><h3 id="表单双重提交问题"><a href="#表单双重提交问题" class="headerlink" title="表单双重提交问题"></a>表单双重提交问题</h3><p>解决了CSRF保护，之后积分商城还有一个关于表单提交的bug，就是双重提交的问题。但快速点击表单提交按钮时候，会发生数据库重复输入的报错，解决办法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;weui-content&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;.&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form_id&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;weui-btn weui-btn_warn&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;submit_button_id&#x27;</span>&gt;</span>注册并登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">$( <span class="string">&quot;#submit_button_id&quot;</span> ).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">     <span class="comment">// jQuery prop() 方法设置或返回被选元素的属性和值。</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 当该方法用于返回属性值时，则返回第一个匹配元素的值。</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 当该方法用于设置属性值时，则为匹配元素集合设置一个或多个属性/值对。</span></span></span><br><span class="line"><span class="javascript">    $( <span class="string">&quot;#submit_button_id&quot;</span> ).prop(<span class="string">&#x27;disabled&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    $( <span class="string">&quot;#form_id&quot;</span> ).submit();</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="AJAX-POST请求使用CSRF保护（针对异步提交）"><a href="#AJAX-POST请求使用CSRF保护（针对异步提交）" class="headerlink" title="AJAX  POST请求使用CSRF保护（针对异步提交）"></a>AJAX  POST请求使用CSRF保护（针对异步提交）</h3><p><a href="https://docs.djangoproject.com/en/2.2/ref/csrf/">https://docs.djangoproject.com/en/2.2/ref/csrf/</a></p><p>对于添加购物车这种post请求 csrf保护 会产生报错或者添加失败，</p><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/image-20200730205220318.png" alt="image-20200730205220318"></p><p>解决办法如下：</p><ol><li><p>获取csrftoken</p><p>方式一：从Cookie获取csrftoken</p><p>项目设置中添加 <code>CSRF_USE_SESSIONS=False</code>，</p></li></ol><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/image-20200730204514846.png" alt="image-20200730204514846"></p><p>然后在到对应的html模板中添加jquery代码，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie &amp;&amp; <span class="built_in">document</span>.cookie !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> cookies = <span class="built_in">document</span>.cookie.split(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> cookie = cookies[i].trim();</span><br><span class="line">            <span class="comment">// Does this cookie string begin with the name we want?</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.substring(<span class="number">0</span>, name.length + <span class="number">1</span>) === (name + <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line">                cookieValue = <span class="built_in">decodeURIComponent</span>(cookie.substring(name.length + <span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> csrftoken = getCookie(<span class="string">&#x27;csrftoken&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​    方式二：从DOM获取csrftoken</p><p>​    项目设置中添加 CSRF_USE_SESSIONS=True，在html模板中添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//using jQuery</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> csrftoken = jQuery(<span class="string">&#x27;[name=csrfmiddlewaretoken]&#x27;</span>).val()</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在请求头设置token</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">csrfSafeMethod</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// these HTTP methods do not require CSRF protection</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="regexp">/^(GET|HEAD|OPTIONS|TRACE)$/</span>.test(method));</span><br><span class="line">&#125;</span><br><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">    <span class="attr">beforeSend</span>: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, settings</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!csrfSafeMethod(settings.type) &amp;&amp; !<span class="built_in">this</span>.crossDomain) &#123;</span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;X-CSRFToken&quot;</span>, csrftoken);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时 post请求可以成功提交而不会被拦截</p><h2 id="安全维护"><a href="#安全维护" class="headerlink" title="安全维护"></a>安全维护</h2><h3 id="bug邮件通知"><a href="#bug邮件通知" class="headerlink" title="bug邮件通知"></a>bug邮件通知</h3><ul><li><p>发送文字邮件</p></li><li><p>发送HTML邮件</p></li><li><p>发送带附件的邮件</p></li><li><p>发送多个邮件</p></li><li><p>打破连接限制，连接复用</p><p>譬如用户注册 绑定邮箱激活的页面，就可以只使用一个链接，通过用户名和密码登录该链接实现激活</p></li></ul><p>对于以上场景，实现方法类似，django2.2都有提供</p><p><a href="https://docs.djangoproject.com/en/2.2/topics/email/">https://docs.djangoproject.com/en/2.2/topics/email/</a></p><p>Django支持SMTP服务发送邮件，例如我们使用qq邮箱的SMTP服务，首先到qq邮箱找到SMTP服务设置指南，并且确保SMTP服务开启，然后生成授权码</p><blockquote><p>SMTP是一种提供可靠且有效的电子邮件传输的协议。SMTP是建立在FTP文件传输服务上的一种邮件服务，主要用于系统之间的邮件信息传递，并提供有关来信的通知。SMTP独立于特定的传输子系统，且只需要可靠有序的数据流信道支持，SMTP的重要特性之一是其能跨越网络传输邮件，即“SMTP邮件中继”。</p><p><a href="https://baike.baidu.com/item/SMTP/175887?fr=aladdin">https://baike.baidu.com/item/SMTP/175887?fr=aladdin</a></p></blockquote><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/image-20200804115823944.png" alt="image-20200804115823944"></p><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/20090508_1_3.jpg" alt="img"></p><p>在项目中添加发送邮件配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 邮件发送配置</span></span><br><span class="line"><span class="comment"># 发送邮件的服务器</span></span><br><span class="line">EMAIL_HOST = <span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line"><span class="comment"># 端口号EMAIL_PORT 默认25 不考虑加密情况可以不做设置。</span></span><br><span class="line"><span class="comment"># 你的邮箱名和STMP授权码</span></span><br><span class="line">EMAIL_HOST_USER = <span class="string">&#x27;jwei.gan@qq.com&#x27;</span></span><br><span class="line">EMAIL_HOST_PASSWORD = <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="普通邮件发送模板"><a href="#普通邮件发送模板" class="headerlink" title="普通邮件发送模板"></a>普通邮件发送模板</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"></span><br><span class="line">send_mail(</span><br><span class="line">    <span class="string">&#x27;Subject here&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Here is the message.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;from@example.com&#x27;</span>,</span><br><span class="line">    [<span class="string">&#x27;to@example.com&#x27;</span>],</span><br><span class="line">    fail_silently=<span class="literal">False</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/image-20200804154820186.png" alt="image-20200804154820186"></p><h4 id="自动发送异常邮件到指定邮箱"><a href="#自动发送异常邮件到指定邮箱" class="headerlink" title="自动发送异常邮件到指定邮箱"></a>自动发送异常邮件到指定邮箱</h4><p>比如Django在项目中添加ADMINS设置，将可以发送报错的内容到管理者邮箱</p><blockquote><p><code>ADMINS</code></p><p>Default: <code>[]</code> (Empty list)</p><p>A list of all the people who get code error notifications. When <a href="https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-DEBUG"><code>DEBUG=False</code></a>（注：同时修改ALLOWED_HOST = [‘*’]） and <a href="https://docs.djangoproject.com/en/2.2/topics/logging/#django.utils.log.AdminEmailHandler"><code>AdminEmailHandler</code></a> is configured in <a href="https://docs.djangoproject.com/en/2.2/ref/settings/#std:setting-LOGGING"><code>LOGGING</code></a> (done by default), Django emails these people the details of exceptions raised in the request/response cycle.</p><p>(确保设置了关闭了debug模式)</p><p>Each item in the list should be a tuple of (Full name, email address). Example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;[(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>), (<span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;mary@example.com&#x27;</span>)]</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ADMINS = [(<span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>), (<span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;mary@example.com&#x27;</span>)]</span><br><span class="line"><span class="comment"># 配置发送邮件者</span></span><br><span class="line">SERVER_EMAIL = <span class="string">&#x27;jwei.gan@qq.com&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在任意一个页面raise一个异常试试</p><p>就会自动收到异常的邮件</p><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/image-20200804155849068.png" alt="image-20200804155849068"></p><p>django2.2支持的其他邮件类型都可以查看django官方文档</p><h3 id="日志记录配置"><a href="#日志记录配置" class="headerlink" title="日志记录配置"></a>日志记录配置</h3><p>logging是一个python标准库</p><p>logging的四个部分（配置logging中很重要）：</p><ul><li><p>logger——日志记录入口</p><p>logger的级别：</p><ul><li>DEBUG：用于调试目的的底层系统信息</li><li>INFO: 普通的系统信息</li><li>WARNING： 警告，较小的问题，不影响执行顺序</li><li>ERROR: 错误，较大的问题</li><li>CRITICAL: 严重，致命的问题</li></ul><p>logger记录内容：</p><ul><li>django 记录所有内容</li><li>django.request 记录？（官方文档说是记录请求，但是使用后发现没有写入任何内容。。。</li><li>django.server 记录请求</li><li>django.template 记录与渲染模板相关的内容</li><li>django.db.backends 记录数据库操作</li><li>django.security.* 记录与安全相关的内容</li></ul></li><li><p>Handler——决定处理logger中消息的方式</p><p>比如写入文件‘log_file’，控制台输出’console‘，发送邮件’mail_admins’等等</p></li><li><p>Filters——对日志进行条件控制</p></li><li><p>Formatters——日志记录的文本顺序（格式）</p></li></ul><h4 id="在view视图中写入logging的方法"><a href="#在view视图中写入logging的方法" class="headerlink" title="在view视图中写入logging的方法"></a>在view视图中写入logging的方法</h4><p>确保切换到了debug模式，否则本地运行无法读取静态文件，服务器端运行则需要部署nginx。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import the logging library</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment"># Get an instance of a logger</span></span><br><span class="line"><span class="comment"># __name__对应django的记录模式，比如&#x27;django&#x27;等，也可以自定义，但是需要到设置中配置handler</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request, arg1, arg</span>):</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> bad_mojo:</span><br><span class="line"><span class="comment"># Log an error message</span></span><br><span class="line">logger.error(<span class="string">&#x27;Something went wrong!&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="日志记录配置-1"><a href="#日志记录配置-1" class="headerlink" title="日志记录配置"></a>日志记录配置</h4><ul><li>记录SQL日志，份文件存储、控制台打印</li><li>错误日志发送到邮件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 这是最普通Logging模板 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">LOGGING = &#123;</span><br><span class="line"><span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line"><span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 这里logger的操作为写入文件</span></span><br><span class="line"><span class="string">&#x27;log_file&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.FileHandler&#x27;</span>,</span><br><span class="line">            <span class="comment"># 在积分商城中我们使用的是&#x27;filename&#x27;: os.path.join(BASE_DIR,&#x27;log/debug.log&#x27;),</span></span><br><span class="line"><span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;/path/to/django/debug.log&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 对应django的记录信息，‘django’是指默认记录信息</span></span><br><span class="line"><span class="string">&#x27;django&#x27;</span>: &#123;</span><br><span class="line"><span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;log_file&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; 复杂的logging配置 配置原理在前面已经提到 官方文档中也可查 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="comment"># 格式化log的内容，然后在handler中配置</span></span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;verbose&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;&#123;levelname&#125; &#123;asctime&#125; &#123;module&#125; &#123;process:d&#125; &#123;thread:d&#125; &#123;message&#125;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;&#123;levelname&#125; &#123;message&#125;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment"># 过滤器 用于筛选记录内容的条件</span></span><br><span class="line">    <span class="string">&#x27;filters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;special&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;()&#x27;</span>: <span class="string">&#x27;project.logging.SpecialFilter&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;require_debug_true&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;()&#x27;</span>: <span class="string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;console&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filters&#x27;</span>: [<span class="string">&#x27;require_debug_true&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.StreamHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;simple&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;mail_admins&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;ERROR&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;django.utils.log.AdminEmailHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filters&#x27;</span>: [<span class="string">&#x27;special&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;django&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;django.request&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;mail_admins&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;ERROR&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;myproject.custom&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;console&#x27;</span>, <span class="string">&#x27;mail_admins&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filters&#x27;</span>: [<span class="string">&#x27;special&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如我们要配置一个记录首页及SQL的log内容，该内容必须包含格式化的log数据（verbose）：</p><p>views:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="comment"># 设置一个专门的关于首页的log内容</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 首页视图 &quot;&quot;&quot;</span></span><br><span class="line">    logger.debug(<span class="string">&#x27;调试信息&#x27;</span>)</span><br><span class="line">    logger.info(<span class="string">&#x27;普通消息&#x27;</span>)</span><br><span class="line">    logger.error(<span class="string">&#x27;异常&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>settings:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;verbose&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;&#123;levelname&#125; &#123;asctime&#125; &#123;module&#125; &#123;process:d&#125; &#123;thread:d&#125; &#123;message&#125;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;simple&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;&#123;levelname&#125; &#123;message&#125;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;style&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 这里logger的操作为写入文件</span></span><br><span class="line">        <span class="string">&#x27;log_file&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.FileHandler&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;log/debug.log&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;verbose&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;mail_admins&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;ERROR&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;django.utils.log.AdminEmailHandler&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">        <span class="comment"># 对应django的记录信息</span></span><br><span class="line">        <span class="string">&#x27;django.db.backends&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;log_file&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;index&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;log_file&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;propagate&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后log的内容记录如下：</p><p><img src="Django%E5%AE%89%E5%85%A8%E5%8F%8A%E7%BB%B4%E6%8A%A4/image-20200804212013066.png" alt="image-20200804212013066"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编程问答基础篇1</title>
      <link href="/2020/07/21/python%E7%BC%96%E7%A8%8B%E9%97%AE%E7%AD%94/"/>
      <url>/2020/07/21/python%E7%BC%96%E7%A8%8B%E9%97%AE%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h2 id="1简述解释型和编译型-翻译型-编程语言？"><a href="#1简述解释型和编译型-翻译型-编程语言？" class="headerlink" title="1简述解释型和编译型(翻译型)编程语言？"></a>1简述解释型和编译型(翻译型)编程语言？</h2><p>将较为高级的计算机语言L<sub>1</sub>转化为较为低级的计算机语言L<sub>0</sub>（计算机实际执行的语言），这一转化过程称为程序翻译，翻译的工具称为编译器。然后交给计算机执行。L<sub>1</sub>这种就叫编译型(翻译型)编程语言，有C/C++、Object-C、Golang等</p><p>先用较为低级的计算机语言L<sub>0</sub>实现一个程序（解释器），将高级语言L<sub>1</sub>作为输入，通过该程序转化为较为低级的计算机语言L<sub>0</sub>。这一过程称为程序解释。L<sub>1</sub>这种就叫解释型编程语言，Python、Php、Javascript等</p><ul><li>计算机执行的指令都是L<sub>0</sub></li><li>翻译过程生成新的L<sub>0</sub>程序，解释过程不生成新的L<sub>0</sub>程序</li><li>解释过程由L<sub>0</sub>编写的解释器去解释L<sub>1</sub>程序</li></ul><p>Java、C#属于翻译+解释型语言，例如Java程序会先编译成JVM字节码，然后再解释成机器码执行。</p><h2 id="2Python解释器种类以及特点？"><a href="#2Python解释器种类以及特点？" class="headerlink" title="2Python解释器种类以及特点？"></a>2Python解释器种类以及特点？</h2><p>CPython<br>c语言开发的 使用最广的解释器<br>IPython<br>基于cpython之上的一个交互式计时器 交互方式增强 功能和cpython一样<br>PyPy<br>目标是执行效率 采用JIT技术 对python代码进行动态编译，提高执行效率<br>JPython<br>运行在Java上的解释器 直接把python代码编译成Java字节码执行<br>IronPython<br>运行在微软 .NET 平台上的解释器，把python编译成. NET 的字节码</p><h2 id="3请至少列举5个-PEP8-规范（越多越好）。"><a href="#3请至少列举5个-PEP8-规范（越多越好）。" class="headerlink" title="3请至少列举5个 PEP8 规范（越多越好）。"></a>3请至少列举5个 PEP8 规范（越多越好）。</h2><p><a href="https://www.jianshu.com/p/ffcc66bab3ce">https://www.jianshu.com/p/ffcc66bab3ce</a></p><h2 id="4通过代码实现如下转换："><a href="#4通过代码实现如下转换：" class="headerlink" title="4通过代码实现如下转换："></a>4通过代码实现如下转换：</h2><ul><li><p>二进制转换成十进制：v = “0b1111011”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="built_in">int</span>(x, <span class="number">2</span>))</span><br></pre></td></tr></table></figure></li><li><p>十进制转换成二进制：v = 18</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span>(<span class="built_in">int</span>(x,<span class="number">10</span>))</span><br></pre></td></tr></table></figure></li><li><p>八进制转换成十进制：v = “011” </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="built_in">int</span>(x, <span class="number">8</span>))</span><br></pre></td></tr></table></figure></li><li><p>十进制转换成八进制：v = 30 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">oct</span>(<span class="built_in">int</span>(x,<span class="number">10</span>))</span><br></pre></td></tr></table></figure></li><li><p>十六进制转换成十进制：v = “0x12” </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="built_in">int</span>(v, <span class="number">16</span>))</span><br></pre></td></tr></table></figure></li><li><p>十进制转换成十六进制：v = 87</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hex</span>(<span class="built_in">int</span>(v,<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>进制转化表：</p><table><thead><tr><th>↓</th><th>2进制</th><th>8进制</th><th>10进制</th><th>16进制</th></tr></thead><tbody><tr><td>2进制</td><td>-</td><td>bin(int(x, 8))</td><td>bin(int(x, 10))</td><td>bin(int(x, 16))</td></tr><tr><td>8进制</td><td>oct(int(x, 2))</td><td>-</td><td>oct(int(x, 10))</td><td>oct(int(x, 16))</td></tr><tr><td>10进制</td><td>str(int(x, 2))</td><td>str(int(x, 8))</td><td>-</td><td>str(int(x, 16))</td></tr><tr><td>16进制</td><td>hex(int(x, 2))</td><td>hex(int(x, 8))</td><td>hex(int(x, 10))</td><td>-</td></tr></tbody></table></li></ul><h2 id="5请编写一个函数实现将IP地址转换成一个整数。"><a href="#5请编写一个函数实现将IP地址转换成一个整数。" class="headerlink" title="5请编写一个函数实现将IP地址转换成一个整数。"></a>5请编写一个函数实现将IP地址转换成一个整数。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如 10.3.9.12 转换规则为</span></span><br><span class="line"><span class="comment"># 10           00001010</span></span><br><span class="line"><span class="comment"># 3            00000011</span></span><br><span class="line"><span class="comment"># 9            00001001</span></span><br><span class="line"><span class="comment"># 12           00001100</span></span><br><span class="line"><span class="comment"># 指定位数 分别输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_ip</span>(<span class="params">ip</span>):</span></span><br><span class="line">new_ip = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ip.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        <span class="comment"># 转化为二进制，并补充到8位</span></span><br><span class="line">i = <span class="built_in">bin</span>(<span class="built_in">int</span>(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line">new_ip += i</span><br><span class="line"><span class="keyword">return</span> new_ip</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(format_ip(<span class="string">&#x27;10.3.9.12&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="6python递归的最大层数？"><a href="#6python递归的最大层数？" class="headerlink" title="6python递归的最大层数？"></a>6python递归的最大层数？</h2><blockquote><p>程序调用自身的编程技巧称为递归（ recursion）。递归做为一种算法在程序设计语言中广泛应用。 一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。</p><p>例如，下列为某人祖先的递归定义：<br>某人的双亲是他的祖先（基本情况）。某人祖先的双亲同样是某人的祖先（递归步骤）。斐波纳契数列（Fibonacci Sequence），又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21….. I</p></blockquote><p>Python的最大递归层数是可以设置的,默认的在window上的最大递归层数是998</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># python设置最大递归层数</span></span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    foo(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo(<span class="number">1</span>) <span class="comment"># 可以看到打印到1998</span></span><br></pre></td></tr></table></figure><h2 id="7求结果："><a href="#7求结果：" class="headerlink" title="7求结果："></a>7求结果：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">1</span> <span class="keyword">or</span> <span class="number">3</span> <span class="comment"># 1</span></span><br><span class="line">v2 = <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span> <span class="comment"># 3</span></span><br><span class="line">v3 = <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span> <span class="comment"># 0</span></span><br><span class="line">v4 = <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span> <span class="comment"># 1</span></span><br><span class="line">v5 = <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span> <span class="keyword">or</span> <span class="number">4</span> <span class="comment"># 1</span></span><br><span class="line">v6 = <span class="number">0</span> <span class="keyword">or</span> Flase <span class="keyword">and</span> <span class="number">1</span> <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 情况一：当值中存在None/空值时</span></span><br><span class="line"><span class="comment"># or:获取不为None或者空值的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">None</span> <span class="keyword">or</span> <span class="number">1</span>)<span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">or</span> <span class="literal">None</span>)<span class="comment"># 输出：1</span></span><br><span class="line"><span class="comment"># and:获取为None或者空值的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">None</span> <span class="keyword">and</span> <span class="number">1</span>)<span class="comment"># 输出：None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">and</span> <span class="literal">None</span>)<span class="comment"># 输出：None</span></span><br><span class="line">            </span><br><span class="line"><span class="comment"># 情况二：当值均无空值时</span></span><br><span class="line"><span class="comment"># or:获取前面的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span>)<span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">or</span> <span class="number">1</span>)<span class="comment"># 输出：2</span></span><br><span class="line"><span class="comment"># and:获取后面的值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>)<span class="comment"># 输出：2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> <span class="keyword">and</span> <span class="number">1</span>)<span class="comment"># 输出：1</span></span><br><span class="line"> <span class="comment"># 情况三 0等于False 1等于True 做与或判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：1、or与and优先级相同（顺序执行）2、or具有截断效果</span></span><br></pre></td></tr></table></figure><h2 id="8ascii、unicode、utf-8、gbk-区别？"><a href="#8ascii、unicode、utf-8、gbk-区别？" class="headerlink" title="8ascii、unicode、utf-8、gbk 区别？"></a>8ascii、unicode、utf-8、gbk 区别？</h2><blockquote><p>ascii：把所有的字母的大小写，各种符号用二进制来表示，1bytes代表一个字符</p><p>Unicode：为了统一世界各国语言的不同，统一用2个bytes代表一个字符，特点：速度快，但浪费空间</p><p>utf-8：为了改变Unicode的这种缺点，规定一个英文字符用一个字节表示，一个中文字符用三个字节表示，特点：节省空间，速度慢</p><p>gbk：是中文的字符编码，用2个字节代表一个字符</p></blockquote><h2 id="9字节码和机器码的区别？"><a href="#9字节码和机器码的区别？" class="headerlink" title="9字节码和机器码的区别？"></a>9字节码和机器码的区别？</h2><blockquote><p>机器码(machine code)，学名机器语言指令，有时也被称为原生码（Native Code），是电脑的CPU可直接解读的数据。</p><p>通常意义上来理解的话，机器码就是计算机可以直接执行，并且执行速度最快的代码。</p><p>字节码（Bytecode）是一种包含执行程序、由一序列 op 代码/数据对 组成的二进制文件。字节码是一种中间码，它比机器码更抽象，需要直译器转译后才能成为机器码的中间代码。</p><p>通常情况下它是已经经过编译，但与特定机器码无关。字节码通常不像源码一样可以让人阅读，而是编码后的数值常量、引用、指令等构成的序列。</p><p>字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。字节码的典型应用为Java bytecode。</p><p>字节码在运行时通过JVM（JAVA虚拟机）做一次转换生成机器指令，因此能够更好的跨平台运行。</p><p>总结：字节码是一种中间状态（中间码）的二进制代码（文件）。需要直译器转译后才能成为机器码。</p></blockquote><h2 id="10三元运算规则以及应用场景？"><a href="#10三元运算规则以及应用场景？" class="headerlink" title="10三元运算规则以及应用场景？"></a>10三元运算规则以及应用场景？</h2><p><code>res = 值1 if 条件 else 值2</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h2 id="11举例python2-python3的区别"><a href="#11举例python2-python3的区别" class="headerlink" title="11举例python2 python3的区别"></a>11举例python2 python3的区别</h2><ul><li><p>print语句没有了，取而代之的是print()函数。 Python 2.6与Python 2.7部分地支持这种形式的print语法。</p></li><li><p>unicode</p><p>Python 2 有 ASCII str() 类型，unicode() 是单独的，不是 byte 类型。</p><p>现在， 在 Python 3，我们最终有了 Unicode (utf-8) 字符串，以及一个字节类：byte 和 bytearrays。Python3.X 源码文件默认使用utf-8编码</p></li><li><p>除法运算</p><p>在python 2.x中/除法就跟我们熟悉的大多数语言，比如Java啊C啊差不多，整数相除的结果是一个整数，把小数部分完全忽略掉，浮点数除法会保留小数点的部分得到一个浮点数的结果。</p><p>在python 3.x中/除法不再这么做了，对于整数之间的相除，结果也会是浮点数。</p></li><li><p>异常</p><p>在 Python 3 中处理异常也轻微的改变了，在 Python 3 中我们现在使用 as 作为关键词。</p><p>捕获异常的语法由 except exc, var 改为 except exc as var。</p></li><li><p>八进制</p><p>八进制数必须写成0o777，原来的形式0777不能用了；二进制必须写成0b111。</p><p>新增了一个bin()函数用于将一个整数转换成二进制字串。 Python 2.6已经支持这两种语法。</p><p>在Python 3.x中，表示八进制字面量的方式只有一种，就是0o1000。</p></li><li><p><a href="https://www.runoob.com/python/python-2x-3x.html">https://www.runoob.com/python/python-2x-3x.html</a></p></li></ul><h2 id="12用一行代码实现数值交换"><a href="#12用一行代码实现数值交换" class="headerlink" title="12用一行代码实现数值交换"></a>12用一行代码实现数值交换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><h2 id="13python3和python2中int和long的区别"><a href="#13python3和python2中int和long的区别" class="headerlink" title="13python3和python2中int和long的区别"></a>13python3和python2中int和long的区别</h2><p>python3里面没有long类型，只有int类型</p><p>python2 long() 函数将数字或字符串转换为一个长整型。</p><h2 id="14列举布尔值为False的常见值"><a href="#14列举布尔值为False的常见值" class="headerlink" title="14列举布尔值为False的常见值"></a>14列举布尔值为False的常见值</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0,-0,None,[],(),&#123;&#125;,</span><br><span class="line">使用bool()函数测试即可</span><br></pre></td></tr></table></figure><h2 id="15字符串、列表、元组、字典每个常用的5个方法"><a href="#15字符串、列表、元组、字典每个常用的5个方法" class="headerlink" title="15字符串、列表、元组、字典每个常用的5个方法"></a>15字符串、列表、元组、字典每个常用的5个方法</h2><p>字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">index(&#x27;子串&#x27;，开始位置，结束位置)：有这个子串，返回第一个字符所在位置的下标。如果没有，则报错</span><br><span class="line">find(&#x27;子串&#x27;，开始位置，结束位置) 如果子串不存在，返回-1，不报错</span><br><span class="line">isdigit() 判断是否是纯数字</span><br><span class="line">isalpha() 判断是否是纯字母</span><br><span class="line">isalnum() 判断是否是纯数字或字母组成</span><br><span class="line">startswith() 判断是否以某个子串开头</span><br><span class="line">endswith() 判断是否以某个子串结尾</span><br><span class="line">replace(旧的子串，新的子串，替换次数)</span><br><span class="line">strip()去掉首尾空格</span><br><span class="line">split(&#x27;分割符号&#x27;)</span><br><span class="line">upper() 全大写</span><br><span class="line">lower() 全小写</span><br><span class="line">title() 单词首字母大写</span><br><span class="line">capitalize() 字符串首字母大写</span><br></pre></td></tr></table></figure><p>列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ 合并</span><br><span class="line">split()</span><br><span class="line">split() 字符串转化成列表。</span><br><span class="line">join()  列表转化成字符串 ‘分割符号’.join(列表) </span><br><span class="line">isinstance(数据，指定的数据类型) 判断数据是否是指定的数据类型</span><br><span class="line">insert（位置，数据）：指定位置添加数据</span><br><span class="line">append() 向列表结尾添加数据</span><br><span class="line">extend() 向列表结尾添加数据（拆开数据）</span><br><span class="line"> in     not in</span><br><span class="line"> remove() 删除指定数据</span><br><span class="line">pop()  不指定下标的话，从结尾删除。都会有一个返回值，表示的是删除的数据</span><br><span class="line">clear() 清空列表</span><br></pre></td></tr></table></figure><p>元组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add() 添加一个数据 s1.add(数据)</span><br><span class="line">update([])添加多个数据</span><br><span class="line">remove() 删除指定数据，没有则报错</span><br><span class="line">pop() 删除第一个数据</span><br><span class="line">discard()  删除指定数据，没有这个数据，不做任何反应。</span><br></pre></td></tr></table></figure><p>字典：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fromkeys()  创建键值对的值都是相同的列表，要求第一个参数必须是列表，用来书写键名</span><br><span class="line">dict = &#123;&#125;</span><br><span class="line">dict = dict.fromkeys([&#x27;aa&#x27;, &#x27;bb&#x27;],10)</span><br><span class="line"># &#123;&#x27;aa&#x27;: 10, &#x27;bb&#x27;: 10&#125;</span><br><span class="line">get():通过键名查找数据</span><br><span class="line">update()：更新。dict1.update（dict2）.用2更新1，既能修改又能新增。</span><br><span class="line">keys()：返回所有键的列表</span><br><span class="line">values():  返回所有值的列表</span><br><span class="line">items():返回一个列表，包含键值对对应关系的元组</span><br><span class="line">pop() 删除指定键的数据。</span><br><span class="line">popitem() 删除最后的数据  </span><br><span class="line">clear()  清空字典</span><br></pre></td></tr></table></figure><h2 id="16lambda-表达式格式及应用场景"><a href="#16lambda-表达式格式及应用场景" class="headerlink" title="16lambda 表达式格式及应用场景"></a>16lambda 表达式格式及应用场景</h2><p>Lambda表达式是给函数式接口(FunctionalInterface)的形参或变量赋值用的。</p><ul><li>lambda只是一个表达式，函数体比def简单很多。</li><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li><li>lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</li><li>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li></ul><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> [arg1 [,arg2,.....argn]]:expression</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line"><span class="comment"># 调用sum函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="17pass的作用"><a href="#17pass的作用" class="headerlink" title="17pass的作用"></a>17pass的作用</h2><p>Python pass 是空语句，是为了保持程序结构的完整性。</p><p>pass 不做任何事情，一般用做占位语句。而且pass也<font color='red'>不影响前后语句的执行</font></p><h2 id="18-arg和-kwarg作用"><a href="#18-arg和-kwarg作用" class="headerlink" title="18*arg和**kwarg作用"></a>18*arg和**kwarg作用</h2><p>首先，完整地写<code>*args</code>和<code>**kwargs</code>是不必要的，我们可以只写<code>*</code>和<code>**</code>。</p><h3 id="args的使用"><a href="#args的使用" class="headerlink" title="*args的使用"></a>*args的使用</h3><p>通常用在函数定义里，<code>*args</code>能够接收不定量的非关键参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">learn_args</span>(<span class="params">v,*args</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;first parameter&#x27;</span>,v)</span><br><span class="line">    <span class="comment"># 值得注意的是这里的args是元组类型</span></span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;other parameters&#x27;</span>,arg)</span><br><span class="line"> </span><br><span class="line">learn_args(<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;W&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">first parameter G</span></span><br><span class="line"><span class="string">other parameters J</span></span><br><span class="line"><span class="string">other parameters W</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="kwargs的使用"><a href="#kwargs的使用" class="headerlink" title="**kwargs的使用"></a>**kwargs的使用</h3><p><code>**kwargs</code>能够接收多个关键词参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">learn_kwargs</span>(<span class="params">v,**kwargs</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;first parameter&#x27;</span>,v)</span><br><span class="line">    <span class="comment"># 这里的kwargs自动形成字典</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(kwargs))</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">learn_kwargs(<span class="string">&#x27;G&#x27;</span>,a=<span class="string">&#x27;1&#x27;</span>,b=<span class="number">1</span>,c=[])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">first parameter G</span></span><br><span class="line"><span class="string">&lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="string">&#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: 1, &#x27;c&#x27;: []&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="19is和-的区别"><a href="#19is和-的区别" class="headerlink" title="19is和==的区别"></a>19is和==的区别</h2><p>is比较的是两个对象的id值是否相等，也就是比较两个对象是否为同一个实例对象，是否指向同一个内存地址。</p><p>==比较的是两个对象的内容是否相等，默认会调用对象的<code>__eq__()</code>方法。</p><p><em>[:]这是一个copy浅拷贝方法</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line">b <span class="keyword">is</span> a<span class="comment"># True</span></span><br><span class="line">b == a<span class="comment"># True</span></span><br><span class="line">b = a[:]<span class="comment"># 此时b=[1,2,3] 但是被分配了新的内存</span></span><br><span class="line">b <span class="keyword">is</span> a<span class="comment"># Flase</span></span><br><span class="line">b == a<span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="20简述Python的深浅拷贝以及应用场景？"><a href="#20简述Python的深浅拷贝以及应用场景？" class="headerlink" title="20简述Python的深浅拷贝以及应用场景？"></a>20简述Python的深浅拷贝以及应用场景？</h2><ul><li><strong>直接赋值：</strong>其实就是对象的引用（别名）。</li><li><strong>浅拷贝(copy)：</strong>拷贝父对象，不会拷贝对象的内部的子对象。</li><li><strong>深拷贝(deepcopy)：</strong> copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</li></ul><blockquote><p><strong>b = a:</strong> 赋值引用，a 和 b 都指向同一个对象。</p><p><img src="python%E7%BC%96%E7%A8%8B%E9%97%AE%E7%AD%94/1489720931-7116-4AQC6.png" alt="img"></p><p><strong>b = a.copy():</strong> 浅拷贝, a 和 b 是一个独立的对象，但他们的子对象还是指向统一对象（是引用）。</p><p><img src="python%E7%BC%96%E7%A8%8B%E9%97%AE%E7%AD%94/1489720930-6827-Vtk4m.png" alt="img"></p><p><strong>b = copy.deepcopy(a):</strong> 深度拷贝, a 和 b 完全拷贝了父对象及其子对象，两者是完全独立的。</p><p><img src="python%E7%BC%96%E7%A8%8B%E9%97%AE%E7%AD%94/1489720930-5882-BO4qO.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">#!/usr/bin/python</span></span><br><span class="line">&gt;<span class="comment"># -*-coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">import</span> copy</span><br><span class="line">&gt;a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]] <span class="comment">#原始对象</span></span><br><span class="line"></span><br><span class="line">&gt;b = a                       <span class="comment">#赋值，传对象的引用</span></span><br><span class="line">&gt;c = copy.copy(a)            <span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">&gt;d = copy.deepcopy(a)        <span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"></span><br><span class="line">&gt;a.append(<span class="number">5</span>)                 <span class="comment">#修改对象a</span></span><br><span class="line">&gt;a[<span class="number">4</span>].append(<span class="string">&#x27;c&#x27;</span>)            <span class="comment">#修改对象a中的[&#x27;a&#x27;, &#x27;b&#x27;]数组对象</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">print</span>( <span class="string">&#x27;a = &#x27;</span>, a )</span><br><span class="line">&gt;<span class="built_in">print</span>( <span class="string">&#x27;b = &#x27;</span>, b )</span><br><span class="line">&gt;<span class="built_in">print</span>( <span class="string">&#x27;c = &#x27;</span>, c )</span><br><span class="line">&gt;<span class="built_in">print</span>( <span class="string">&#x27;d = &#x27;</span>, d )</span><br><span class="line"></span><br><span class="line">&gt;<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&gt;(&#x27;a = &#x27;, [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5])</span></span><br><span class="line"><span class="string">&gt;(&#x27;b = &#x27;, [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], 5])</span></span><br><span class="line"><span class="string">&gt;(&#x27;c = &#x27;, [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]])</span></span><br><span class="line"><span class="string">&gt;(&#x27;d = &#x27;, [1, 2, 3, 4, [&#x27;a&#x27;, &#x27;b&#x27;]])</span></span><br><span class="line"><span class="string">&gt;&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.runoob.com/w3cnote/python-understanding-dict-copy-shallow-or-deep.html">https://www.runoob.com/w3cnote/python-understanding-dict-copy-shallow-or-deep.html</a></p></blockquote><h2 id="21Python垃圾回收机制？"><a href="#21Python垃圾回收机制？" class="headerlink" title="21Python垃圾回收机制？"></a>21Python垃圾回收机制？</h2><p>参考资料（建议详读）：<a href="https://sutune.me/2018/10/14/python-GC/">https://sutune.me/2018/10/14/python-GC/</a></p><p>python采用的是<strong>引用计数</strong>机制为主，<strong>标记-清除</strong>和<strong>分代收集</strong>两种机制为辅的策略。</p><ul><li>Python语言默认采用的垃圾收集机制是『引用计数法 <code>Reference Counting</code>』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用。</li><li>『引用计数法』的原理是：每个对象维护一个<code>ob_ref</code>字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数<code>ob_ref</code>加<code>1</code>，每当该对象的引用失效时计数<code>ob_ref</code>减<code>1</code>，一旦对象的引用计数为<code>0</code>，该对象立即被回收，对象占用的内存空间将被释放。</li><li>它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</li></ul><p><strong>标记清除</strong></p><p>标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p><p><a href="https://sutune.oss-cn-shenzhen.aliyuncs.com/python/GC/mark-sweep.svg"><img src="python%E7%BC%96%E7%A8%8B%E9%97%AE%E7%AD%94/mark-sweep.svg" alt="image"></a></p><p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。 mark-sweepg 在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p><p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p><p><strong>分代回收</strong></p><ul><li>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。</li><li>新创建的对象都会分配在<strong>年轻代</strong>，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到<strong>中年代</strong>去，依此类推，<strong>老年代</strong>中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。</li><li>同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</li></ul><h2 id="22Python的可变类型和不可变类型？"><a href="#22Python的可变类型和不可变类型？" class="headerlink" title="22Python的可变类型和不可变类型？"></a>22Python的可变类型和不可变类型？</h2><p>这里的可变与不可变是指内存中的位置在变量被定义之后是否可以被改变</p><h3 id="不可变类型"><a href="#不可变类型" class="headerlink" title="不可变类型"></a>不可变类型</h3><ul><li><p>int</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 140718582096528</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(a)) <span class="comment"># 140718582096560</span></span><br></pre></td></tr></table></figure></li><li><p>float</p></li><li><p>decimal</p></li><li><p>complex</p></li><li><p>bool</p></li><li><p>string</p></li><li><p>tuple</p></li><li><p>range</p></li><li><p>frozenset</p></li><li><p>bytes</p></li></ul><h3 id="可变类型"><a href="#可变类型" class="headerlink" title="可变类型"></a>可变类型</h3><ul><li><p>list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="built_in">id</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># 2756476232392</span></span><br><span class="line"><span class="built_in">list</span>.append(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">id</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># 2756476232392</span></span><br></pre></td></tr></table></figure></li><li><p>dict</p></li><li><p>set</p></li><li><p>bytearray</p></li><li><p>user-defined classes (unless specifically made immutable)</p></li></ul><p>参考资料：<a href="https://juejin.im/post/6844903942457458695">https://juejin.im/post/6844903942457458695</a></p><p>值得注意的是，对于短字符串和int，如果两个变量的值相同，会指向同一个内存地址</p><h2 id="23求结果并解释"><a href="#23求结果并解释" class="headerlink" title="23求结果并解释"></a>23求结果并解释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v = <span class="built_in">dict</span>.fromkeys([<span class="string">&#x27;k1&#x27;</span>,<span class="string">&#x27;k2&#x27;</span>],[])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v[<span class="string">&#x27;k1&#x27;</span>].append(<span class="number">666</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(v)</span><br><span class="line">&#123;<span class="string">&#x27;k1&#x27;</span>: [<span class="number">666</span>], <span class="string">&#x27;k2&#x27;</span>: [<span class="number">666</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v[<span class="string">&#x27;k1&#x27;</span>] = <span class="number">777</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(v)</span><br><span class="line">&#123;<span class="string">&#x27;k1&#x27;</span>: <span class="number">777</span>, <span class="string">&#x27;k2&#x27;</span>: [<span class="number">666</span>]&#125;</span><br></pre></td></tr></table></figure><p><code>fromkeys([&#39;k1&#39;,&#39;k2&#39;],[])</code>生成字典时候，第一参数是可迭代对象，第二个是字典的value值，每个key对应的value值是相同的自然这些value值指向的也是同一个内存。而我们知道列表是不可变类型，即一个列表内存位置不会发生改变。在对其中一个key的value列表进行append的时候，所有value值也发生变化。</p><h2 id="24求结果"><a href="#24求结果" class="headerlink" title="24求结果"></a>24求结果</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span>():</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x:i*x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [6,6,6,6]</span></span><br></pre></td></tr></table></figure><p>这个问题涉及到了python的闭包概念，lambda是num()的内嵌函数，而变量i在lambda中并没有被定义，所以会在嵌套作用域中寻找变量i，而此时i等于for循环中的最大值3。</p><p>只有函数、类、模块会产生<font color='red'>作用域</font>，代码块不会产生作用域。作用域按照变量的定义位置可以划分为4类:</p><ul><li>Local    (函数内部)局部作用域</li><li>Enclosing    （嵌套函数的外层函数内部）嵌套作用域（闭包）</li><li>Global    （模块全局）全局作用域</li><li>Built-in    （内建）内建作用域</li></ul><p>python解释器查找变量时，会按照顺序依次查找<font color='red'>局部作用域—&gt;嵌套作用域—&gt;全局作用域—&gt;内建作用域</font>，在任意一个作用域中找到变量则停止查找，所有作用域查找完成没有找到对应的变量，则抛出 <code>NameError: name ‘xxxx’ is not defined</code>的异常。</p><p>如果让其输入为[0,2,4,6]，则可以将代码中的i设置为局部作用域，且从for中获取i的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num</span>():</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">lambda</span> x,i=i:i*x <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([m(<span class="number">2</span>) <span class="keyword">for</span> m <span class="keyword">in</span> num()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0,2,4,6]</span></span><br></pre></td></tr></table></figure><h2 id="25举例常见的内置函数"><a href="#25举例常见的内置函数" class="headerlink" title="25举例常见的内置函数"></a>25举例常见的内置函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个可迭代对象的所有元素都为真，则返回True</span></span><br><span class="line"><span class="built_in">all</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">all</span>([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>])   <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个可迭代对象中只要有一个元素为真，则返回True</span></span><br><span class="line"><span class="built_in">any</span>([<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>])     <span class="comment"># True</span></span><br><span class="line"><span class="built_in">any</span>([<span class="number">0</span>])         <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bin hex oct</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># callable判断一个对象是否是可以被调用的，即类似于“test()”这样的写法。函数与类皆可以被调用</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(b),<span class="built_in">callable</span>(func))   <span class="comment"># False True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exec将一串代码字符串，以代码的形式执行</span></span><br><span class="line">code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 0</span></span><br><span class="line"><span class="string">while n &lt; 10:</span></span><br><span class="line"><span class="string">    print(n)</span></span><br><span class="line"><span class="string">    n+=1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">exec</span>(code)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/y472360651/article/details/73132553">https://blog.csdn.net/y472360651/article/details/73132553</a></p><h2 id="26filter、map、reduce的作用"><a href="#26filter、map、reduce的作用" class="headerlink" title="26filter、map、reduce的作用"></a>26filter、map、reduce的作用</h2><p>reduce在python3中被移除，需要从functools中引用。python3中，filter，map都变为了迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x*x,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]))</span><br><span class="line"><span class="comment"># [0, 1, 4, 9, 16, 25, 36]</span></span><br><span class="line">reduce(<span class="keyword">lambda</span> x,y:x+y,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment"># 21</span></span><br><span class="line"><span class="comment"># &amp;是二进制按位与运算，filter把0剔除了</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x&amp;<span class="number">1</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]))</span><br><span class="line"><span class="comment"># [1, 3, 5]</span></span><br></pre></td></tr></table></figure><h2 id="27re的match和search区别？"><a href="#27re的match和search区别？" class="headerlink" title="27re的match和search区别？"></a>27re的match和search区别？</h2><p><code>re.match(pattern, string[, flags])</code>从首字母开始开始匹配，string如果包含pattern子串，则匹配成功，返回Match对象，失败则返回None，若要完全匹配，pattern要以$结尾。</p><p><code>re.search(pattern, string[, flags])</code>若string中包含pattern子串，则返回Match对象，否则返回None，注意，如果string中存在多个pattern子串，只返回第一个。</p><p><code>re.findall(pattern, string[, flags])</code>返回string中所有与pattern相匹配的全部字串，返回形式为数组。</p><h2 id="28什么是正则的贪婪匹配？"><a href="#28什么是正则的贪婪匹配？" class="headerlink" title="28什么是正则的贪婪匹配？"></a>28什么是正则的贪婪匹配？</h2><p><strong>贪婪模式</strong>：在整个表达式匹配成功的前提下，尽可能多的匹配</p><p><strong>非贪婪模式</strong>：在整个表达式匹配成功的前提下，以最少的匹配字符</p><p>默认是贪婪模式</p><p>非贪婪模式只需在匹配pattern中加上<code>?</code>：</p><p>表达式<code>ab.*?c</code>    测试数据：abacaxcd，匹配结果：abac</p><h2 id="29求结果："><a href="#29求结果：" class="headerlink" title="29求结果："></a>29求结果：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ i % <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) ]</span><br><span class="line"><span class="comment"># [0,1,0,1,0,1,0,1,0,1]</span></span><br><span class="line">( i % <span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) )</span><br><span class="line"><span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x000002239A531930&gt;</span></span><br></pre></td></tr></table></figure><h2 id="30求结果："><a href="#30求结果：" class="headerlink" title="30求结果："></a>30求结果：</h2><p>前两题解析见第七题</p><p>第三题括号有比较优先级，1是True，0是False</p><p>最后一题是涉及到Python链式对比(Chained Comparisons)，例如Python中<code>1 &lt; x &lt; 3</code>等于<code>1 &lt; x and x &lt; 3</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span><span class="comment"># 1</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span><span class="comment"># 2</span></span><br><span class="line"><span class="number">1</span> &lt; (<span class="number">2</span>==<span class="number">2</span>)<span class="comment"># False</span></span><br><span class="line"><span class="comment"># 1 &lt; 2 and 2 == 2</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> == <span class="number">2</span><span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 问答题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django命令工具与中间件——以积分商城为例</title>
      <link href="/2020/07/19/django%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2020/07/19/django%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>结合django积分商城项目食用 最佳</p><p>思考以下场景的实现：</p><ul><li>向30天未登录的用户发送通知（邮件/短信）</li><li>如何对Django进行扩展</li><li>拦截非法请求</li><li>如何快速高效的写接口、接入Webscoket等</li></ul><h2 id="Django命令行工具介绍"><a href="#Django命令行工具介绍" class="headerlink" title="Django命令行工具介绍"></a>Django命令行工具介绍</h2><h3 id="django内置命令介绍"><a href="#django内置命令介绍" class="headerlink" title="django内置命令介绍"></a>django内置命令介绍</h3><p>使用django命令行工具：</p><p>django-admin（全局的）</p><p>​    例如: django-admin startproject project_name</p><p>python manage.py（在django根路径使用）</p><p>​    manage.py会在每个Django项目中自动生成，二者命令相同，manage.py方便在项目中使用</p><p>常用内置命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个django项目（工程）</span></span><br><span class="line">django-admin startrproject name</span><br><span class="line"><span class="comment"># 在项目中创建一个应用（app）</span></span><br><span class="line">python manage.py startapp name</span><br><span class="line"><span class="comment"># 启动一个开发服务器</span></span><br><span class="line">python manage.py runserver</span><br><span class="line"><span class="comment"># 启动开发服务器且自定义服务器地址，例如在局域网中访问</span></span><br><span class="line">python manage.py runserver <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8080</span></span><br><span class="line"><span class="comment"># 创建超级管理员</span></span><br><span class="line">python manage.py createsuperuser</span><br><span class="line"><span class="comment"># 更改用户密码</span></span><br><span class="line">python manage.py changepassword</span><br><span class="line"><span class="comment"># 检查djangoORM模型</span></span><br><span class="line">python manage.py check</span><br><span class="line"><span class="comment"># 生成同步原语</span></span><br><span class="line">python manage.py makemigrations</span><br><span class="line"><span class="comment"># 模型同步</span></span><br><span class="line">python manage.py migrate</span><br><span class="line"><span class="comment"># 收集依赖中的静态文件</span></span><br><span class="line"><span class="comment"># 需要在settings.py中加一个STATIC_ROOT = os.path.join(BASE_DIR, &#x27;static&#x27;)</span></span><br><span class="line"><span class="comment"># 该命令会把项目中的css、js、图片等收集起来</span></span><br><span class="line">python manage.py collectstatic</span><br><span class="line"><span class="comment"># django控制台</span></span><br><span class="line">python manage.py shell</span><br><span class="line"><span class="comment"># 清除过期会话</span></span><br><span class="line">python manage.py clearsessions</span><br></pre></td></tr></table></figure><h3 id="自定义django命令行工具"><a href="#自定义django命令行工具" class="headerlink" title="自定义django命令行工具"></a>自定义django命令行工具</h3><p>可以用于扩展django项目的功能，比如需要更新订单 将过期订单取消。给长时间未登录用户发邮箱。</p><p>第一步：创建指定的目录及文件结构</p><img src="django中间件/image-20200724220240580.png" alt="image-20200724220240580" style="zoom:50%;" /><p>按文件名及文件结构需要按照标准来！</p><p>第二步：实现自定义命令</p><p>实现django.core.management.base.BaseCommand的子类</p><p>添加命令参数add_arguments</p><p>处理命令逻辑handle</p><p>显示处理过程(self.stdout.write/self.stderr.write)</p><p>update.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 更新订单状态</span></span><br><span class="line"><span class="string"> 订单超过半小时不支付，取消订单，释放库存</span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> django.core.management.base <span class="keyword">import</span> BaseCommand</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span>(<span class="params">BaseCommand</span>):</span></span><br><span class="line">    <span class="built_in">help</span> = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        更新订单状态</span></span><br><span class="line"><span class="string">        回收订单</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_arguments</span>(<span class="params">self, parser</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        添加命令的参数</span></span><br><span class="line"><span class="string">        1.回收所有超时未知的订单</span></span><br><span class="line"><span class="string">        python manage.py update --all</span></span><br><span class="line"><span class="string">        2.指定回收某一个订单</span></span><br><span class="line"><span class="string">        python manage.py update --one 20001xxx</span></span><br><span class="line"><span class="string">        :param parser: 用户输入的参数，判断具体的命令内容</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&#x27;--all&#x27;</span>,</span><br><span class="line">            <span class="comment"># store_true代表 --all后面可以不接参数</span></span><br><span class="line">            action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">            dest=<span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">            default=<span class="literal">False</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&#x27;回收所有未超时的订单&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        parser.add_argument(</span><br><span class="line">            <span class="string">&#x27;--one&#x27;</span>,</span><br><span class="line">            action=<span class="string">&#x27;store&#x27;</span>,</span><br><span class="line">            dest=<span class="string">&#x27;one&#x27;</span>,</span><br><span class="line">            default=<span class="literal">False</span>,</span><br><span class="line">            <span class="built_in">help</span>=<span class="string">&#x27;回收所某一个订单&#x27;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">self, *args, **options</span>):</span></span><br><span class="line">        <span class="comment"># 省略了逻辑处理的部分，直接通过打印内容演示该功能</span></span><br><span class="line">        <span class="keyword">if</span> options[<span class="string">&#x27;all&#x27;</span>]:</span><br><span class="line">            self.stdout.write(<span class="string">&#x27;开始回收订单&#x27;</span>)</span><br><span class="line">            self.stdout.write(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line">            self.stdout.write(<span class="string">&#x27;处理完成&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> options[<span class="string">&#x27;one&#x27;</span>]:</span><br><span class="line">            self.stdout.write(<span class="string">&#x27;开始回收订单&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(options[<span class="string">&#x27;one&#x27;</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.stderr.write(<span class="string">&#x27;指令异常&#x27;</span>)</span><br></pre></td></tr></table></figure><p><font color='red'>parser.add_argument()使用到了python的argparser库，这个库是用于生成命令行相关功能的库，django在这里自动引用了该库。详见python文档</font></p><p><img src="django%E4%B8%AD%E9%97%B4%E4%BB%B6/image-20200724225803048.png" alt="image-20200724225803048"></p><h2 id="Django中间件开发与使用"><a href="#Django中间件开发与使用" class="headerlink" title="Django中间件开发与使用"></a>Django中间件开发与使用</h2><h3 id="请求上下文"><a href="#请求上下文" class="headerlink" title="请求上下文"></a>请求上下文</h3><p>上下文处理器context_processors。在项目settings.py模板中可见</p><p><img src="django%E4%B8%AD%E9%97%B4%E4%BB%B6/image-20200724234934355.png" alt="image-20200724234934355"></p><ul><li><p>有渲染上下文Context、请求上下文RequestContext</p></li><li><p>连接views（视图）和templates（模板）</p></li><li><p>场景举例：</p><p>在每个页面都显示ip地址，多个页面展示购物车信息</p></li></ul><p>在模块中新建context_processors.py文件</p><p>在这个文件中我们甚至可以把整个项目中的模板变量写入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"><span class="keyword">from</span> mine.models <span class="keyword">import</span> Cart, Order</span><br><span class="line"><span class="keyword">from</span> system.models <span class="keyword">import</span> Slider, News</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">context</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 初始化数据 方便游客模式的内容显示</span></span><br><span class="line">    cart_list = []</span><br><span class="line">    cart_count = <span class="number">0</span></span><br><span class="line">    total = &#123;<span class="string">&#x27;amount__sum&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;count__sum&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">    status = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            status = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            status = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 查询添加到购物车中的商品</span></span><br><span class="line">        cart_list = Cart.objects.<span class="built_in">filter</span>(user=request.user, status=constants.ORDER_STATUS_INIT)</span><br><span class="line">        <span class="comment"># 购物车中的商品数</span></span><br><span class="line">        cart_count = cart_list.count()</span><br><span class="line">        <span class="comment"># 通过聚合函数查询商品总额 然后传入模板</span></span><br><span class="line">        total = cart_list.aggregate(Sum(<span class="string">&#x27;amount&#x27;</span>), Sum(<span class="string">&#x27;count&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    <span class="comment"># 查询首页轮播图</span></span><br><span class="line">    slider_list = Slider.objects.<span class="built_in">filter</span>(types=constants.SLIDER_TYPE_INDEX)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询首页通知通知 顶置 有效 在生效时间内</span></span><br><span class="line">    notice_list = News.objects.<span class="built_in">filter</span>(types=constants.NEWS_TYPE_NOTICES, is_top=<span class="literal">True</span>,</span><br><span class="line">                                      is_valid=<span class="literal">True</span>, start_time__lte=now_time,</span><br><span class="line">                                      end_time__gte=now_time)</span><br><span class="line">    <span class="comment"># 首页的精选推荐显示</span></span><br><span class="line">    jxtj_list = Product.objects.<span class="built_in">filter</span>(is_valid=<span class="literal">True</span>, status=constants.PRODUCT_STATUS_SELL, tags__code=<span class="string">&#x27;jxtj&#x27;</span>)</span><br><span class="line">    jstj_list = Product.objects.<span class="built_in">filter</span>(is_valid=<span class="literal">True</span>, status=constants.PRODUCT_STATUS_SELL, tags__code=<span class="string">&#x27;jstj&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;constants&#x27;</span>: constants,</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>: status,</span><br><span class="line">        <span class="string">&#x27;cart_list&#x27;</span>: cart_list,</span><br><span class="line">        <span class="string">&#x27;cart_count&#x27;</span>: cart_count,</span><br><span class="line">        <span class="string">&#x27;amount&#x27;</span>: total[<span class="string">&#x27;amount__sum&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>: total[<span class="string">&#x27;count__sum&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;slider_list&#x27;</span>: slider_list,</span><br><span class="line">        <span class="string">&#x27;notice_list&#x27;</span>: notice_list,</span><br><span class="line">        <span class="string">&#x27;jxtj_list&#x27;</span>: jxtj_list,</span><br><span class="line">        <span class="string">&#x27;jstj_list&#x27;</span>: jstj_list,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时在settings.py中添加该上下文处理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;mine.context_processors.context&#x27;</span>,</span><br></pre></td></tr></table></figure><p>值得注意的是，虽然context_processor.py文件处于模块中，但是该上下文处理器<font color='red'>能够在整个项目中起作用</font>，即 数据会传入所有模板中</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>当浏览器发送请求，会经过所有的中间件，然后到达视图，然后返回。如果被其中的中间件拦截，则会被拦截请求</p><p><img src="django%E4%B8%AD%E9%97%B4%E4%BB%B6/image-20200727215745788.png" alt="image-20200727215745788"></p><p>自定义中间件：<br>步骤一：实现中间件，处理业务逻辑</p><ul><li>方式一：函数式自定义中间件</li><li>方式二：OOP（面向对象）自定义中间件</li></ul><p>步骤二：激活中间件，添加到settings.py配置</p><p>举例：用户非法请求访问。添加ip地址黑名单，在名单内的用户限制访问（使用函数式方法）</p><p>在项目utils中新建middleware.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip_middleware</span>(<span class="params">get_response</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">midddleware</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 请求到达前的业务逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请求到达前的业务逻辑&#x27;</span>)</span><br><span class="line">        <span class="comment"># 请求不满足业务逻辑：ip限制</span></span><br><span class="line">        ip = request.META.get(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        id_disable_list = [<span class="string">&#x27;127.0.0.1&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">in</span> id_disable_list:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;not allowed&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(ip)</span><br><span class="line">        response = get_response(request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在视图函数调用之后的业务逻辑</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;在视图函数之后的业务逻辑&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> midddleware</span><br></pre></td></tr></table></figure><p>在项目settings.py中引入中间件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;utils.middleware.ip_middleware&#x27;</span></span><br></pre></td></tr></table></figure><p>然后当127.0.0.1的ip访问时候就会被直接拦截，且返回‘not allowed’提示</p><p>举例2：模拟用户登录，实现简单的用户登录中间件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthMiddleware</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 实现用户登录的中间件，获取登录用户信息 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,get_response</span>):</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;AuthMiddleware请求到达前的业务逻辑&#x27;</span>)</span><br><span class="line">        <span class="comment"># 从session中获取到用户id，这里&#x27;user_id&#x27;是通过登录视图传入</span></span><br><span class="line">        user_id = request.session.get(<span class="string">&#x27;user_id&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> user_id:</span><br><span class="line">            user = User.objects.get(<span class="built_in">id</span>=user_id)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        request.mw_user=user</span><br><span class="line">        </span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;AuthMiddleware在视图函数调用后的业务逻辑&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>登录视图中传入user_id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    next_url = request.GET.get(<span class="string">&#x27;next&#x27;</span>,<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = Login(request=request, data=request.POST)</span><br><span class="line">        <span class="comment"># 验证表单的合法性且获取数据</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 执行登录</span></span><br><span class="line">            data = form.cleaned_data</span><br><span class="line">            <span class="comment"># 使用auth模块登录</span></span><br><span class="line">            user = authenticate(request, username=data[<span class="string">&#x27;username&#x27;</span>], password=data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">            <span class="comment"># 登录并跳转</span></span><br><span class="line">            <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                login(request, user)</span><br><span class="line">                <span class="comment"># </span></span><br><span class="line">                <span class="comment"># 中间件模拟用户登录中 将用户id写入session</span></span><br><span class="line">                request.session[<span class="string">&#x27;user_id&#x27;</span>]=user.<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> redirect(next_url)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># get请求则直接显示该页面</span></span><br><span class="line">            <span class="built_in">print</span>(form.errors)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = Login(request)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form,</span><br><span class="line">        <span class="string">&#x27;next_url&#x27;</span>:next_url</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>写入项目settings后</p><p>可以在其他视图中通过request.mw_user就查看用户是否登陆以及登录后用户信息</p><p>这样我们就通过中间件实现了 模拟django自带auth模块的用户登录功能</p><h2 id="Django扩展"><a href="#Django扩展" class="headerlink" title="Django扩展"></a>Django扩展</h2><p>常用的Django扩展:</p><ul><li><p>DRF（Django REST Framework）REST接口框架</p><p><a href="https://www.django-rest-framework.org/">DRF官网</a></p></li><li><p>Django-CMS 内容管理系统</p></li><li><p>Django-debug-toolbar调试工具</p><p>可用于SQL优化查询 前面的ORM文章有讲过</p></li><li><p>Django-channels Websocket通信</p></li></ul><p>使用步骤：</p><p>查：pypi、github、版本兼容情况</p><p>验：用户量、更新频次、文档、社区</p><p>装：pip安装、源码安装、whl安装</p><p>用：对照文档使用 官方社区 github的issues等等</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django使用的部分报错</title>
      <link href="/2020/07/16/django-error/"/>
      <url>/2020/07/16/django-error/</url>
      
        <content type="html"><![CDATA[<h2 id="ValueError"><a href="#ValueError" class="headerlink" title="ValueError"></a>ValueError</h2><p>ValueError: The QuerySet value for an exact lookup must be limited to one result using slicing.</p><p>原因是filter() 内部的筛选条件必须是对象而非结果集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节选于学习积分商城的项目 一个类视图的应用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderListView</span>(<span class="params">ListView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 订单列表 &quot;&quot;&quot;</span></span><br><span class="line">    paginate_by = <span class="number">6</span></span><br><span class="line">    template_name = <span class="string">&#x27;all_orders.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加订单状态进行搜索 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 先查询用户所有订单</span></span><br><span class="line">        order=Order.objects.<span class="built_in">filter</span>(user=self.request.user)</span><br><span class="line">        query = Q(status=constants.ORDER_STATUS_DELETED)</span><br><span class="line">        status = self.request.GET.get(<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># 出入订单状态进行查询</span></span><br><span class="line">        <span class="keyword">if</span> status:</span><br><span class="line">            query = Q(status=status)</span><br><span class="line">            <span class="keyword">return</span> order.<span class="built_in">filter</span>(query)</span><br><span class="line">        <span class="comment"># 如果status传入为空（查询全部有效订单），返回有效订单</span></span><br><span class="line">        <span class="keyword">return</span> order.exclude(query)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加传入模板的参数 &quot;&quot;&quot;</span></span><br><span class="line">        context = <span class="built_in">super</span>().get_context_data(**kwargs)</span><br><span class="line">        context[<span class="string">&#x27;constants&#x27;</span>] = constants</span><br><span class="line">        <span class="comment"># 找出与订单绑定的购物车，从而找出商品信息传入模板</span></span><br><span class="line">        <span class="comment"># first()方法可以使得self.get_queryset()为空结果集时返回None</span></span><br><span class="line">        context[<span class="string">&#x27;cart_list&#x27;</span>]=Cart.objects.<span class="built_in">filter</span>(order=self.get_queryset().first())</span><br><span class="line">        <span class="keyword">return</span> context</span><br></pre></td></tr></table></figure><p>其中我使用类视图进行封装，并重写了其中get_queryset()方法，最开始我在get_context_data()中直接调用了get_queryset()方法生成了查询Order的结果集，并传入Cart进行筛选。如下。随后产生该错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context[<span class="string">&#x27;cart_list&#x27;</span>]=Cart.objects.<span class="built_in">filter</span>(order=self.get_queryset())</span><br></pre></td></tr></table></figure><p>在这里面，因为Order一般是单一元素的结果集，我直接取了[0]。如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context[<span class="string">&#x27;cart_list&#x27;</span>]=Cart.objects.<span class="built_in">filter</span>(order=self.get_queryset()[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>但是又产生了新的问题，因为项目涉及到的项目 查询购物订单会出现用户没有产生订单的情况，空集合使用该方法会产生<code>IndexError: list index out of range</code>错误。该为对结果集使用<code>.first()</code>方法，这个方法相当于，有错误处理的[0]，空集合返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context[<span class="string">&#x27;cart_list&#x27;</span>]=Cart.objects.<span class="built_in">filter</span>(order=self.get_queryset().first())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django2.2实战积分商城3——后台管理的使用</title>
      <link href="/2020/07/02/django-mall3/"/>
      <url>/2020/07/02/django-mall3/</url>
      
        <content type="html"><![CDATA[<p>该文章是<a href="https://www.imooc.com/">慕课网</a>相关课程的笔记</p><p>上一篇文章已经以该积分商城为例，配置了积分商城的后台管理系统，我们继续补充与完善积分商城的功能</p><h2 id="商品用户等管理配置"><a href="#商品用户等管理配置" class="headerlink" title="商品用户等管理配置"></a>商品用户等管理配置</h2><p>添加各个模块的模型管理配置</p><p>略</p><h2 id="商品富文本的使用"><a href="#商品富文本的使用" class="headerlink" title="商品富文本的使用"></a>商品富文本的使用</h2><p>安装配置富文本编辑器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-ckeditor</span><br></pre></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSATLLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 富文本编辑器</span></span><br><span class="line">    <span class="string">&#x27;ckeditor&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ckeditor_uploader&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义富文本编辑器上传的路径</span></span><br><span class="line">CKEDITOR_UPLOAD_PATH = os.path.join(MEDIA_ROOT, <span class="string">&#x27;uploads&#x27;</span>)</span><br></pre></td></tr></table></figure><p>商品的 models.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ckeditor.fields <span class="keyword">import</span> RichTextField</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品信息 &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    content = RichTextField(<span class="string">&#x27;商品描述&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="django-mall3/image-20200703114959036.png" alt="image-20200703114959036"></p><p>此时后端管理的商品信息表中就会自动生成html富文本编辑器，方便商品信息页的修改和后台显示。</p><p><img src="django-mall3/image-20200702103152611.png" alt="image-20200702103152611"></p><p>可以在pycharm侧边栏的 External Libraries查看包的源码和相关用法，也可以在pypi上查找ckeditor的文档。</p><h2 id="商品前台展示"><a href="#商品前台展示" class="headerlink" title="商品前台展示"></a>商品前台展示</h2><p>给商品详情页添加视图和url，用商品uid放在get参数中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r&#x27;^pro/detail/(?P&lt;pk&gt;\S+)/$&#x27;</span>,views.pro_info,name=<span class="string">&#x27;pro_info&#x27;</span>)</span><br></pre></td></tr></table></figure><p>views.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pro_info</span>(<span class="params">request, pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品详情 &quot;&quot;&quot;</span></span><br><span class="line">    pro_obj = get_object_or_404(Product, uid=pk, is_valid=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;pro_info.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;pro_obj&#x27;</span>:pro_obj,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>完善商品详情页的HTML代码。导入模板</p><p><font size=2.5>先修改页面为继承，缩减代码。通过模板导入商品详情页的商品信息、图片url等。例如详情页的商品展示图，可通过后台管理上传图片，再导入到模板中。</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for banner in pro_obj.banners.all %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; banner.img.url &#125;&#125;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><font size=2.5>对于商品详情页我们填入的html代码，通过模板过滤器将它显示出来</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pro-detail&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; pro_obj.content|safe &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在商品列表中加入商品详情页的跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &#x27;mall:pro_info&#x27; item.uid %&#125;</span><br></pre></td></tr></table></figure><p><img src="django-mall3/image-20200705150917129.png" alt="image-20200705150917129"></p><p><img src="django-mall3/image-20200705150944816.png" alt="image-20200705150944816"></p><h2 id="商品标签"><a href="#商品标签" class="headerlink" title="商品标签"></a>商品标签</h2><p>现在我们要给首页的精选推荐等绑定商品。</p><p>首先通过后台添加商品标签，并给相关商品绑定标签</p><p><img src="django-mall3/image-20200705151635701.png" alt="image-20200705151635701"></p><p>现在需要实现在首页的html中，实现精选推荐、酒水推荐等栏目的链接和跳转。</p><p>THML中设置url跳转，同时添加tag筛选参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &#x27;mall:product_list&#x27; %&#125;?tag=jxtj</span><br></pre></td></tr></table></figure><p>同时给跳转目标的视图函数中（这里是商品分页的视图）,给其中的分页器定义按标签进行搜索的方法。</p><p>为了能使有相关标签的商品能显示，还需要将标签tag参数传入显示商品列表的html页面的ajax函数中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span>(<span class="params">ListView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用面向对象的方法实现商品的展示 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 每页放多少条数据</span></span><br><span class="line">    paginate_by = <span class="number">6</span></span><br><span class="line">    <span class="comment"># 模板位置</span></span><br><span class="line">    template_name = <span class="string">&#x27;pro_list.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        query = Q(status=constants.PRODUCT_STATUS_SELL, is_valid=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 按名称搜索</span></span><br><span class="line">        name = self.request.GET.get(<span class="string">&#x27;search&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name:</span><br><span class="line">            query = query &amp; Q(name__icontains=name)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 根据tag标签展示商品</span></span><br><span class="line">        tag = self.request.GET.get(<span class="string">&#x27;tag&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> tag:</span><br><span class="line">            <span class="comment"># 进行tags的外键关联查询</span></span><br><span class="line">            query = query &amp; Q(tags__code=tag)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Product.objects.<span class="built_in">filter</span>(query)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加额外的参数 如搜索参数 标签参数 在这里用于传递到页面的js中使用&quot;&quot;&quot;</span></span><br><span class="line">        context = <span class="built_in">super</span>().get_context_data(**kwargs)</span><br><span class="line">        context[<span class="string">&#x27;params&#x27;</span>] = self.request.GET.<span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">return</span> context</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;&#123;% url &#x27;</span>mall:product_load_list<span class="string">&#x27; %&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">page</span>: page,</span><br><span class="line">    <span class="attr">search</span>:<span class="string">&#x27;&#123;&#123; params.search|default_if_none:&quot;&quot; &#125;&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">tag</span>:<span class="string">&#x27;&#123;&#123; params.tag|default_if_none:&quot;&quot; &#125;&#125;&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="django-mall3/image-20200705172454783.png" alt="image-20200705172454783"></p><p>这样就实现了首页精选推荐和酒水专场的入口。接下来还要实现，下方的商品展示</p><p>首先需要修改首页HTML代码和视图，将二者的商品列表传入模板。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 精选推荐的首页显示，其他栏目同理</span></span><br><span class="line">jxtj_list = Product.objects.<span class="built_in">filter</span>(is_valid=<span class="literal">True</span>,</span><br><span class="line">                                   status=constants.PRODUCT_STATUS_SELL,tags__code=<span class="string">&#x27;jxtj&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in jstj_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mall:pro_info&#x27; item.uid %&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; item.img.url &#125;&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="django-mall3/image-20200705180007049.png" alt="image-20200705180007049"></p><h2 id="商品详情及购买"><a href="#商品详情及购买" class="headerlink" title="商品详情及购买"></a>商品详情及购买</h2><p>上文配置完了推荐入口与下方的推荐商品。其实配置的是相同内容，而实际上，入口处是需要根据商品分类来进行配置查询</p><p>我们继续进行优化，将首页上方入口的查询改为通过商品分类进行查询。步骤同上文类似，修改html页面参数，商品列表视图及商品列表页的ajax函数。</p><p>在商品详情视图优化识别登录用户，然后传入用户的地址，在详情页显示用户默认地址</p><p>（考虑到有些用户没有填默认地址）在用户模型中添加方法，调用默认地址的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">AbstractUser</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户基本信息表 &quot;&quot;&quot;</span></span><br><span class="line">    avatar = models.ImageField(upload_to=<span class="string">&#x27;avatar&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    integral = models.SmallIntegerField(<span class="string">&#x27;用户积分&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    level = models.SmallIntegerField(<span class="string">&#x27;用户等级&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">&#x27;有效性&#x27;</span>,default=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;accounts_user&#x27;</span></span><br><span class="line">        verbose_name = <span class="string">&#x27;用户基本信息&#x27;</span></span><br><span class="line">        verbose_name_plural = <span class="string">&#x27;用户基本信息&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default_address</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 用户默认地址调用 &quot;&quot;&quot;</span></span><br><span class="line">        addr = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 寻址有效地址</span></span><br><span class="line">        <span class="comment"># 通过地址表的related_name调用，相当于UserAddress.objects.filter(xxx)</span></span><br><span class="line">        addr_list = self.user_address.<span class="built_in">filter</span>(is_valid=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 查看是否存在默认地址</span></span><br><span class="line">            addr = addr_list.<span class="built_in">filter</span>(is_default=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 没有默认地址，返回第一个地址</span></span><br><span class="line">                addr = addr_list[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">except</span> IndexError:</span><br><span class="line">                <span class="comment"># 没有地址</span></span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> addr</span><br></pre></td></tr></table></figure><p>在商品详情视图中调用该方法，获取地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pro_info</span>(<span class="params">request, pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品详情 &quot;&quot;&quot;</span></span><br><span class="line">    pro_obj = get_object_or_404(Product, uid=pk, is_valid=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 如果用户登录了，则显示默认地址</span></span><br><span class="line">    <span class="keyword">if</span> request.user.is_authenticated:</span><br><span class="line">        <span class="comment"># 调用默认地址，实际上相当于调用了地址表中一个对象</span></span><br><span class="line">        default_address = request.user.default_address</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;pro_info.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;pro_obj&#x27;</span>:pro_obj,</span><br><span class="line">        <span class="string">&#x27;default_address&#x27;</span>:default_address</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>另：property装饰器是为了实现调用属性一样调用方法</p><p>商品详情HTML中导入用户地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;promotion-message clear&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;promotion-item-text&quot;</span>&gt;</span>&#123;&#123; default_address.get_address_format &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;promotion-item-text&quot;</span>&gt;</span>&#123;&#123; default_address.address &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="django-mall3/image-20200706191249866.png" alt="image-20200706191249866"></p><p>成功调用默认地址</p><h2 id="订单详情页面"><a href="#订单详情页面" class="headerlink" title="订单详情页面"></a>订单详情页面</h2><p>在mine模块添加订单页视图，通过面向对象的方式实现商品列表。</p><p>该订单详情视图继承于DetailView，和ListView一样，也是基于类的视图。DetailView作用是展示对象的详情页面。</p><blockquote><p>除了从数据库中获取模型列表的数据外，从数据库获取模型的一条记录数据也是常见的需求。比如查看某篇文章的详情，就是从数据库中获取这篇文章的记录然后渲染模板。对于这种类型的需求，Django 提供了一个 DetailView 类视图。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> DetailView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderDetailView</span>(<span class="params">DetailView</span>):</span></span><br><span class="line">   <span class="string">&quot;&quot;&quot; 订单详情 &quot;&quot;&quot;</span></span><br><span class="line">model = Order</span><br><span class="line">    <span class="comment"># slug对应url最后的参数，将模型中的sn字段传入url参数进行查询</span></span><br><span class="line">    slug_field = <span class="string">&#x27;sn&#x27;</span></span><br><span class="line">    slug_url_kwarg = <span class="string">&#x27;sn&#x27;</span></span><br><span class="line">    template_name = <span class="string">&#x27;order_info.html&#x27;</span></span><br></pre></td></tr></table></figure><p>mine模块的urls.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> mine.views <span class="keyword">import</span> OrderDetailView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 订单页面</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^order/(?P&lt;sn&gt;\d+)/$&#x27;</span>, login_required(OrderDetailView.as_view()), name=<span class="string">&#x27;order&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>html页面修改模板继承，detailview默认传递了一个Order模型的对象，叫object。可以通过<code>object.xx</code>调用订单的数据</p><p>同时在订单模型中添加一个关联购物车商品的方法，用于调用购物车中的商品数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    xxx</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cart</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 获取购物车数据 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.cart.exclude(status=constants.ORDER_STATUS_INIT)</span><br></pre></td></tr></table></figure><p>HTML中添加模板元素 ，修改地址跳转。同时将支付处修改为提交表单按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;accounts:address_list&#x27; %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;weui-cell_access&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;address-name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; object.to_user &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; object.to_phone &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;address-txt&quot;</span>&gt;</span>&#123;&#123; object.to_area &#125;&#125;&#123;&#123; object.to_address &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">&#123;% for item in object.get_cart %&#125;</span><br><span class="line"><span class="comment">&lt;!--with 方法用于改写变量 endwith结束--&gt;</span></span><br><span class="line">&#123;% with product=item.product %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box_appmsg ord-pro-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__hd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../../mall/templates/pro_info.html&quot;</span></span></span><br><span class="line"><span class="tag">           &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__thumb&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; product.img.url &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">                 /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__bd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__desc&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mall:pro_info&#x27; product.uid %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ord-pro-link&quot;</span></span></span><br><span class="line"><span class="tag">               &gt;</span>&#123;&#123; product.name &#125;&#125;&lt;/a</span><br><span class="line">                &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__desc&quot;</span>&gt;</span></span><br><span class="line">            规格：<span class="tag">&lt;<span class="name">span</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，<span class="tag">&lt;<span class="name">span</span>&gt;</span>23<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear mg-t-10&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wy-pro-pri fl&quot;</span>&gt;</span></span><br><span class="line">                ¥<span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;num font-15&quot;</span>&gt;</span>&#123;&#123; product.price &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pro-amount fr&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;font-13&quot;</span>&gt;</span>数量×<span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; item.count &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endwith %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="django-mall3/image-20200707220959541.png" alt="image-20200707220959541"></p><h2 id="添加到购物车"><a href="#添加到购物车" class="headerlink" title="添加到购物车"></a>添加到购物车</h2><p>商品模型添加 减库存的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    xxx</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_storage</span>(<span class="params">self,count</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 减库存 &quot;&quot;&quot;</span></span><br><span class="line">        self.remain_count = F(<span class="string">&#x27;remain_count&#x27;</span>) - <span class="built_in">abs</span>(count)</span><br><span class="line">        self.save()</span><br><span class="line">        self.refresh_from_db()</span><br></pre></td></tr></table></figure><p>给视图中添加加入购物车方法，然后通过js调用该方法。因为涉及到多个模型的调用，需要加入事务机制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="meta">@transaction.atomic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart_add</span>(<span class="params">request, pro_uid</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 添加商品到购物车 写接口&quot;&quot;&quot;</span></span><br><span class="line">    user = request.user</span><br><span class="line">    product = get_object_or_404(Product,uid=pro_uid,is_valid=<span class="literal">True</span>,</span><br><span class="line">                                status=constants.PRODUCT_STATUS_SELL)</span><br><span class="line">    <span class="comment"># 购买数量</span></span><br><span class="line">    count = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;count&#x27;</span>,<span class="number">1</span>))</span><br><span class="line">    <span class="comment"># 校验库存</span></span><br><span class="line">    <span class="keyword">if</span> product.remain_count &lt; count:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;no&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 减库存</span></span><br><span class="line">    product.update_storage(count)</span><br><span class="line">    <span class="comment"># 生成购物记录</span></span><br><span class="line">    <span class="comment"># 如果已经添加到购物车了，就把购买的数量和价格更新一下</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cart = Cart.objects.get(product=product,user=user,status=constants.ORDER_STATUS_INIT)</span><br><span class="line">        <span class="comment"># 更新价格和数量</span></span><br><span class="line">        count = cart.count+count</span><br><span class="line">        cart.count = count</span><br><span class="line">        cart.amount = count * cart.price</span><br><span class="line">        <span class="comment"># 保存到购物车数据表中</span></span><br><span class="line">        cart.save()</span><br><span class="line">    <span class="keyword">except</span> Cart.DoesNotExist:</span><br><span class="line">        <span class="comment"># 没有加入到过购物车</span></span><br><span class="line">        Cart.objects.create(product=product,user=user,name=product.name,img=product.img,</span><br><span class="line">                            price=product.price,origin_price=product.origin_price,</span><br><span class="line">                            count=count,amount=count * product.price)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>给 加入购物车 的标签添加id属性，加入点击事件调用加入购物车的动作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#cart_add&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.post(<span class="string">&#x27;&#123;% url &quot;mine:cart_add&quot; pro_obj.uid %&#125;&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">count</span>:<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>碰到的问题：django.urls.exceptions.NoReverseMatch</p><p><img src="django-mall3/image-20200708211808882.png" alt="image-20200708211808882"></p><p>正则匹配错误，我将url路径商品参数匹配为了数字，实际上应该使用S+</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r&#x27;^cart/(?P&lt;pro_uid&gt;\S+)/$&#x27;</span>, views.cart_add, name=<span class="string">&#x27;cart_add&#x27;</span>),</span><br></pre></td></tr></table></figure><p>这样就可以通过商品详情页直接添加到购物车中</p><h2 id="提交订单"><a href="#提交订单" class="headerlink" title="提交订单"></a>提交订单</h2><p>添加购物车url，在商品详情页面、首页页脚中添加跳转。</p><p>添加购物车视图，提取用户地址快照保存到订单中，同时修改购物车的状态，关联订单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mine.models <span class="keyword">import</span> Order, Cart</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cart</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 查询购物车中的商品</span></span><br><span class="line">    product_list = request.user.carts.<span class="built_in">filter</span>(status=constants.ORDER_STATUS_INIT)</span><br><span class="line">    <span class="comment"># 通过聚合函数查询商品总额 然后传入模板</span></span><br><span class="line">    total = product_list.aggregate(Sum(<span class="string">&#x27;amount&#x27;</span>),<span class="built_in">sum</span>(<span class="string">&#x27;count&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> request.method ==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 提取当前用户地址</span></span><br><span class="line">        default_address = request.user.default_address</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> default_address:</span><br><span class="line">            <span class="comment">#消息通知</span></span><br><span class="line">            messages.warning(request,<span class="string">&#x27;请选择地址信息&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;accounts:address_list&#x27;</span>)</span><br><span class="line">        order = Order.objects.create(</span><br><span class="line">            user=request.user,</span><br><span class="line">            <span class="comment"># 生成年月日加上随机数的订单编号</span></span><br><span class="line">            sn=datetime.now().strftime(<span class="string">&#x27;%Y%m%d%H%M%S%f&#x27;</span>)+<span class="built_in">str</span>(random.randint(<span class="number">1000</span>,<span class="number">9999</span>)),</span><br><span class="line">            buy_amount=total[<span class="string">&#x27;amount__sum&#x27;</span>],</span><br><span class="line">            buy_count=total[<span class="string">&#x27;count__sum&#x27;</span>],</span><br><span class="line">            to_user=default_address.receiver,</span><br><span class="line">            to_area=default_address.get_address_format(),</span><br><span class="line">            to_address=default_address.address,</span><br><span class="line">            to_phone=default_address.phone,</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># 修改购物车中的状态 改为已提交</span></span><br><span class="line">        <span class="comment"># 将生成的订单关联到购物车</span></span><br><span class="line">        product_list.update(status=constants.ORDER_STATUS_SUBMIT,order=order)</span><br><span class="line">        <span class="comment"># 跳转到订单页</span></span><br><span class="line">        messages.success(request,<span class="string">&#x27;下单成功，请支付&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;mine:order&#x27;</span>,order.sn)</span><br><span class="line">    <span class="comment"># 通过聚合函数查询商品总额 然后传入模板</span></span><br><span class="line">    amount = product_list.aggregate(Sum(<span class="string">&#x27;amount&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;shopcart.html&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;product_list&#x27;</span>:product_list,</span><br><span class="line">        <span class="string">&#x27;amount&#x27;</span>:total[<span class="string">&#x27;amount__sum&#x27;</span>]</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>对于购物车显示的总额，需要通过聚合函数查询所有商品的总额 ，然后传入购物车模板。其他参数也要响应传入模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pro-amount fr&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Spinner&quot;</span> <span class="attr">data-value</span>=<span class="string">&quot;&#123;&#123; item.count &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/static/js/jquery.Spinner.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="string">&#x27;.Spinner&#x27;</span>).Spinner(&#123; <span class="attr">value</span>: $(<span class="string">&#x27;.Spinner&#x27;</span>).attr(<span class="string">&#x27;data-value&#x27;</span>), <span class="attr">len</span>: <span class="number">3</span>, <span class="attr">max</span>: <span class="number">999</span> &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>以上是实现调用数据库中的购买数量，传入模板</p><p><img src="django-mall3/image-20200709223835870.png" alt="image-20200709223835870"></p><p>但是还没有实现底部合计和上面数量的联动，以及购物车添加数量之后导入订单的问题。待后续有时间可以完善。</p><p>至此，已经可以实现商品到购物车再到下单页面的流程。</p><h2 id="订单支付"><a href="#订单支付" class="headerlink" title="订单支付"></a>订单支付</h2><p>购物车视图中已添加消息通知，将消息通知传入模板。</p><p>使用的jQuery weui里的消息toptip消息通知模板，将其加入模板中，或者可以加入公用模板base.html中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> messages %&#125;</span><br><span class="line">&#123;% <span class="keyword">for</span> msg <span class="keyword">in</span> messges %&#125;</span><br><span class="line">$.toptip(<span class="string">&#x27;&#123;&#123; msg &#125;&#125;&#x27;</span>,<span class="string">&#x27;&#123;&#123; msg.tags &#125;&#125;&#x27;</span>);</span><br><span class="line"> &#123;% endfor %&#125;</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>新建提交订单的url和视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 订单提交视图</span></span><br><span class="line">path(<span class="string">&#x27;order_pay/&#x27;</span>,views.order_pay,name=<span class="string">&#x27;order_pay&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">order_pay</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 提交订单 &quot;&quot;&quot;</span></span><br><span class="line">    user=request.user</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        sn = request.POST.get(<span class="string">&#x27;sn&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="comment">#查询订单信息</span></span><br><span class="line">        order=user.orders.get(sn=sn)</span><br><span class="line">        <span class="comment"># 总额与积分比较，够了扣除，不够报错</span></span><br><span class="line">        <span class="keyword">if</span> order.buy_amount &gt; user.integral:</span><br><span class="line">            messages.error(request,<span class="string">&#x27;积分余额不足&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;mine:order&#x27;</span>,sn=sn)</span><br><span class="line">        user.update_integral(<span class="number">0</span>,order.buy_amount)</span><br><span class="line">        <span class="comment"># 修改订单状态</span></span><br><span class="line">        order.status=constants.ORDER_STATUS_PAID</span><br><span class="line">        order.save()</span><br><span class="line">        <span class="comment"># 修改购物车关联的状态</span></span><br><span class="line">        order.carts.<span class="built_in">all</span>().update(status=constants.ORDER_STATUS_PAID)</span><br><span class="line">        <span class="comment"># 支付成功消息提示</span></span><br><span class="line">        messages.success(request,<span class="string">&#x27;支付成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;mine:order&#x27;</span>,sn=sn)</span><br></pre></td></tr></table></figure><p>最后将订单页的表单提交到该url</p><h2 id="个人中心及订单列表"><a href="#个人中心及订单列表" class="headerlink" title="个人中心及订单列表"></a>个人中心及订单列表</h2><p>实现商品分类、个人中心模板等 尝试用类视图方式实现。</p><p>商品分类url：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 商品分类</span></span><br><span class="line">    path(<span class="string">&#x27;classify&#x27;</span>, views.ClassifyTemplateView.as_view(),name=<span class="string">&#x27;classify&#x27;</span>),</span><br></pre></td></tr></table></figure><p>views：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> ListView, TemplateView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassifyTemplateView</span>(<span class="params">TemplateView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品分类页 &quot;&quot;&quot;</span></span><br><span class="line">    template_name = <span class="string">&#x27;classify.html&#x27;</span></span><br></pre></td></tr></table></figure><p>个人中心：</p><p>个人中心订单页面通过ListView展示，同时通过ajax异步添加订单内容，值得注意的是，订单列表加载内容被单独提取到了另一个order_load.html文件中，且需要在url中指定该模板<code>OrderListView.as_view(template_name=&#39;order_load.html&#39;)</code>，否则无法正常加载订单内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path, path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mine <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> mine.views <span class="keyword">import</span> OrderDetailView, MineTemplateView, CollectView, OrderListView</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 个人中心</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.login_required(MineTemplateView.as_view()), name=<span class="string">&#x27;mine&#x27;</span>),</span><br><span class="line">    <span class="comment"># 订单列表</span></span><br><span class="line">    path(<span class="string">&#x27;order_list/&#x27;</span>,login_required(OrderListView.as_view()),name=<span class="string">&#x27;order_list&#x27;</span>),</span><br><span class="line">    <span class="comment"># 订单列表加载</span></span><br><span class="line">    path(<span class="string">&#x27;order_load/&#x27;</span>,login_required(OrderListView.as_view(template_name=<span class="string">&#x27;order_load.html&#x27;</span>)),name=<span class="string">&#x27;order_load&#x27;</span>),</span><br><span class="line">    <span class="comment"># 收藏</span></span><br><span class="line">    path(<span class="string">&#x27;collect/&#x27;</span>,login_required(CollectView.as_view()),name=<span class="string">&#x27;collect&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Sum, Q</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> DetailView, TemplateView, ListView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mine.models <span class="keyword">import</span> Order</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MineTemplateView</span>(<span class="params">TemplateView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 个人中心详情 &quot;&quot;&quot;</span></span><br><span class="line">    template_name = <span class="string">&#x27;mine.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;传入constants变量&quot;&quot;&quot;</span></span><br><span class="line">        context = <span class="built_in">super</span>().get_context_data(**kwargs)</span><br><span class="line">        context[<span class="string">&#x27;constants&#x27;</span>] = constants</span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderListView</span>(<span class="params">ListView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 订单列表 &quot;&quot;&quot;</span></span><br><span class="line">    paginate_by = <span class="number">6</span></span><br><span class="line">    template_name = <span class="string">&#x27;all_orders.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加订单状态进行搜索 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 先查询用户所有订单</span></span><br><span class="line">        order = Order.objects.<span class="built_in">filter</span>(user=self.request.user)</span><br><span class="line">        query = Q(status=constants.ORDER_STATUS_DELETED)</span><br><span class="line">        status = self.request.GET.get(<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="comment"># 出入订单状态进行查询</span></span><br><span class="line">        <span class="keyword">if</span> status:</span><br><span class="line">            query = Q(status=status)</span><br><span class="line">            <span class="keyword">return</span> order.<span class="built_in">filter</span>(query)</span><br><span class="line">        <span class="comment"># 如果status传入为空（则查询全部有效订单），返回有效订单</span></span><br><span class="line">        <span class="keyword">return</span> order.exclude(query)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加传入模板的参数 &quot;&quot;&quot;</span></span><br><span class="line">        context = <span class="built_in">super</span>().get_context_data(**kwargs)</span><br><span class="line">        context[<span class="string">&#x27;constants&#x27;</span>] = constants</span><br><span class="line">        <span class="comment"># 转换status数据类型，方便在模板中进行比较判断</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            context[<span class="string">&#x27;status&#x27;</span>] = <span class="built_in">int</span>(self.request.GET.get(<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            context[<span class="string">&#x27;status&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 找出与订单绑定的购物车，从而找出商品信息传入模板</span></span><br><span class="line">        <span class="comment"># first()方法可以使得self.get_queryset()为空结果集时返回None</span></span><br><span class="line">        context[<span class="string">&#x27;cart_list&#x27;</span>] = Cart.objects.<span class="built_in">filter</span>(order=self.get_queryset().first())</span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollectView</span>(<span class="params">TemplateView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 收藏页 &quot;&quot;&quot;</span></span><br><span class="line">    template_name = <span class="string">&#x27;shoucang.html&#x27;</span></span><br></pre></td></tr></table></figure><p>修改订单列表页的模板，通过判断订单状态，实现不同的显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &#x27;base.html&#x27; %&#125;</span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>全部订单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block container %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;wy-header wy-header-fixed&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wy-header-icon-back&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wy-header-title&quot;</span>&gt;</span>订单管理<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-tab&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">&quot;weui-navbar bar-fixed&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">&quot;top:44px; height:44px; background:#fff;&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">class</span>=<span class="string">&quot;weui-navbar__item proinfo-tab-tit font-14</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#123;% if status == &#x27;&#x27; %&#125;weui-bar__item--on&#123;% endif %&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mine:order_list&#x27; %&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>全部&lt;/a</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;weui-navbar__item proinfo-tab-tit font-14</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#123;% if status == constants.ORDER_STATUS_SUBMIT %&#125;weui-bar__item--on&#123;% endif %&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mine:order_list&#x27; %&#125;?status=&#123;&#123; constants.ORDER_STATUS_SUBMIT &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>待付款&lt;/a</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;weui-navbar__item proinfo-tab-tit font-14</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#123;% if status == constants.ORDER_STATUS_PAID %&#125;weui-bar__item--on&#123;% endif %&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mine:order_list&#x27; %&#125;?status=&#123;&#123; constants.ORDER_STATUS_PAID &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>待发货&lt;/a</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;weui-navbar__item proinfo-tab-tit font-14</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#123;% if status == constants.ORDER_STATUS_SENT %&#125;weui-bar__item--on&#123;% endif %&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mine:order_list&#x27; %&#125;?status=&#123;&#123; constants.ORDER_STATUS_SENT &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>待收货&lt;/a</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;weui-navbar__item proinfo-tab-tit font-14</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#123;% if status == constants.ORDER_STATUS_DONE %&#125;weui-bar__item--on&#123;% endif %&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mine:order_list&#x27; %&#125;?status=&#123;&#123; constants.ORDER_STATUS_DONE &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>待评价&lt;/a</span><br><span class="line">                &gt;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-tab__bd proinfo-tab-con&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;order_list&#x27;</span> <span class="attr">style</span>=<span class="string">&quot;padding-top:87px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line">&#123;% block footer %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        $(document).on(&#x27;click&#x27;, &#x27;.ords-btn-dele&#x27;, function () &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            $.confirm(</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#x27;您确定要删除此订单吗?&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#x27;确认删除?&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                function () &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    $.toast(&#x27;订单已经删除!&#x27;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                function () &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    //取消操作</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            );</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        $(document).on(&#x27;click&#x27;, &#x27;.receipt&#x27;, function () &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            $.alert(&#x27;五星好评送蓝豆哦，赶快去评价吧！&#x27;, &#x27;收货完成！&#x27;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        /* 封装函数，异步获取订单数据 */</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        var loading = false; //是否在加载中</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        var page = 1; //当前页</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        var noMore = false; //是否有下一页</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        function LoadData(callback) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            if (loading) return;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            if (noMore) return;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            loading = true;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            $.ajax(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                url: &#x27;&#123;% url &#x27;mine:order_load&#x27; %&#125;&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#123;#async: false,#&#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                data: &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    page: page,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    cosntants: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">constants</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    status: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">status</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    cart_list: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">cart_list</span> &#125;&#125;</span><span class="xml">&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                // 调用接口成功后</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                success: function (rest) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    // 添加html片段到内容区</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    $(&#x27;#order_list&#x27;).append(rest);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    loading = false;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    // 如果有回调函数则调用</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    if (callback) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                        callback()</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                    &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        $(document.body).infinite(200).on(&#x27;infinite&#x27;, function () &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            if (page &lt;</span><span class="template-variable">&#123;&#123; <span class="name">paginator.num_pages</span> &#125;&#125;</span><span class="xml">) &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                page++;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                LoadData();</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        LoadData();</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><p>order_load.html:</p><p><code>order.get_status_display</code>可以获取status对应文字内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tab1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;weui-tab__bd-item weui-tab__bd-item--active&quot;</span>&gt;</span></span><br><span class="line">              &#123;% for order in object_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-panel weui-panel_access&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-panel__hd&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>单号：&#123;&#123; order.sn &#125;&#125;&lt;/span</span><br><span class="line">                &gt;<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ord-status-txt-ts fr&quot;</span>&gt;</span></span><br><span class="line">                  &#123;% if status == &#x27;&#x27; %&#125;&#123;&#123; order.get_status_display &#125;&#125;&#123;% endif %&#125;</span><br><span class="line">                  &#123;% if status == constants.ORDER_STATUS_SUBMIT %&#125;待付款&#123;% endif %&#125;</span><br><span class="line">                  &#123;% if status == constants.ORDER_STATUS_PAID %&#125;待发货&#123;% endif %&#125;</span><br><span class="line">                  &#123;% if status == constants.ORDER_STATUS_SENT %&#125;待收货&#123;% endif %&#125;</span><br><span class="line">                  &#123;% if status == constants.ORDER_STATUS_DONE %&#125;待评价&#123;% endif %&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__bd  pd-10&quot;</span>&gt;</span></span><br><span class="line">              &#123;% for cart in order.carts.all %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box_appmsg ord-pro-list&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__hd&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mall:pro_info&#x27; cart.product.uid %&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                      &gt;</span><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">class</span>=<span class="string">&quot;weui-media-box__thumb&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; cart.img.url &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">alt</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">                    /&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__bd&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__desc&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mall:pro_info&#x27; cart.product.uid %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ord-pro-link&quot;</span></span></span><br><span class="line"><span class="tag">                        &gt;</span>&#123;&#123; cart.name &#125;&#125;&lt;/a</span><br><span class="line">                      &gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__desc&quot;</span>&gt;</span></span><br><span class="line">                      规格：<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>，<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear mg-t-10&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wy-pro-pri fl&quot;</span>&gt;</span></span><br><span class="line">                        ¥<span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;num font-15&quot;</span>&gt;</span>&#123;&#123; cart.price &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pro-amount fr&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;font-13&quot;</span></span></span><br><span class="line"><span class="tag">                          &gt;</span>数量×<span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; cart.count &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span>&lt;/span</span><br><span class="line">                        &gt;</span><br><span class="line">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ord-statistics&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>共<span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;num&quot;</span>&gt;</span>&#123;&#123; order.carts.all.count &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span>件商品，<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;wy-pro-pri&quot;</span></span></span><br><span class="line"><span class="tag">                  &gt;</span>总金额：¥<span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;num font-15&quot;</span>&gt;</span>&#123;&#123; order.buy_amount &#125;&#125;<span class="tag">&lt;/<span class="name">em</span>&gt;</span>&lt;/span</span><br><span class="line">                &gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>(含运费<span class="tag">&lt;<span class="name">b</span>&gt;</span>￥0.00<span class="tag">&lt;/<span class="name">b</span>&gt;</span>)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-panel__ft&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-cell weui-cell_access weui-cell_link oder-opt-btnbox&quot;</span>&gt;</span></span><br><span class="line">                    &#123;% if status == constants.ORDER_STATUS_SUBMIT or status == constants.ORDER_STATUS_DONE %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ords-btn-dele&quot;</span>&gt;</span>删除订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    &#123;% if status == constants.ORDER_STATUS_SUBMIT %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;order_info2.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ords-btn-com&quot;</span>&gt;</span>去付款<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    &#123;% if status == constants.ORDER_STATUS_SENT %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ords-btn-com receipt&quot;</span>&gt;</span>确认收货<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                    &#123;% if status == constants.ORDER_STATUS_DONE %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;comment.html&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ords-btn-com&quot;</span>&gt;</span>评价<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    &#123;% endif %&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给页脚模板添加首页、个人中心、分类、购物车等等跳转，同时相应页面的页脚添加css效果。</p><p>引入页脚模板时候加入tab标签，这样页脚就能根据标签显示对应css效果（css特效通过的是jQuery模板class中的weui-bar__item–on显示）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 个人中心模块 --&gt;</span></span><br><span class="line">&#123;% include &#x27;footer.html&#x27; with tab=&#x27;mine&#x27; %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- footer.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mine:mine&#x27; %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;weui-tabbar__item</span></span></span><br><span class="line"><span class="string"><span class="tag">                                       &#123;% if tab == &#x27;mine&#x27;%&#125;weui-bar__item--on&#123;% endif %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-tabbar__icon foot-menu-member&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;weui-tabbar__label&quot;</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在base.html中添加全局的返回事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.wy-header-icon-back&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">history.go(-<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>个人中心模板中，实现各个类型订单按钮的跳转，通过添加status参数的方式，视图中通过判断status参数调取订单数据。而订单列表模板中（如上）则通过判断status参数显示不同的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;mine:order_list&#x27; %&#125;?status=&#123;&#123; constants.ORDER_STATUS_SUBMIT &#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;center-ordersModule&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="admin账户的内容编辑"><a href="#admin账户的内容编辑" class="headerlink" title="admin账户的内容编辑"></a>admin账户的内容编辑</h3><p>在admin后台管理中，默认的用户信息编辑中，只显示了三块内容，无法进行其他的用户信息的添加与编辑。</p><p><img src="django-mall3/image-20200723160132708.png" alt="image-20200723160132708"></p><p>如果要通过后台进行其他用户信息的修改，查看UserAdmin源码后，发现可以通过fieldsets来进行修改。</p><p><img src="django-mall3/image-20200723160714972.png" alt="image-20200723160714972"></p><p>比如我们要添加用户积分integral的显示修改，则复制该父类的fieldsets源码到用户admin类中，添加该字段即可。简单粗暴地进行改写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@admin.register(<span class="params">User</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAdmin</span>(<span class="params">UserAdmin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户管理 &quot;&quot;&quot;</span></span><br><span class="line">    list_display = (<span class="string">&#x27;format_username&#x27;</span>,<span class="string">&#x27;nickname&#x27;</span>,<span class="string">&#x27;integral&#x27;</span>,<span class="string">&#x27;is_valid&#x27;</span>)</span><br><span class="line">    fieldsets = (</span><br><span class="line">        (<span class="literal">None</span>, &#123;<span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>)&#125;),</span><br><span class="line">        ((<span class="string">&#x27;Personal info&#x27;</span>), &#123;<span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;first_name&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;integral&#x27;</span>)&#125;),</span><br><span class="line">        ((<span class="string">&#x27;Permissions&#x27;</span>), &#123;</span><br><span class="line">            <span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;is_active&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>, <span class="string">&#x27;is_superuser&#x27;</span>, <span class="string">&#x27;groups&#x27;</span>, <span class="string">&#x27;user_permissions&#x27;</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">        ((<span class="string">&#x27;Important dates&#x27;</span>), &#123;<span class="string">&#x27;fields&#x27;</span>: (<span class="string">&#x27;last_login&#x27;</span>, <span class="string">&#x27;date_joined&#x27;</span>)&#125;),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format_username</span>(<span class="params">self,obj</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 用户名脱敏处理 &quot;&quot;&quot;</span></span><br><span class="line">        format_username = obj.username[<span class="number">0</span>:<span class="number">3</span>] + <span class="string">&#x27;***&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> format_username</span><br><span class="line"></span><br><span class="line">    format_username.short_description = <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">    search_list = (<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;nickname&#x27;</span>)</span><br><span class="line">    actions = [set_valid,set_invalid]</span><br></pre></td></tr></table></figure><h3 id="订单提交的bug"><a href="#订单提交的bug" class="headerlink" title="订单提交的bug"></a>订单提交的bug</h3><p>订单提交之后，依然在原始页面，然后点击该页面的支付按钮后会报错无该订单。</p><p>解决办法1：给button添加a标签实现跳转</p><p>解决方法2：因为支付后 订单属性发生变化，判断订单属性显示不同内容。</p><p>订单详细传入constants参数到模板。</p><p>在订单的DetailView中传入constants变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderDetailView</span>(<span class="params">DetailView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 订单详情 &quot;&quot;&quot;</span></span><br><span class="line">    model = Order</span><br><span class="line">    <span class="comment"># 将模型中的sn字段传入url参数进行查询</span></span><br><span class="line">    slug_field = <span class="string">&#x27;sn&#x27;</span></span><br><span class="line">    slug_url_kwarg = <span class="string">&#x27;sn&#x27;</span></span><br><span class="line">    template_name = <span class="string">&#x27;order_info2.html&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        context = <span class="built_in">super</span>().get_context_data(**kwargs)</span><br><span class="line">        context[<span class="string">&#x27;constants&#x27;</span>] = constants</span><br><span class="line">        <span class="keyword">return</span> context</span><br></pre></td></tr></table></figure><p>在html页面中进行判断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if object.status != constants.ORDER_STATUS_PAID %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mg10-0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;weui-btn weui-btn_primary&quot;</span>&gt;</span>积分支付<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="待解决问题"><a href="#待解决问题" class="headerlink" title="待解决问题"></a>待解决问题</h2><p>订单的多次提交</p><p>商城收藏页的完善</p><p>商品分类页的完善</p>]]></content>
      
      
      <categories>
          
          <category> 实战案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 实战 </tag>
            
            <tag> JQuery </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进程同步之共享内存</title>
      <link href="/2020/07/01/python-shared-memory/"/>
      <url>/2020/07/01/python-shared-memory/</url>
      
        <content type="html"><![CDATA[<p>进程同步的方法有很多中，共享内存是一种最有用的进程间通信的方法。python实现共享内存可以通过mmap模块。</p><blockquote><p>mmap是一种虚拟内存映射文件的方法，即可以将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。</p></blockquote><blockquote><p>contextlib 用于创建和使用上下文管理器的实用程序。python contextlib 模块包含用于处理上下文管理器和 with 语句的实用程序。</p></blockquote><p>创建共享内存的python文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmap</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> contextlib.closing(mmap.mmap(-<span class="number">1</span>, <span class="number">100</span>, tagname=<span class="string">&#x27;SASU&#x27;</span>, access=mmap.ACCESS_WRITE)) <span class="keyword">as</span> m:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10001</span>):</span><br><span class="line">    m.seek(<span class="number">0</span>)</span><br><span class="line">    m.write(<span class="built_in">str</span>(i).encode())</span><br><span class="line">    m.flush()</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>读取共享内存的python文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmap</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  <span class="keyword">with</span> contextlib.closing(mmap.mmap(-<span class="number">1</span>, <span class="number">100</span>, tagname=<span class="string">&quot;SASU&quot;</span>, access=mmap.ACCESS_READ)) <span class="keyword">as</span> m:</span><br><span class="line">    m.tell()</span><br><span class="line">    s = m.read()</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>通过创建运行以上两个文件，可以简单实现进程间的共享内存通信。</p><p><img src="python-shared-memory/image-20200701231031498.png" alt="image-20200701231031498"></p><p>第二个进程正在读取第一个进程写入的数据，实现了进程间的同步</p><p>关于mmap模块的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mmap</span>.<span class="title">mmap</span>(<span class="params">fileno, length, tagname=<span class="literal">None</span>, access=ACCESS_DEFAULT[, offset]</span>)</span></span><br><span class="line"><span class="class"># <span class="title">unix</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">mmap</span>.<span class="title">mmap</span>(<span class="params">fileno, length, flags=MAP_SHARED, prot=PROT_WRITE|PROT_READ, access=ACCESS_DEFAULT[, offset]</span>)</span></span><br></pre></td></tr></table></figure><p>fileno： 文件描述符，可以是file对象的fileno()方法，或者来自os.open()，在调用mmap()之前打开文件，不再需要文件时要关闭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">os.O_RDONLY   以只读的方式打开 Read only</span><br><span class="line">os.O_WRONLY   以只写的方式打开 Write only</span><br><span class="line">os.O_RDWR     以读写的方式打开 Read and write</span><br><span class="line">os.O_APPEND  以追加的方式打开  </span><br><span class="line">os.O_CREAT   创建并打开一个新文件</span><br><span class="line">os.O_EXCL     os.O_CREAT| os.O_EXCL 如果指定的文件存在，返回错误</span><br><span class="line">os.O_TRUNC    打开一个文件并截断它的长度为零（必须有写权限）</span><br><span class="line">os.O_BINARY          以二进制模式打开文件（不转换）</span><br><span class="line">os.O_NOINHERIT        阻止创建一个共享的文件描述符</span><br><span class="line">os.O_SHORT_LIVED</span><br><span class="line">os.O_TEMPORARY        与O_CREAT一起创建临时文件</span><br><span class="line">os.O_RANDOM         缓存优化,但不限制从磁盘中随机存取</span><br><span class="line">os.O_SEQUENTIAL   缓存优化,但不限制从磁盘中序列存取</span><br><span class="line">os.O_TEXT           以文本的模式打开文件（转换）</span><br></pre></td></tr></table></figure><p>length：要映射文件部分的大小（以字节为单位），这个值为0，则映射整个文件，如果大小大于文件当前大小，则扩展这个文件。</p><p>flags：MAP_PRIVATE：这段内存映射只有本进程可用；mmap.MAP_SHARED：将内存映射和其他进程共享，所有映射了同一文件的进程，都能够看到其中一个所做的更改；</p><p>prot：mmap.PROT_READ, mmap.PROT_WRITE 和 mmap.PROT_WRITE | mmap.PROT_READ。最后一者的含义是同时可读可写。</p><p>access：在mmap中有可选参数access的值有</p><p>ACCESS_READ：读访问。</p><p>ACCESS_WRITE：写访问，默认。</p><p>ACCESS_COPY：拷贝访问，不会把更改写入到文件，使用flush把更改写到文件。</p><p>mmap对象的方法，对象m：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">m.close()</span><br><span class="line">关闭 m 对应的文件；</span><br><span class="line"></span><br><span class="line">m.find(str, start=0)</span><br><span class="line">从 start 下标开始，在 m 中从左往右寻找子串 str 最早出现的下标；</span><br><span class="line"></span><br><span class="line">m.flush([offset, n])</span><br><span class="line">把 m 中从offset开始的n个字节刷到对应的文件中；</span><br><span class="line"></span><br><span class="line">m.move(dstoff, srcoff, n)</span><br><span class="line">等于 m[dstoff:dstoff+n] = m[srcoff:srcoff+n]，把从 srcoff 开始的 n 个字节复制到从 dstoff 开始的n个字节，可能会覆盖重叠的部分。</span><br><span class="line"></span><br><span class="line">m.read(n)</span><br><span class="line">返回一个字符串，从 m 对应的文件中最多读取 n 个字节，将会把 m 对应文件的位置指针向后移动；</span><br><span class="line"></span><br><span class="line">m.read_byte() </span><br><span class="line">返回一个1字节长的字符串，从 m 对应的文件中读1个字节，要是已经到了EOF还调用 read_byte()，则抛出异常 ValueError；</span><br><span class="line"></span><br><span class="line">m.readline()</span><br><span class="line">返回一个字符串，从 m 对应文件的当前位置到下一个&#x27;\n&#x27;，当调用 readline() 时文件位于 EOF，则返回空字符串；</span><br><span class="line"></span><br><span class="line">m.resize(n) ***有问题，执行不了***</span><br><span class="line">把 m 的长度改为 n，m 的长度和 m 对应文件的长度是独立的；</span><br><span class="line"></span><br><span class="line">m.seek(pos, how=0)</span><br><span class="line">同 file 对象的 seek 操作，改变 m 对应的文件的当前位置；</span><br><span class="line"></span><br><span class="line">m.size()</span><br><span class="line">返回 m 对应文件的长度（不是 m 对象的长度len(m)）；</span><br><span class="line"></span><br><span class="line">m.tell()</span><br><span class="line">返回 m 对应文件的当前位置；</span><br><span class="line"></span><br><span class="line">m.write(str)</span><br><span class="line">把 str 写到 m 对应文件的当前位置，如果从 m 对应文件的当前位置到 m 结尾剩余的空间不足len(str)，则抛出 ValueError；</span><br><span class="line"></span><br><span class="line">m.write_byte(byte)</span><br><span class="line">把1个字节（对应一个字符）写到 m 对应文件的当前位置，实际上 m.write_byte(ch) 等于 m.write(ch)。</span><br><span class="line">如果 m 对应文件的当前位置在 m 的结尾，也就是 m 对应文件的当前位置到 m 结尾剩余的空间不足1个字节，write() 抛出异常ValueError，而 write_byte() 什么都不做。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django后台管理系统——以积分商城为例</title>
      <link href="/2020/06/28/django-admin/"/>
      <url>/2020/06/28/django-admin/</url>
      
        <content type="html"><![CDATA[<p>该文章是<a href="https://www.imooc.com/">慕课网</a>的相关课程的学习笔记</p><ul><li>Django后台管理就是对项目数据库表的简单维护</li><li>框架自动生成的后台管理界面</li><li>从ORM模型中读取元数据，简单配置即可使用</li><li>功能强大，可用于对数据库中数据的管理</li></ul><p>学习目标：使用，功能扩展以及性能优化</p><h2 id="将模型添加到后台管理"><a href="#将模型添加到后台管理" class="headerlink" title="将模型添加到后台管理"></a>将模型添加到后台管理</h2><h3 id="将模型添加到后台管理-1"><a href="#将模型添加到后台管理-1" class="headerlink" title="将模型添加到后台管理"></a>将模型添加到后台管理</h3><h4 id="框架配置"><a href="#框架配置" class="headerlink" title="框架配置"></a>框架配置</h4><p>步骤一：INSTALLED_APP配置应用及依赖</p><p>django.contrib.admin、django.contrib.auth、django.contrib.contenttypes、django.contrib.messages、django.contrib.sessions</p><p>步骤二：模板选项配置TEMPLATES中的OPTIONS</p><ul><li><p>添加上下文处理器：context_processors</p><p>django.contrib.auth.context_processors.auth</p><p>django.contrib.messages.context_processors.messages</p></li></ul><p>步骤三：添加中间件MIDDLEWARE</p><p>django.contrib.auth.middleware.AuthenticationMiddleware</p><p>django.contrib.messages.middleware.MessagesMiddleware</p><p>步骤四：配置URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>访问后台管理：<a href="http://127.0.0.1:8000/admin/">http://127.0.0.1:8000/admin/</a></p><p>可以修改用户的相关权限，也可以通过组的方式给一组用户添加特定权限。</p><p>settings中的<code>LANGUAGE_CODE = &#39;zh-hans&#39; </code>可以更换语言为中文，同时更换时区为TIME_ZONE = ‘Asia/Shanghai’</p><h4 id="ORM模型配置"><a href="#ORM模型配置" class="headerlink" title="ORM模型配置"></a>ORM模型配置</h4><p>步骤一：在模块中新建admin.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一 通过装饰器注册后台管理：</span></span><br><span class="line"><span class="meta">@admin.register(<span class="params">Product</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品信息 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 列表中显示的字段</span></span><br><span class="line">    list_display = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;types&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,<span class="string">&#x27;img&#x27;</span>,<span class="string">&#x27;is_valid&#x27;</span>,<span class="string">&#x27;reorder&#x27;</span>,<span class="string">&#x27;created_at&#x27;</span>,<span class="string">&#x27;online_time&#x27;</span>,<span class="string">&#x27;offline_time&#x27;</span>]</span><br><span class="line">    <span class="comment"># 修改分页的大小</span></span><br><span class="line">    list_per_page = <span class="number">7</span></span><br><span class="line">    <span class="comment"># 优化搜索，可以选择商品的类型状态</span></span><br><span class="line">    list_filer = (<span class="string">&#x27;types&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,)</span><br><span class="line">    <span class="comment"># 按名称进行搜索</span></span><br><span class="line">    search_fields = (<span class="string">&#x27;name&#x27;</span>,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二注册后台管理：</span></span><br><span class="line">admin.site.register(Product,ProductAdmin)</span><br></pre></td></tr></table></figure><p>步骤二：封装模型自定义的管理后台功能和选项</p><ul><li><p>每个模型创建一个ModelAdmin的子类</p><p>ModelAdmin配置选项</p><ul><li>filed/exclude——需要编辑/不需要编辑的字段列表</li><li>form——自定义表单</li><li>list_display——在列表中显示的字段</li><li>ordering——指定排序规则</li></ul></li></ul><p>步骤三：INSTALLED_APPS配置应用</p><ul><li><p>需要管理的ORM模型自动搜索添加至后台管理</p><p>如<code>accounts.apps.AccountsConfig</code></p></li></ul><h3 id="使用admin的一些优化配置"><a href="#使用admin的一些优化配置" class="headerlink" title="使用admin的一些优化配置"></a>使用admin的一些优化配置</h3><ul><li><p>查询速度优化</p><p>减少每页的数据大小，比如分页；减少SQL查询的次数，外键关联等一次性查询。</p><p>list_per_page    分页大小，默认每页100条</p><p>list_select_related    外键关联查询优化</p><p>paginator    分页器</p></li><li><p>字段格式化字段优化</p><p>场景：将用户名、手机号等脱敏处理</p><p>在定义的admin类中添加自定义方法，然后再将名称传入list_display。同时还能指定方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.admin <span class="keyword">import</span> UserAdmin</span><br><span class="line"><span class="keyword">from</span> accounts.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">admin.site.register(User,UserAdmin)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAdmin</span>(<span class="params">UserAdmin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户管理 &quot;&quot;&quot;</span></span><br><span class="line">    list_display = (<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;nickname&#x27;</span>,<span class="string">&#x27;integral&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format_username</span>(<span class="params">self,obj</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 用户名脱敏处理 &quot;&quot;&quot;</span></span><br><span class="line">        format_username = obj.username[<span class="number">0</span>:<span class="number">2</span>] + <span class="string">&#x27;***&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> format_username</span><br><span class="line"></span><br><span class="line">    format_username.short_description = <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">    search_list = (<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;nickname&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>快捷搜索优化</p><p>list_filter</p></li><li><p>实现用户搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_fields = (<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;nickname&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><p>aaps.py添加verbose_name可修改在管理系统的显示名称, 模型也可以通过verbose_name修改显示的名称</p><h3 id="添加自定义方法"><a href="#添加自定义方法" class="headerlink" title="添加自定义方法"></a>添加自定义方法</h3><p>思考：以下场景如何解决？</p><ul><li>批量禁用用户</li><li>批量下线商品</li></ul><p>我们需要选择一批对象，然后执行某个操作。</p><p>第一步：在相关的类中 定义操作函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">action_name</span>(<span class="params">modeladmin,request,queryset</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>第二步：命名界面显示的操作名称</p><p><code>aciton_name.short_description = &#39;将选中的商品下线&#39;</code></p><p>第三步：配置ModelAdmin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    actions = [<span class="string">&#x27;action_name&#x27;</span>]</span><br></pre></td></tr></table></figure><p><font color='red'>另外，另一种方法是单独建立一个定义函数，同时类中的actions引用该函数。这样该定义函数就可以被其他的类也同时使用。</font></p><p>举例，批量禁用/启用选中用户/商品：</p><p>在公用的包中新增公用的自定义函数模块admin_actions.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_valid</span>(<span class="params">modeladmin,request,queryset</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 启用对象 &quot;&quot;&quot;</span></span><br><span class="line">    queryset.update(is_valid=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 操作成功通知</span></span><br><span class="line">    messages.success(request, <span class="string">&#x27;操作成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_invalid</span>(<span class="params">modeladmin,request,queryset</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 禁用对象 &quot;&quot;&quot;</span></span><br><span class="line">    queryset.update(is_valid=<span class="literal">False</span>)</span><br><span class="line">    messages.success(request, <span class="string">&#x27;操作成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">set_invalid.short_description = <span class="string">&#x27;禁用对象&#x27;</span></span><br><span class="line">set_valid.short_description = <span class="string">&#x27;启用对象&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在各个模块的admin.py中就可以直接通过actions引用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"><span class="keyword">from</span> utils.admin_actions <span class="keyword">import</span> set_valid, set_invalid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">Product</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品信息 &quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;types&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;is_valid&#x27;</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    list_filter = (<span class="string">&#x27;types&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,)</span><br><span class="line">    search_fields = (<span class="string">&#x27;name&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">    actions = [set_valid, set_invalid]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.admin <span class="keyword">import</span> UserAdmin</span><br><span class="line"><span class="keyword">from</span> accounts.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> utils.admin_actions <span class="keyword">import</span> set_invalid, set_valid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">User</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAdmin</span>(<span class="params">UserAdmin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户管理 &quot;&quot;&quot;</span></span><br><span class="line">    list_display = (<span class="string">&#x27;format_username&#x27;</span>,<span class="string">&#x27;nickname&#x27;</span>,<span class="string">&#x27;integral&#x27;</span>,<span class="string">&#x27;is_valid&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format_username</span>(<span class="params">self,obj</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 用户名脱敏处理 &quot;&quot;&quot;</span></span><br><span class="line">        format_username = obj.username[<span class="number">0</span>:<span class="number">2</span>] + <span class="string">&#x27;***&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> format_username</span><br><span class="line"></span><br><span class="line">    format_username.short_description = <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">    search_list = (<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;nickname&#x27;</span>)</span><br><span class="line">    actions = [set_valid,set_invalid]</span><br></pre></td></tr></table></figure><p>这用后台管理中就添加了自定义的启用/禁用对象的方法。</p><p><img src="django-admin/image-20200629174531501.png" alt="image-20200629174531501"></p><h3 id="自定义模型的配置"><a href="#自定义模型的配置" class="headerlink" title="自定义模型的配置"></a>自定义模型的配置</h3><p>思考：如下场景如何实现？</p><ul><li>商品的UID是商品的唯一标识，创建了就不允许修改</li><li>商品的销售价格怎么保证输入的是正整数</li><li>商品的类型是否可以改为radio单选</li></ul><p>限制字段修改的方法：</p><ol><li><p>在ORM模型中给字段添加属性<code>editable=False</code></p></li><li><p>admin.py的类中加上<code>exclude=[&#39;colum_name&#39;] </code></p><p>使用前两种的字段在后台管理系统中都不可见了</p></li><li><p>admin.py的类中加上<code>readonly_fields = [&#39;colum_name&#39;]</code>，该字段名会在后台显示，但是不可编辑</p></li></ol><p>自定义后台模型的表单验证和自定义后台模型的界面显示：</p><p>新建后台编辑表单，添加clean方法验证，同时在admin中引用该表单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdminForm</span>(<span class="params">forms.ModelForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品编辑 对应商品在后台管理中的表单 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Product</span><br><span class="line">        exclude = [<span class="string">&#x27;created_at&#x27;</span>,<span class="string">&#x27;updated_at&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 修改types的输入类型，改为单选输入框</span></span><br><span class="line">        widgets=&#123;</span><br><span class="line">            <span class="string">&#x27;types&#x27;</span>:forms.RadioSelect</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_price</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证表单，使得价格栏不能填入负数 &quot;&quot;&quot;</span></span><br><span class="line">        price = self.cleaned_data[<span class="string">&#x27;price&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> price &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;兑换价格不能小于0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> price</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="keyword">from</span> mall.forms <span class="keyword">import</span> ProductAdminForm</span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"><span class="keyword">from</span> utils.admin_actions <span class="keyword">import</span> set_valid, set_invalid</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@admin.register(<span class="params">Product</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品信息 &quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;types&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;is_valid&#x27;</span>]</span><br><span class="line">    list_per_page = <span class="number">10</span></span><br><span class="line">    list_filter = (<span class="string">&#x27;types&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,)</span><br><span class="line">    search_fields = (<span class="string">&#x27;name&#x27;</span>,)</span><br><span class="line">    readonly_fields = [<span class="string">&#x27;remain_count&#x27;</span>]</span><br><span class="line">    actions = [set_valid, set_invalid]</span><br><span class="line">    <span class="comment"># 引用该后台表单</span></span><br><span class="line">    form = ProductAdminForm</span><br></pre></td></tr></table></figure><p>表单对应的模型中修改<code>__str__</code>方法可以修改后台的表单项的显示名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; models.py&quot;&quot;&quot;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xxx</span>：</span></span><br><span class="line"><span class="class">...</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 修改模型中每个对象的名字，方便在后台显示 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><p><img src="django-admin/image-20200629204042417.png" alt="image-20200629204042417"></p><h2 id="xadmin的介绍与优化"><a href="#xadmin的介绍与优化" class="headerlink" title="xadmin的介绍与优化"></a>xadmin的介绍与优化</h2><p>Django-admin有哪些缺陷和不足?</p><p>UI不好看，功能不够强大；不能实现响应式；没有导出功能；无定制开发</p><h3 id="xadmin介绍、安装及配置"><a href="#xadmin介绍、安装及配置" class="headerlink" title="xadmin介绍、安装及配置"></a>xadmin介绍、安装及配置</h3><p>使用清华镜像安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xdmin-py3</span><br></pre></td></tr></table></figure><p>配置</p><p>步骤一： INSTALLED_APPS配置应用及依赖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = (</span><br><span class="line">...</span><br><span class="line">    <span class="string">&#x27;xadmin&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;crispy_forms&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;reversion&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>步骤二：同步模型到数据库中</p><p><code>python manage.py migrate</code></p><p>步骤三：配置URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line">xadmin.autodiscover()</span><br><span class="line"></span><br><span class="line"><span class="comment"># version模块自动注册需要版本控制的Model</span></span><br><span class="line"><span class="keyword">from</span> xadmin.plugins <span class="keyword">import</span> xversion</span><br><span class="line">xversion.register_models()</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;xadmin/&#x27;</span>,xadmin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="python-shared-memory/image-20200702001023013.png" alt="image-20200702001023013"></p><p>xadmin的界面要强大得多</p><p><a href="https://xadmin.readthedocs.io/en/latest/index.html">https://xadmin.readthedocs.io/en/latest/index.html</a></p><h3 id="xadmin定制及优化"><a href="#xadmin定制及优化" class="headerlink" title="xadmin定制及优化"></a>xadmin定制及优化</h3><p>第一步：添加adminx.py (注意名称为adminx.py)</p><p>第二步：配置及注册</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xadmin</span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAdmin</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品信息 &quot;&quot;&quot;</span></span><br><span class="line">    list_display = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;types&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,<span class="string">&#x27;img&#x27;</span>,<span class="string">&#x27;is_valid&#x27;</span>,<span class="string">&#x27;reorder&#x27;</span>,<span class="string">&#x27;created_at&#x27;</span>,<span class="string">&#x27;online_time&#x27;</span>,<span class="string">&#x27;offline_time&#x27;</span>]</span><br><span class="line">    list_filter = (<span class="string">&#x27;types&#x27;</span>,<span class="string">&#x27;status&#x27;</span>,)</span><br><span class="line">    search_fields = (<span class="string">&#x27;name&#x27;</span>,)</span><br><span class="line">   </span><br><span class="line">xadmin.site.register(Product, ProductAdmin)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基金定投基础知识</title>
      <link href="/2020/06/26/%E5%9F%BA%E9%87%91/"/>
      <url>/2020/06/26/%E5%9F%BA%E9%87%91/</url>
      
        <content type="html"><![CDATA[<p>本文主要是学习基金知识的笔记</p><p>​        基金主要分为股票型基金、债券型基金、混合型基金，指数基金。从风险来看，混合型&gt;股票型&gt;指数型&gt;债券型。混合型基金就基金经理自己控制股票债券存款的比例，追求高收益，风险最高。<strong>指数基金</strong>是特殊的股票基金，就是持有许多大盘和行业股票追踪大盘和行业的走势，分为宽基指数和行业指数。宽基指数不区分特定行业，比如沪深300指数，追踪沪深两市最大，且流动性强的300家上市公司的股票；中证红利指数，追踪两市股息率（现金分红）最高的100只股票；创业板指数追踪深交所创业板市场的股票。这些宽基指数表现直接影响的基金的表现。行业指数则是追踪特定行业的股票，比如我买的新能源汽车行业指数基金就是追踪的新能源汽车行业相关公司的股票。债券基金就是购买国债、企业债、融债，收取利息，收益稳定，风险较低，市场表现与<strong>十年期国债收益率</strong>成反比，利率上行，债券下跌。</p><p>​        指数基金从交易渠道上可分为场内指数基金和场外指数基金，这个场指的是证券交易所。场外基金交易只能走申购赎回和基金公司交易，场内基金还能在证券交易所交易，也就是卖给其他个人投资者。</p><p>​    宽基指数基金中带<strong>增强</strong>二字，代表基金经理会通过一些其他手段（我不清楚）来获取超额收益，跑赢相关宽基指数。</p><p>​    基金名称后缀A/C，A适合长线投资，短期赎回费用较高，C适合短期投资，长期赎回费用较高。</p><p>​    LOF/FOF，LOF是开放式基金，随时可以申购赎回。FOF是投资基金的基金。</p><p>​    QDII，有资质的国内机构投资者，投资的是境外基金，比如恒生指数基金，纳斯达克100指数基金等。</p><blockquote><p>建仓：先买一点<br>加仓：涨了买一点<br>补仓：跌了买一点<br>减仓：卖一点<br>全仓：手里的钱都买了<br>重仓：买了很多，手里没多少钱了<br>半仓：手里的钱还有一半<br>轻仓：买的时候不是很多，手里还有很多钱<br>爆仓：钱没了<br>止盈：挣了钱卖了<br>止损：亏了钱卖了<br>做多：看好后市贷款买<br>做空：不看好后市，借股票卖出，过一段时间到地位再买入还了股票挣差价（我国没有做空机制）<br>追涨：看基金一直涨就买<br>杀跌：基金跌太多吓得就赶紧卖了<br>踏空：一直涨，然后自己没上车</p><p>​        基金净值就是一个基金值多少钱，累计净值就是成立到现在的价格，支付宝每天晚上8:00之后更新净值，每个交易日9:30到下午3:00来回浮动估值。基金建议操作时间下午2:30~3:00，下午3:00之前买入和卖出，按当天价格计算，下午3:00之后买入和卖出，按明天价格结算。</p><p>​        卖出基金一般两天返回余额宝，QDII基金时间较长，我们可以根据当前估值进行加仓或减仓，但是估值和净值会因基金经理操作形成差异，周日和法定节假日股市不开盘，基金不更新。</p><p>申购费率：<br>       C类基金一般为零，每年收取2%左右的管理费、托管费、销售服务费，7天内卖出手续费1.5%，30天内卖出手续费0.5%，30天以上卖出不收手续费。<br>       A类基金买入手续费为0.12%～1.5%，每年收取共1.5%左右的管理费托管费，7天内卖出手续费1.5%，30天内卖出手续费0.75%，半年内收0.5%，一年内收0.25%，一年以上不收费<br>       基金买入和卖出费率各有不同，具体收费请参考支付宝基金收费规则。</p><p><a href="https://www.bilibili.com/video/BV1P7411E7SG">https://www.bilibili.com/video/BV1P7411E7SG</a></p></blockquote><h2 id="指数基金止盈"><a href="#指数基金止盈" class="headerlink" title="指数基金止盈"></a>指数基金止盈</h2><p>适用于指数基金，基金投资是长期过程，不要太在意短期的涨跌。业绩下降的行业不适用于估值法，比如煤炭行业</p><p>这里我学习的b站up<a href="https://space.bilibili.com/260360/">糖一呀</a>推荐的一种止盈方法——估值止盈法</p><p>​    宽基指数处于<strong>正常估值</strong>，就可以慢慢卖出，每上涨5%卖出10%，这样的话从正常估值涨到50%你才会完全卖出，不担心错过收益。或者没涨5%卖出5%，高估之后每涨5%卖出10%。</p><p>​    行业指数处于<strong>高估区域</strong>，就可以慢慢卖出，每上涨5%卖出15%，这样的话进入高估区上涨了33%，才会完全卖出，大部分收益也能拿到。</p><blockquote><p>什么是指数估值？</p><p>为方便您便捷地寻找指数投资机会，蛋卷整理了常见指数的估值数据，并基于PE绝对值以及PE或PB历史百分位水平进行三色分类显示。<br>如图所示：</p><p><img src="%E5%9F%BA%E9%87%91/image-20200626162717448.png" alt="image-20200626162717448"></p><p>PE高低以十年期国债收益率倒数为判断标准，不足5%按5%算，2019年5月29日十年期国债收益率为3.86%，因此以20（1/5%）为判断标准。<br>PE或PB百分位&lt;30%，且PE绝对值小于20；<br>PE或PB百分位&gt;70%，且PE绝对值大于20；<br>其余情况为估值适中；<br>指数数据时间较短(不满5年)，不参与估值。<br>注：金融、周期、重资产重工业行业使用PB百分位估值，其余使用PE百分位估值<br>常用估值指标说明<br>①PE指市盈率（TTM），PE（TTM）=∑成分股市值/∑成分股净利润（TTM）。数值越低，一般认为估值越低；<br>②PB指市净率（MRQ），数值越低，一般认为估值越低；<br>③PE百分位代表当前PE在选定区间所处的水平，假设PE百分位为10%，表示只有10%的时候比当前市盈率低，百分位基于指数近10年PE数据计算，若不满10年则采用全部历史数据，PB百分位同理；</p><p>*数据主要来源：Wind，其中标普红利及香港中小各项估值数据由蛋卷独立计算；<br>*重要提示：投资有风险，估值数据仅供参考，不构成任何投资建议。</p><p>来源蛋卷基金app</p></blockquote><p>ROE(净资产收益率)：用来衡量行业的增长性，越高估值越偏低。</p><p>其实更具这几个数值的计算方法，如果一个行业增速放缓，其他不变，低估也会慢慢变高估。反之如果一个行业增速越来越快，高估也会变低估。</p><h2 id="债券基金"><a href="#债券基金" class="headerlink" title="债券基金"></a>债券基金</h2><p><strong>短债基金</strong> 基金名称中带有短债、中短债等字样</p><p>波动较小，持有过程中1%-2%波动，适合投资6到12个月，会看到盈利的情况（即度过短债的熊市）</p><p>浮亏超过1%，可以定投补仓</p><p><strong>长债基金</strong> 大部分叫某某纯债、某某信用债的基金</p><p>波动比短债波动大，会有5%左右的波动，持有1-2年开始盈利（即度过长债的熊市），受利率影响较大。</p><p>浮亏超过3%，可以定投补仓</p><p><strong>二级基金</strong> 基金持仓含有百分之几到20%的股票 </p><p>波动5-10%，持有1-2年开始盈利，同时股票市场上涨会带动其上涨</p><h2 id="基金定投的总收益率和年复合收益率"><a href="#基金定投的总收益率和年复合收益率" class="headerlink" title="基金定投的总收益率和年复合收益率"></a>基金定投的总收益率和年复合收益率</h2><p>定投收益率与一次性投入的收益率是不一样的，如果按一次性投入的收益率计算，这个收益率是总收益率：</p><p>（期末总资产-投入总本金）/投入总本金</p><p><strong>年复合收益率</strong>可以通过EXCEL中的IRR公式计算。</p><p>假设我们每个月定投1000，使用IRR(B2:B9)，计算每个月投入和最后收回现金的实际收益率，算出来是定投的月均收益率。然后通过<code>(1+月均收益率)&lt;sup&gt;12&lt;/sup&gt;-1</code>计算得出年复合收益率</p><p><img src="%E5%9F%BA%E9%87%91/image-20200813000901364.png" alt="image-20200813000901364"></p><h2 id="定投之定期不定额"><a href="#定投之定期不定额" class="headerlink" title="定投之定期不定额"></a>定投之定期不定额</h2><p><strong>盈利收益率</strong></p><p>盈利收益率就是市盈率的倒数。盈利收益率高的时候买入，低的时候卖出，长期收益会相当不错。</p><p>可参考格雷厄姆的思想，对于指数基金，盈利收益率大余**10%**，我们就可以开始定投，当盈利收益率低于6.4%时，暂停定投，甚至分批卖出。</p><p><strong>用盈利收益率法进行定投</strong></p><p>用盈利收益率来估值的指数基金，它的收益率越高，投资价值就越高，越值得投资。所以我们可以在盈利收益率高的时候，多投入一些。</p><p>以盈利收益率首次达到10%以上（首次达到低估标准）时的投资金额为基准，之后每个月定投的金额，可以根据下列公式来计算：</p><p>首次低估时的定投金额 × （当月的盈利收益率/首次的盈利收益率）<sup>n</sup></p><p>举个栗子：</p><p>假设我们从盈利收益率达到10%的时候开始定投，初始定投的金额为每月1000元，n为1，这样到了第二个月，我们发现盈利收益达到了12.5%了，指数基金投资价值变高了，我们应该多投入一些资金</p><p>使用定期不定额公式计算，1000×(12.5%/10%)<sup>1</sup>=1250</p><p>也就是说这个月的定投金额为1250元，比初始1000元要高一些。这样就可以做到收益率越高，买入越多了。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基金定投 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django2.2实战积分商城2——表单的使用</title>
      <link href="/2020/06/10/django-mooc-project2/"/>
      <url>/2020/06/10/django-mooc-project2/</url>
      
        <content type="html"><![CDATA[<h2 id="实现验证码"><a href="#实现验证码" class="headerlink" title="实现验证码"></a>实现验证码</h2><h3 id="实现验证码算法"><a href="#实现验证码算法" class="headerlink" title="实现验证码算法"></a>实现验证码算法</h3><p>生成验证码：</p><ol><li><p>准备素材</p><p>字体，文字内容，颜色，干扰线</p></li><li><p>画验证码</p><p>pip install Pillow</p><p>创建图片，并记录文字内容 到session中</p><blockquote><p>Session：在计算机中，尤其是在网络应用中，称为“会话控制”。Session对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的Web页之间跳转时，存储在Session对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web页时，如果该用户还没有会话，则Web服务器将自动创建一个 Session对象。当会话过期或被放弃后，服务器将终止该会话。</p></blockquote><blockquote><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息</p></blockquote><ul><li><p>第一次请求，cookie + session 对应关系生成</p></li><li><p>第二次请求，携带了cookie，找到对应的session[提交表单]</p><p>请求带上验证码参数，与session中的验证码进行比较</p></li></ul></li><li><p>io文件流</p><p>BytesIO，BytesIO实现了在内存中读写bytes。用于写入/读取验证码图片文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">f = BytesIO()</span><br><span class="line">f.write(<span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(f.getvalue())</span><br><span class="line"><span class="string">b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw, Image, ImageFont</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifyCode</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 实现随机验证码 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dj_request</span>):</span></span><br><span class="line">        self.dj_request = dj_request</span><br><span class="line">        <span class="comment"># 验证码长度</span></span><br><span class="line">        self.code_len = <span class="number">4</span></span><br><span class="line">        <span class="comment"># 图片的尺寸</span></span><br><span class="line">        self.width = <span class="number">100</span></span><br><span class="line">        self.height = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 指定django中session的名称</span></span><br><span class="line">        self.session_key = <span class="string">&#x27;verify_code&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_veify_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 使用随机数生成验证码 &quot;&quot;&quot;</span></span><br><span class="line">        random_str = <span class="string">&#x27;QWERTYUPASDFGHJKLZXCVBNMqwertyupasdfghjkzxcvbnm234567890&#x27;</span></span><br><span class="line">        <span class="comment"># 生成单个字符列表</span></span><br><span class="line">        code_list = random.sample(<span class="built_in">list</span>(random_str), self.code_len)</span><br><span class="line">        code = <span class="string">&#x27;&#x27;</span>.join(code_list)</span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 生成验证码图片 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 生成验证码随机数</span></span><br><span class="line">        code = self._get_veify_code()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_code</span>(<span class="params">self, input_code</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证验证码 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="实现随机线条和验证码"><a href="#实现随机线条和验证码" class="headerlink" title="实现随机线条和验证码"></a>实现随机线条和验证码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifyCode</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 实现随机验证码 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    略</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 生成验证码图片 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 生成验证码随机数</span></span><br><span class="line">        code = self._get_veify_code()</span><br><span class="line">        <span class="comment"># 把验证码存入session中</span></span><br><span class="line">        self.dj_request.session[self.session_key] = code</span><br><span class="line">        <span class="comment"># 准备随机元素（背景颜色、干扰线、文字颜色）</span></span><br><span class="line">        font_color = [<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;brown&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;darkblue&#x27;</span>, <span class="string">&#x27;darkred&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">        <span class="comment"># RGB随机背景色</span></span><br><span class="line">        bg_color = (random.randrange(<span class="number">230</span>, <span class="number">255</span>), random.randrange(<span class="number">230</span>, <span class="number">255</span>), random.randrange(<span class="number">230</span>, <span class="number">255</span>))</span><br><span class="line">        <span class="comment"># 字体路径</span></span><br><span class="line">        font_path = os.path.join(settings.BASE_DIR, <span class="string">&#x27;static&#x27;</span>, <span class="string">&#x27;fonts&#x27;</span>, <span class="string">&#x27;times.ttf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建图片</span></span><br><span class="line">        im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (self.width, self.height), bg_color)</span><br><span class="line">        draw = ImageDraw.Draw(im)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画干扰线</span></span><br><span class="line">        line_color = random.choice(font_color)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(random.randrange(<span class="number">1</span>, <span class="built_in">int</span>(self.code_len / <span class="number">2</span>) + <span class="number">1</span>)):</span><br><span class="line">            draw.line((random.randrange(<span class="number">0</span>, <span class="built_in">int</span>(self.width / <span class="number">4</span>)), random.randrange(<span class="number">0</span>, self.height),</span><br><span class="line">                       random.randrange(<span class="built_in">int</span>(<span class="number">3</span> * self.width / <span class="number">4</span>), <span class="built_in">int</span>(self.width)),</span><br><span class="line">                       random.randrange(<span class="number">0</span>, self.height)),</span><br><span class="line">                      fill=line_color, width=random.randrange(<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画验证码</span></span><br><span class="line">        <span class="keyword">for</span> index, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(code):</span><br><span class="line">            code_color = random.choice(font_color)</span><br><span class="line">            font_size = random.randrange(<span class="number">15</span>,<span class="number">25</span>)</span><br><span class="line">            font = ImageFont.truetype(font_path, font_size)</span><br><span class="line">            position = (index * (self.width / self.code_len), random.randrange(<span class="number">0</span>, <span class="built_in">int</span>(self.height / <span class="number">4</span>)))</span><br><span class="line">            draw.text(position, char, fill=code_color, font=font)</span><br><span class="line"></span><br><span class="line">        buff = BytesIO()</span><br><span class="line">        im.save(buff, <span class="string">&#x27;gif&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(buff.getvalue(), <span class="string">&#x27;image/gif&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_code</span>(<span class="params">self, input_code</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证验证码 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="实现验证码验证"><a href="#实现验证码验证" class="headerlink" title="实现验证码验证"></a>实现验证码验证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifyCode</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 实现随机验证码 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    略</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_code</span>(<span class="params">self, input_code</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证验证码 &quot;&quot;&quot;</span></span><br><span class="line">        input_code = <span class="built_in">str</span>(input_code).lower()</span><br><span class="line">        vcode = self.dj_request.session.get(self.session_key, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> vcode.lower() == input_code</span><br></pre></td></tr></table></figure><p>添加验证码url，实现url访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify_code</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 验证码的显示 &quot;&quot;&quot;</span></span><br><span class="line">    client = VerifyCode(request)</span><br><span class="line">    <span class="keyword">return</span> client.gen_code()</span><br></pre></td></tr></table></figure><p>给积分商城的登录页面添加验证码：</p><p><img src="django-mooc-project2/image-20200618111314289.png"></p><p>添加该页面url、视图，并添加模板继承。添加验证码html代码，修改css样式。</p><p><img src="django-mooc-project2/image-20200618111942108.png"></p><p><font color='red'>点击刷新验证码</font></p><p>通过jQuery给验证码图片添加点击事件，给url尾部添加随机数，实现点击刷新功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.login-vcode img&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>)[<span class="number">0</span>].src = <span class="string">&quot;&#123;% url &#x27;system:verify_code&#x27; %&#125;&quot;</span>+<span class="string">&#x27;?&#x27;</span>+<span class="built_in">Math</span>.random();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更改该页面的表单提交方法为post，同时添加submit按钮</p><p>在对应视图中获取post中用户输入的验证码，调用验证码函数与真实验证进行比对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = Login(request.POST)</span><br><span class="line">        <span class="comment"># 调用验证码的验证</span></span><br><span class="line">        client = VerifyCode(request)</span><br><span class="line">        code = request.POST.get(<span class="string">&#x27;vcode&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        rest = client.validate_code(code)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;验证结果&#x27;</span>,rest)</span><br><span class="line">        <span class="comment"># 验证表单的合法性且获取数据</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            data = form.cleaned_data</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;data:&#x27;</span>, data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># get请求则直接显示该页面</span></span><br><span class="line">        form = Login()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="实现用户表单登录"><a href="#实现用户表单登录" class="headerlink" title="实现用户表单登录"></a>实现用户表单登录</h2><p><strong>实现手机号，密码的输入验证，同时即便提交后报错，表单的value值不能消失。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">     <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">value</span>=<span class="string">&quot;&#123;&#123; form.username.value|default_if_none:&#x27;&#x27; &#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">placeholder</span>=<span class="string">&quot;请输入您的手机号&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>实现form中验证码的检测</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_verify_code</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 验证用户输入的验证码 &quot;&quot;&quot;</span></span><br><span class="line">    verify_code = self.cleaned_data[<span class="string">&#x27;verify_code&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> verify_code:</span><br><span class="line">        <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;请输入验证码&#x27;</span>)</span><br><span class="line">    client = VerifyCode(self.request)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> client.validate_code(verify_code):</span><br><span class="line">        <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;验证码输入错误&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>html添加异常显示</strong></p><p>如单字段异常<code>&#123;&#123; form.username.errors &#125;&#125;</code>，多字段异常<code>&#123;&#123; form.non_field_errors &#125;&#125;</code>等</p><p><strong>给表单中指定error_message，修改错误提示</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">                           widget=forms.PasswordInput, max_length=<span class="number">64</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请输入密码&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">verify_code = forms.CharField(label=<span class="string">&#x27;验证码&#x27;</span>, max_length=<span class="number">4</span>, error_messages=&#123;</span><br><span class="line">    <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请输入验证码&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><font color='red'>HTML页面input中可以通过maxlength限制输入长度</font></p><p><img src="django-mooc-project2/image-20200618203329406.png" alt="image-20200618203329406"></p><p><strong>执行登录，将用户id写入session，并跳转</strong>，暂不进行用户名密码验证，看下一节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = Login(request=request, data=request.POST)</span><br><span class="line">        <span class="comment"># 验证表单的合法性且获取数据</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 执行登录</span></span><br><span class="line">            data = form.cleaned_data</span><br><span class="line">            user = User.objects.get(username=data[<span class="string">&#x27;username&#x27;</span>], password=data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">            request.session[<span class="string">&#x27;user_id&#x27;</span>] = user.<span class="built_in">id</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># get请求则直接显示该页面</span></span><br><span class="line">        form = Login(request)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="结合session实现登录"><a href="#结合session实现登录" class="headerlink" title="结合session实现登录"></a>结合session实现登录</h2><p>添加登录的用户名、密码验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">32</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请输入用户名&#x27;</span>&#125;)</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">                               widget=forms.PasswordInput, max_length=<span class="number">64</span>, error_messages=&#123;</span><br><span class="line">            <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请输入密码&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    verify_code = forms.CharField(label=<span class="string">&#x27;验证码&#x27;</span>, max_length=<span class="number">4</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请输入验证码&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_username</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户名 属于django的一个钩子函数&quot;&quot;&quot;</span></span><br><span class="line">        username = self.cleaned_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="comment"># 用正则匹配验证用户名输入的是否为手机号</span></span><br><span class="line">        pattern = <span class="string">r&#x27;^0&#123;0,1&#125;1[0-9]&#123;10&#125;$&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(pattern, username):</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;请输入做正确的手机号码&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_verify_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户输入的验证码 &quot;&quot;&quot;</span></span><br><span class="line">        verify_code = self.cleaned_data[<span class="string">&#x27;verify_code&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> verify_code:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;请输入验证码&#x27;</span>)</span><br><span class="line">        client = VerifyCode(self.request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> client.validate_code(verify_code):</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;验证码输入错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户名及密码 &quot;&quot;&quot;</span></span><br><span class="line">        cleaned_data = <span class="built_in">super</span>().clean()</span><br><span class="line">        username = cleaned_data.get(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        password = cleaned_data.get(<span class="string">&#x27;password&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">and</span> password:</span><br><span class="line">            <span class="comment"># 查看用户名或密码是否匹配，不匹配是空列表，count为0</span></span><br><span class="line">            count = User.objects.<span class="built_in">filter</span>(username=username, password=password).count()</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> cleaned_data</span><br></pre></td></tr></table></figure><p>在首页的视图中从session取出user_id，并载入到首页html中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 首页 &quot;&quot;&quot;</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    <span class="comment"># 查询首页轮播图</span></span><br><span class="line">    slider_list = Slider.objects.<span class="built_in">filter</span>(types=constants.SLIDER_TYPE_INDEX)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询首页通知通知 顶置 有效 在生效时间内</span></span><br><span class="line">    notice_list = News.objects.<span class="built_in">filter</span>(types=constants.NEWS_TYPE_NOTICES, is_top=<span class="literal">True</span>,</span><br><span class="line">                                      is_valid=<span class="literal">True</span>, start_time__lte=now_time,</span><br><span class="line">                                      end_time__gte=now_time)</span><br><span class="line">    <span class="comment"># 取出用户id</span></span><br><span class="line">    user_id = request.session[constants.LOGIN_SESSION_ID]</span><br><span class="line">    <span class="comment"># 找出用户信息</span></span><br><span class="line">    user = User.objects.<span class="built_in">filter</span>(pk=user_id)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;index.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;slider_list&#x27;</span>: slider_list,</span><br><span class="line">        <span class="string">&#x27;notice_list&#x27;</span>: notice_list,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: user</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>不足之处：1. 每个页面都要进行sql查询，效率低 2. 密码未加密</p><h2 id="django-auth模块-重点"><a href="#django-auth模块-重点" class="headerlink" title="django-auth模块(重点)"></a>django-auth模块(重点)</h2><p>实现用户、登录及权限验证</p><p>功能主要有：</p><ul><li><p>自带用户认证授权系统</p><p>用户：记录用户的登录账号密码等信息，对应ORM的模型或数据库中的一条记录</p><p>权限：用户是否有权限访问某一资源（执行操作）</p><p>组：对多个用户进行权限管理</p><p>登录密码：加密后的密码存储</p><p>自带后台管理</p></li><li><p>安装及配置</p><p>第一步：INSTALL_APPS安装应用<code>django.contrib.auth</code>、<code>django.contrib.contenttypes</code></p><p>第二步：MIDDLEWARE中间配置<code>SessionMiddleware</code>、<code>AuthenticationMiddleware</code></p><p>第三步：migrate同步模型到数据库</p><p>默认django2.2是自带这些配置的</p></li><li><p>用户模型</p><p>分为两种用户User/AnonymousUser</p><p>User常用属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>用户名</td></tr><tr><td>password</td><td>登录密码</td></tr><tr><td>email</td><td>电子邮箱</td></tr><tr><td>is_staff</td><td>是否为内部员工</td></tr><tr><td>is_active</td><td>是否为激活用户</td></tr><tr><td>is_superuser</td><td>是否为超级管理员</td></tr><tr><td>is_authenticated</td><td>用户是否已登录的只读属性</td></tr><tr><td>is_anonymous</td><td>用户登录是否已失效的只读属性</td></tr><tr><td>last_login</td><td>最后登录时间</td></tr><tr><td>date_joined</td><td>注册时间</td></tr><tr><td>groups</td><td>用户组多对多关系</td></tr><tr><td>user_permissions</td><td>用户权限多对多关系</td></tr></tbody></table></li><li><p>登录及退出</p><p>步骤一：认证用户</p><p><code>user = authenticate(username=&#39;john&#39;,password=&#39;secret&#39;)</code></p><p>步骤二：判断认证后的用户是否为None，不为None则表示用户认证通过</p><p>步骤三：调用login函数登录用户</p><p><code>login(request,user,backend=None)</code></p><ul><li><p>在视图中获取当前用户<code>request.user</code>    不必再次调用sql</p></li><li><p>需要登录才可以访问的视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br></pre></td></tr></table></figure></li><li><p>创建普通用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.create_user(<span class="string">&#x27;john&#x27;</span>,<span class="string">&#x27;test@example.com&#x27;</span>,<span class="string">&#x27;johnpassword&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用命令行创建超级管理员</p><p><code>&gt;&gt;&gt;python manage.py createsuperuser</code></p></li></ul><p>用户退出：</p><p>使用logout函数退出当前登录用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> logout</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    logout(request)</span><br><span class="line">    <span class="comment"># 执行后面的操作</span></span><br></pre></td></tr></table></figure></li><li><p>权限验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate</span><br><span class="line">user = authenticate(username=<span class="string">&#x27;john&#x27;</span>, password=<span class="string">&#x27;secret&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"><span class="comment"># A backend authenticated the credentials</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># No backend authenticated the credentials</span></span><br></pre></td></tr></table></figure></li><li><p>对用户进行扩展</p></li></ul><p>pass</p><h3 id="修改积分商城的登录与验证"><a href="#修改积分商城的登录与验证" class="headerlink" title="修改积分商城的登录与验证"></a>修改积分商城的登录与验证</h3><p>先创建了两个用户，一个是普通用户，一个是超级用户</p><p><img src="django-mooc-project2/image-20200619182204474.png" alt="image-20200619182204474"></p><p>修改登录视图，改为auth模块进行登录验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> accounts.forms <span class="keyword">import</span> Login</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = Login(request=request, data=request.POST)</span><br><span class="line">        <span class="comment"># 验证表单的合法性且获取数据</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 执行登录</span></span><br><span class="line">            data = form.cleaned_data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># ## 使用自定义方法查询/验证用户</span></span><br><span class="line">            <span class="comment"># # 查询用户信息</span></span><br><span class="line">            <span class="comment"># user = User.objects.get(username=data[&#x27;username&#x27;], password=data[&#x27;password&#x27;])</span></span><br><span class="line">            <span class="comment"># # 设置用户ID到session</span></span><br><span class="line">            <span class="comment"># request.session[constants.LOGIN_SESSION_ID] = user.id</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># ## 使用auth模块登录</span></span><br><span class="line">            user = authenticate(request, username=data[<span class="string">&#x27;username&#x27;</span>], password=data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">            <span class="comment"># 登录并跳转</span></span><br><span class="line">            <span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                login(request, user)</span><br><span class="line">                <span class="keyword">return</span> redirect(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># get请求则直接显示该页面</span></span><br><span class="line">            <span class="built_in">print</span>(form.errors)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = Login(request)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>在表单forms.py中修改验证方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> authenticate, login</span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    略</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户名及密码 &quot;&quot;&quot;</span></span><br><span class="line">        cleaned_data = <span class="built_in">super</span>().clean()</span><br><span class="line">        username = cleaned_data.get(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        password = cleaned_data.get(<span class="string">&#x27;password&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">and</span> password:</span><br><span class="line">            user = authenticate(username=username, password=password)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> user:</span><br><span class="line">                <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> cleaned_data</span><br></pre></td></tr></table></figure><p>登录后会自动跳转到首页，且首页需要显示用户信息，因为此时request中自带了登录用户的信息，可以不用在首页视图中调用用户信息了。</p><p><img src="django-mooc-project2/image-20200619210841582.png" alt="image-20200619210841582"></p><p>直接在模板中引用user即可。需要注意的是，因为用户信息包含在request中，则不能使用render_to_response方法，而需要使用render方法。</p><p><font color='red'>在render() 和 render_to_response() 区别</font></p><blockquote><p>区别就是render函数的第一个参数是request（请求）。render_to_response（）则不需要。</p><p>实现的功能是相同的。但是由于传入参数的不同，造成了一个最直接的问题：<br>能否在模板中使用request的属性，例如session等。因此，如果同学要在模板中使用request的属性，请使用render。否则模板渲染时是得不到相应的request变量值。</p><p>在django1.3后，推荐直接使用render()，如果使用render_to_response()，需要配置render_to_response(‘’,{},context_instance = RequestContext(request))</p></blockquote><h3 id="实现注册登录功能"><a href="#实现注册登录功能" class="headerlink" title="实现注册登录功能"></a>实现注册登录功能</h3><p>给登录页面的’免费注册’添加url跳转，跳转到注册页面。</p><p>修改注册页面的html代码：添加form表单和提交按钮，添加验证码url，添加继承，添加input标签name属性，与forms表单字段一一对应。</p><p>添加forms.py注册表单的clean_xx验证方法，同时添加注册并登陆方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot; 用户注册表单 &quot;&quot;&quot;</span></span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>, widget=forms.PasswordInput, max_length=<span class="number">64</span>)</span><br><span class="line">    password_verify = forms.CharField(label=<span class="string">&#x27;密码验证&#x27;</span>, widget=forms.PasswordInput, max_length=<span class="number">64</span>)</span><br><span class="line">    verify_code = forms.CharField(label=<span class="string">&#x27;验证码&#x27;</span>, max_length=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_username</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户名是否已存在 &quot;&quot;&quot;</span></span><br><span class="line">        username = self.cleaned_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> User.objects.<span class="built_in">filter</span>(username=username).exists():</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;用户名已存在&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_verify_code</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户输入的验证码 &quot;&quot;&quot;</span></span><br><span class="line">        verify_code = self.cleaned_data[<span class="string">&#x27;verify_code&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> verify_code:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;请输入验证码&#x27;</span>)</span><br><span class="line">        client = VerifyCode(self.request)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> client.validate_code(verify_code):</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;验证码输入错误&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot; 密码重复验证 &quot;&quot;&quot;</span></span><br><span class="line">        cleaned_data = <span class="built_in">super</span>().clean()</span><br><span class="line">        password = cleaned_data.get(<span class="string">&#x27;password&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        password_verify = cleaned_data.get(<span class="string">&#x27;password_verify&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> password_verify <span class="keyword">and</span> password:</span><br><span class="line">            <span class="keyword">if</span> password != password_verify:</span><br><span class="line">                <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;密码输入不一致&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> cleaned_data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 注册并登陆方法 &quot;&quot;&quot;</span></span><br><span class="line">        data = self.cleaned_data</span><br><span class="line">        <span class="comment"># 创建用户</span></span><br><span class="line">        User.objects.create_user(username=data[<span class="string">&#x27;username&#x27;</span>],password=data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        <span class="comment"># 自动登录</span></span><br><span class="line">        user = authenticate(username=data[<span class="string">&#x27;username&#x27;</span>],password=data[<span class="string">&#x27;password&#x27;</span>])</span><br><span class="line">        login(self.request, user)</span><br><span class="line">        <span class="keyword">return</span> user</span><br></pre></td></tr></table></figure><p>添加用户登录视图views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_register</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户注册 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = Register(request=request, data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 调用注册登录方法</span></span><br><span class="line">            form.register()</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = Register(request.POST)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="用户退出登录"><a href="#用户退出登录" class="headerlink" title="用户退出登录"></a>用户退出登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_logout</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户退出登录 &quot;&quot;&quot;</span></span><br><span class="line">    logout(request)</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure><p>给首页添加判断用户登录方法，显示不通提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if user.is_authenticated %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎你，&#123;&#123; user.username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>欢迎你，<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;accounts:login&#x27; %&#125;&quot;</span>&gt;</span>请登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展django用户模型"><a href="#扩展django用户模型" class="headerlink" title="扩展django用户模型"></a>扩展django用户模型</h3><p><strong>权限管理</strong>：</p><ul><li><p>判断用户是否具有某项权限：</p><p><code>request.user.has_perm(&#39;foo.add_bar&#39;)</code></p></li><li><p>强制权限认证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@permission_required(<span class="params"><span class="string">&#x27;polls.can_vote&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_view</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>密码管理</strong>：</p><ul><li><p>设置、修改用户的密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">u = User.objects.get(username=<span class="string">&#x27;john&#x27;</span>)</span><br><span class="line">u.set_password(<span class="string">&#x27;new password&#x27;</span>)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure></li><li><p>检查用户的密码是否正确</p><p>使用场景：修改密码时先验证原密码是否正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u = User.objects.get(username=<span class="string">&#x27;john&#x27;</span>)</span><br><span class="line">u.check_password(<span class="string">&#x27;my password&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>多种加密方式可选择</p><p>详见django文档</p></li></ul><p><strong>当Django内置的用户模型满足不了需求，要用户模型添加积分账户怎么办？</strong></p><p>两种方法解决用户问题：</p><p>方法一：使用OneToOneField对用户进行扩展。</p><p><font color='red'>方法二：替换现有用户模型</font></p><p>方法一在ORM模型文章中有讲解，不再赘述，重点讲解方法二</p><p>步骤一：settings配置用户模型，告诉django框架</p><p>​    <code>AUTH_USER_MODEL = &#39;oauth.User&#39;</code>oauth对应模块名称</p><p>步骤二：继承自AbstractUser抽象模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib,auth.models <span class="keyword">import</span> AbstractUser</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">AbstractUser</span>):</span></span><br></pre></td></tr></table></figure><p>步骤三： 添加字段，并同步到数据库</p><p>原本在auth_user中存在的字段，不需要在模型中添加</p><p><code>&gt;&gt;&gt;python mange.py check</code></p><p><code>&gt;&gt;&gt;python mange.py makemigration</code></p><p><code>&gt;&gt;&gt;python mange.py migrate</code></p><p>步骤四：配置admin.py (关于后台管理的配置，后期文章会详细讲解django后台)</p><p>在oauth模块中配置。User模型在哪个模块就在哪个模块的admin.py中配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.admin <span class="keyword">import</span> UserAdmin</span><br><span class="line"><span class="keyword">from</span> oauth.models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line">admin.site.register(User,UserAdmin)</span><br></pre></td></tr></table></figure><p><font color = 'red'>在扩展完用户模型之后，对于已经引用django.contrib.auth.models.User的，要将引用改为所在模块的User</font></p><h2 id="地址编辑"><a href="#地址编辑" class="headerlink" title="地址编辑"></a>地址编辑</h2><h3 id="地址列表的显示"><a href="#地址列表的显示" class="headerlink" title="地址列表的显示"></a>地址列表的显示</h3><p>完善地址数据库模型，从地址数据库中调取地址信息，展示在列表中。</p><p>同时给模型中定义手机号码和省市区显示的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span>(<span class="params">CommonUtils</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户收货地址表 &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE)</span><br><span class="line">    province = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    area = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;详细地址&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    receiver = models.CharField(<span class="string">&#x27;收件人&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    phone = models.CharField(<span class="string">&#x27;收件电话&#x27;</span>, max_length=<span class="number">13</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">&#x27;地址是否有效&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line">    is_default = models.BooleanField(<span class="string">&#x27;是否默认地址&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;accounts_user_address&#x27;</span></span><br><span class="line">        ordering = [<span class="string">&#x27;is_default&#x27;</span>, <span class="string">&#x27;-updated_at&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_phone_format</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 格式化手机号码显示 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.phone[<span class="number">0</span>:<span class="number">2</span>] + <span class="string">&#x27;****&#x27;</span> + self.phone[<span class="number">7</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_address_format</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 将地址省市区拼接 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#123;&#125; &#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.province, self.city, self.area)</span><br></pre></td></tr></table></figure><p>添加显示地址列表的url，同时绑定视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">address_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 地址列表 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    user_address_list = UserAddress.objects.<span class="built_in">filter</span>(is_valid=<span class="literal">True</span>,user=request.user)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;address_list.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;user_addr_list&#x27;</span>: user_address_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>修改address_list.html模板，添加继承，导入地址信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in user_addr_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-panel__bd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box weui-media-box_text address-list-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;accounts:address_edit&#x27; item.id %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;address-edit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.receiver &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.get_phone_format &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;weui-media-box__desc address-txt&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.get_address_format &#125;&#125;</span><br><span class="line">        &#123;&#123; item.address &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;% if item.is_default %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;default-add&quot;</span>&gt;</span>默认地址<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><img src="django-mooc-project2/image-20200622122422052.png" alt="image-20200622122422052"></p><h3 id="地址的修改与添加"><a href="#地址的修改与添加" class="headerlink" title="地址的修改与添加"></a>地址的修改与添加</h3><p><img src="django-mooc-project2/image-20200622154956035.png" alt="image-20200622154956035"></p><p>使用模型表单建立地址新增/修改的表单</p><p>改写clean方法，验证手机号，验证地址数量；改写save方法，将所在地区的输入内容拆分保存，同时使得一个用户的默认地址只能有一个。</p><p>使用模型表单中的widgets给is_default字段添加类名和input类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddressForm</span>(<span class="params">forms.ModelForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 添加/编辑地址的表单 &quot;&quot;&quot;</span></span><br><span class="line">    region = forms.CharField(label=<span class="string">&#x27;大区域&#x27;</span>, max_length=<span class="number">64</span>, required=<span class="literal">True</span>, error_messages=&#123;</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请选择地址&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = UserAddress</span><br><span class="line">        fields = [<span class="string">&#x27;address&#x27;</span>, <span class="string">&#x27;receiver&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;is_default&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        error_messages = &#123;</span><br><span class="line">            <span class="string">&#x27;receiver&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请输入收件人&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;address&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请输入详细地址&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># 添加默认选项的Input类型、类名</span></span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">&#x27;is_default&#x27;</span>: forms.CheckboxInput(attrs=&#123;</span><br><span class="line">                <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;weui-switch&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_phone</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 手机号码验证 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.cleaned_data[<span class="string">&#x27;phone&#x27;</span>]:</span><br><span class="line">            phone = self.cleaned_data[<span class="string">&#x27;phone&#x27;</span>]</span><br><span class="line">            pattern = <span class="string">r&#x27;^0&#123;0,1&#125;1[0-9]&#123;10&#125;$&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> re.search(pattern, phone):</span><br><span class="line">                <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;请输入正确的手机号码&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> phone</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;请输入手机号&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证地址是否已经超出10个限制 &quot;&quot;&quot;</span></span><br><span class="line">        cleaned_data = <span class="built_in">super</span>().clean()</span><br><span class="line">        user_address_list = UserAddress.objects.<span class="built_in">filter</span>(is_valid=<span class="literal">True</span>, user=self.request.user)</span><br><span class="line">        <span class="keyword">if</span> user_address_list.count() &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;地址超出限制，最多10个&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> cleaned_data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self, commit=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 重写保存地址的方法 &quot;&quot;&quot;</span></span><br><span class="line">        obj = <span class="built_in">super</span>().save(commit=<span class="literal">False</span>)</span><br><span class="line">        region = self.cleaned_data[<span class="string">&#x27;region&#x27;</span>]</span><br><span class="line">        (province, city, area) = region.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        obj.province = province</span><br><span class="line">        obj.city = city</span><br><span class="line">        obj.area = area</span><br><span class="line">        <span class="comment"># 关联用户</span></span><br><span class="line">        obj.user = self.request.user</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 修改地址时候，点选了默认地址，需要把其他的地址改为非默认</span></span><br><span class="line">        <span class="keyword">if</span> self.cleaned_data[<span class="string">&#x27;is_default&#x27;</span>]:</span><br><span class="line">            UserAddress.objects.<span class="built_in">filter</span>(is_valid=<span class="literal">True</span>, user=self.request.user,</span><br><span class="line">                                       is_default=<span class="literal">True</span>).update(is_default=<span class="literal">False</span>)</span><br><span class="line">        obj.save()</span><br></pre></td></tr></table></figure><p>添加和修改的url，通过get请求的参数区分修改还是添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户地址修改和添加</span></span><br><span class="line"><span class="comment"># address/edit/add/ address/edit/1/</span></span><br><span class="line">re_path(<span class="string">r&#x27;^address/edit/(?P&lt;pk&gt;\S+)/$&#x27;</span>, views.address_edit, name=<span class="string">&#x27;address_edit&#x27;</span>),</span><br></pre></td></tr></table></figure><p>绑定视图</p><p>先判断get请求的参数是修改还是新增，如果是修改，则需要通过表单的instance和initial属性绑定初始数据。instance是给表单绑定数据。</p><p>initial用来初始化指定字段的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">address_edit</span>(<span class="params">request, pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 地址新增或编辑 &quot;&quot;&quot;</span></span><br><span class="line">    user = request.user</span><br><span class="line">    address = <span class="literal">None</span></span><br><span class="line">    initial = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> pk.isdigit():</span><br><span class="line">        <span class="comment"># 查询相关地址信息</span></span><br><span class="line">        address = get_object_or_404(UserAddress, pk=pk, user=user, is_valid=<span class="literal">True</span>)</span><br><span class="line">        initial[<span class="string">&#x27;region&#x27;</span>] = address.get_address_format()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = AddressForm(request=request, data=request.POST, instance=address, initial=initial)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># modelform的保存到数据库的方法</span></span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;accounts:address_list&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = AddressForm(request=request, instance=address, initial=initial)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;address_edit.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>对于html模板需要添加input的value值，显示原始数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value=&quot;&#123;&#123; form.receiver.value|default_if_none:&#x27;&#x27; &#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="删除地址"><a href="#删除地址" class="headerlink" title="删除地址"></a>删除地址</h3><p>先添加删除的url和视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">address_del</span>(<span class="params">request, pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 删除地址 &quot;&quot;&quot;</span></span><br><span class="line">    UserAddress.objects.<span class="built_in">filter</span>(pk=pk,is_valid=<span class="literal">True</span>,user=request.user).update(is_valid=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在地址编辑中添加跳转删除url的JavaScript方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#id_delete_addr&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     &#123;#弹框确认 #&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">&#x27;确认删除该地址吗&#x27;</span>))&#123;</span><br><span class="line">         &#123;#jquery ajax #&#125;</span><br><span class="line">        $.post(<span class="string">&quot;&#123;% url &#x27;accounts:address_del&#x27; form.instance.id %&#125;&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">rest</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(rest === <span class="string">&#x27;ok&#x27;</span>) &#123;</span><br><span class="line">              <span class="built_in">window</span>.location.href = <span class="string">&quot;&#123;% url &#x27;accounts:address_list&#x27; %&#125;&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实现登录跳转"><a href="#实现登录跳转" class="headerlink" title="实现登录跳转"></a>实现登录跳转</h2><p>给地址编辑等视图添加<code>@login_required</code>装饰器，加上该装饰器后，访问视图必须要先登录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.decorators <span class="keyword">import</span> login_required</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span></span></span><br></pre></td></tr></table></figure><p>在项目settings中添加未登录跳转</p><p><code>LOGIN_URL = &#39;/accounts/user/login/&#39;</code></p><p>如果登录是在其他页面跳转过来的，会携带next参数，登录后需要跳转回去。这时需要修改登录页面的视图</p><p><img src="django-mooc-project2/image-20200622165710244.png" alt="image-20200622165710244"></p><p>同时模板中form表单添加属性，将登录数据提交到需要登录的url</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=&#x27;.?next=&#123;&#123; next_url &#125;&#125;&#x27;</span><br></pre></td></tr></table></figure><h2 id="实现商品搜索"><a href="#实现商品搜索" class="headerlink" title="实现商品搜索"></a>实现商品搜索</h2><p>先给数据库中添加商品</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSERT INTO `mall_product` (`id`, `uid`, `name`, `desc`, `content`, `types`, `price`, `origin_price`, `img`, `buy_link`, `is_valid`, `reorder`, `status`, `sku_count`, `remain_count`, `view_count`, `score`, `created_at`, `updated_at`) VALUES(1,&#x27;b0cc53e48a2d473eb1efd43e4ebfbf03&#x27;,&#x27;AKG/爱科技 K3003I入耳式三分频男女通用HIFI经典热销耳机&#x27;,&#x27;AKG参考级殿堂音质 圈铁混合三频&#x27;,&#x27;&lt;p&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/b11.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/b12.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/b13.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/b14.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/b15.jpg&quot; /&gt;&lt;/p&gt;&#x27;,12,4999,4999.0,&#x27;201902/product/main.jpg&#x27;,NULL,1,0,11,100,95,0,10.0,&#x27;2019-02-27 06:21:19.794736&#x27;,&#x27;2019-02-28 05:00:50.628252&#x27;);</span><br><span class="line">INSERT INTO `mall_product` (`id`, `uid`, `name`, `desc`, `content`, `types`, `price`, `origin_price`, `img`, `buy_link`, `is_valid`, `reorder`, `status`, `sku_count`, `remain_count`, `view_count`, `score`, `created_at`, `updated_at`) VALUES(2,&#x27;c3f9b45fa953493b95ef7f1d9502d396&#x27;,&#x27;宁美国度i5 8500/GTX1050Ti台式吃鸡电脑主机全套DIY游戏组装整机&#x27;,&#x27;热销64万台 行业爆款 旗舰机&#x27;,&#x27;&lt;p&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/c11.jpg&quot;&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/c12.jpg&quot;&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/c13.jpg&quot;&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/c14.jpg&quot;&gt;&lt;/p&gt;&#x27;,12,3999,3999.0,&#x27;201902/product/c0.jpg&#x27;,NULL,1,0,11,100,100,0,10.0,&#x27;2019-02-27 06:41:49.274680&#x27;,&#x27;2019-02-27 06:41:49.274680&#x27;);</span><br><span class="line">INSERT INTO `mall_product` (`id`, `uid`, `name`, `desc`, `content`, `types`, `price`, `origin_price`, `img`, `buy_link`, `is_valid`, `reorder`, `status`, `sku_count`, `remain_count`, `view_count`, `score`, `created_at`, `updated_at`) VALUES(3,&#x27;278f5849259b463d960b7ea38a17861c&#x27;,&#x27;【直营】法国Lafite拉菲进口传奇波尔多干红葡萄酒2016珍藏佳酿酒&#x27;,&#x27;法国品牌 菜鸟宁波保税7号仓发货&#x27;,&#x27;&lt;p&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/d11.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/d12.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/d13.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/d14.jpg&quot; /&gt;&lt;/p&gt;&#x27;,12,89,89.0,&#x27;201902/product/d0.jpg&#x27;,NULL,1,0,11,1000,1000,0,10.0,&#x27;2019-02-27 06:50:24.504798&#x27;,&#x27;2019-02-27 07:37:04.593903&#x27;);</span><br><span class="line">INSERT INTO `mall_product` (`id`, `uid`, `name`, `desc`, `content`, `types`, `price`, `origin_price`, `img`, `buy_link`, `is_valid`, `reorder`, `status`, `sku_count`, `remain_count`, `view_count`, `score`, `created_at`, `updated_at`) VALUES(4,&#x27;01b1473e3e98474ca96fe631bcb1ce19&#x27;,&#x27;俞兆林卫衣 男2017春新款运动休闲印花大码潮人卫衣卫裤加厚外套套装男&#x27;,&#x27;【2019春季全场2件8】春款薄绒休闲套头纯色印花连帽大码卫衣套装新款上新！！&#x27;,&#x27;&lt;p&gt;&lt;img src=&quot;/medias/201902/product/xq1.jpg&quot; /&gt;&lt;img src=&quot;/medias/201902/product/xq2.jpg&quot; /&gt;&lt;img src=&quot;/medias/201902/product/xq3.jpg&quot; /&gt;&lt;img src=&quot;/medias/201902/product/xq4.jpg&quot; /&gt;&lt;img src=&quot;/medias/201902/product/xq5.jpg&quot; /&gt;&lt;img src=&quot;/medias/201902/product/xq6.jpg&quot; /&gt;&lt;img src=&quot;/medias/201902/product/xq7.jpg&quot; /&gt;&lt;img src=&quot;/medias/201902/product/xq8.jpg&quot; /&gt;&lt;img src=&quot;/medias/201902/product/xq9.jpg&quot; /&gt;&lt;/p&gt;&#x27;,12,296,296.0,&#x27;201902/product/zhutu01.jpg&#x27;,NULL,1,0,11,100,99,0,10.0,&#x27;2019-02-27 07:06:49.221879&#x27;,&#x27;2019-02-28 04:53:29.589709&#x27;);</span><br><span class="line">INSERT INTO `mall_product` (`id`, `uid`, `name`, `desc`, `content`, `types`, `price`, `origin_price`, `img`, `buy_link`, `is_valid`, `reorder`, `status`, `sku_count`, `remain_count`, `view_count`, `score`, `created_at`, `updated_at`) VALUES(5,&#x27;31ea8d8957f042c78c958c85df4a7445&#x27;,&#x27;洋河蓝色经典 海之蓝42度375ml 2瓶 洋河官方旗舰店 绵柔型白酒&#x27;,&#x27;特优绵柔原酒，绵甜、爽净 酒厂直营&#x27;,&#x27;&lt;p&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/e11.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/d12.jpg&quot; /&gt;&lt;/p&gt;&#x27;,12,218,218.0,&#x27;201902/product/e0.jpg&#x27;,NULL,1,0,11,45,45,0,10.0,&#x27;2019-02-27 07:52:42.291366&#x27;,&#x27;2019-02-27 07:52:42.291366&#x27;);</span><br><span class="line">INSERT INTO `mall_product` (`id`, `uid`, `name`, `desc`, `content`, `types`, `price`, `origin_price`, `img`, `buy_link`, `is_valid`, `reorder`, `status`, `sku_count`, `remain_count`, `view_count`, `score`, `created_at`, `updated_at`) VALUES(6,&#x27;cc0dea4d4b2d4e22987fa1fb1f13ea6f&#x27;,&#x27;波龙波士顿龙虾鲜活大龙虾鲜活海鲜水产特大澳洲澳龙特大奥龙超大&#x27;,&#x27;野生龙虾 鲜活发货&#x27;,&#x27;&lt;p&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/f11.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/f12.jpg&quot; /&gt;&lt;/p&gt;&#x27;,12,148,148.0,&#x27;201902/product/f0.jpg&#x27;,NULL,1,0,11,30,30,0,10.0,&#x27;2019-02-27 07:59:50.060388&#x27;,&#x27;2019-02-27 07:59:50.060388&#x27;);</span><br><span class="line">INSERT INTO `mall_product` (`id`, `uid`, `name`, `desc`, `content`, `types`, `price`, `origin_price`, `img`, `buy_link`, `is_valid`, `reorder`, `status`, `sku_count`, `remain_count`, `view_count`, `score`, `created_at`, `updated_at`) VALUES(7,&#x27;8a326cee56204a45bf6d46e5c66a2438&#x27;,&#x27;五粮液股份公司 富贵天下绵纯级 500ml 52度 浓香型白酒&#x27;,&#x27;富贵天下绵纯级 500ml 52度&#x27;,&#x27;&lt;p&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/g11.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/g12.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/g13.jpg&quot; /&gt;&lt;img alt=&quot;图片&quot; src=&quot;/medias/201902/product/g14.jpg&quot; /&gt;&lt;/p&gt;&#x27;,12,-13,56.0,&#x27;201902/product/g0.jpg&#x27;,NULL,1,0,11,45,45,0,10.0,&#x27;2019-02-27 08:06:17.870061&#x27;,&#x27;2019-04-22 16:50:53.769519&#x27;);</span><br></pre></td></tr></table></figure><p>给上传的商品的图片新建medias文件夹，并在项目settings中添加该文件夹路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自己上传图片的地址</span></span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/medias/&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;medias&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在项目url下添加静态文件的url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">] + static(settings.MEDIA_URL,document_root = settings.MEDIA_ROOT)</span><br></pre></td></tr></table></figure><p>添加商品列表url和视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pro_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    product_list = Product.objects.<span class="built_in">filter</span>(status=constants.PRODUCT_STATUS_SELL,is_valid = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;pro_list.html&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;product_list&#x27;</span>:product_list,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>将商品列表及信息通过模板传递到html页面显示</p><p><strong>搜索功能实现</strong></p><p>改写html页面，将form表单改为get请求，提交到当前页面，添加input的name属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;weui-search-bar__form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;.&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-search-bar__box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;weui-icon-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">class</span>=<span class="string">&quot;weui-search-bar__input&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">id</span>=<span class="string">&quot;searchInput&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">placeholder</span>=<span class="string">&quot;搜索您想要的商品&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/static/javascript:&quot;</span> <span class="attr">class</span>=<span class="string">&quot;weui-icon-clear&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchClear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;weui-search-bar__label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchText&quot;</span> <span class="attr">style</span>=<span class="string">&quot;transform-origin: 0px 0px 0px; opacity: 1; transform: scale(1, 1);&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;weui-icon-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>搜索您想要的商品<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在视图中获取get请求的参数，完成查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pro_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    product_list = Product.objects.<span class="built_in">filter</span>(status=constants.PRODUCT_STATUS_SELL,is_valid = <span class="number">1</span>)</span><br><span class="line">    search = request.GET.get(<span class="string">&#x27;search&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> search:</span><br><span class="line">        product_list = product_list.<span class="built_in">filter</span>(name__icontains=search)</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;pro_list.html&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;product_list&#x27;</span>:product_list,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="商品分页及刷新"><a href="#商品分页及刷新" class="headerlink" title="商品分页及刷新"></a>商品分页及刷新</h2><p>商品的展示还存在问题，比如一次性查询全部占用内存太高，不推荐，可以试试django自带的listview方法。</p><p>这一节中不用分页器，用面向对象的方式去实现分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> ListView</span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span>(<span class="params">ListView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品列表 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 每页放多少条数据</span></span><br><span class="line">    paginate_by = <span class="number">6</span></span><br><span class="line">    <span class="comment"># 模板位置</span></span><br><span class="line">    template_name = <span class="string">&#x27;product_list.html&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        query = Q(status=constants.PRODUCT_STATUS_SELL,is_valid=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 按名称搜索</span></span><br><span class="line">        name = self.request.GET.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name:</span><br><span class="line">            query = query &amp; Q(name__icontains=name)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> Product.objects.<span class="built_in">filter</span>(query)</span><br></pre></td></tr></table></figure><p><font color='red'>html模板中的变量也要改为object_list, 这是ListView的默认返回对象名称，返回每一页的数据</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> mall <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 使用class方法实现商品列表展示和搜索</span></span><br><span class="line">    path(<span class="string">&#x27;pro/list/&#x27;</span>, views.ProductList.as_view(), name=<span class="string">&#x27;pro_list&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>接下来实现滚动加载下一页</p><p>先给加载框div添加id=’loading‘</p><p>添加js脚本函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/* 封装函数，异步取数据*/</span></span><br><span class="line">    <span class="keyword">var</span> loading = <span class="literal">false</span>;<span class="comment">//是否正在加载中</span></span><br><span class="line">    <span class="keyword">var</span> page = <span class="number">1</span>;<span class="comment">//当前页</span></span><br><span class="line">    <span class="keyword">var</span> noMore = <span class="literal">false</span>;<span class="comment">//是否有下一页</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">LoadData</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (noMore) <span class="keyword">return</span>;</span><br><span class="line">        loading = <span class="literal">true</span>;</span><br><span class="line">        $(<span class="string">&#x27;#loading&#x27;</span>).show();</span><br><span class="line">        <span class="comment">// 加载html片段</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;&#123;% url &#x27;</span>mall:product_load_list<span class="string">&#x27; %&#125;&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">page</span>: page</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 调用接口成功后</span></span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">rest</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 添加html片段到内容区</span></span><br><span class="line">                $(<span class="string">&#x27;#list&#x27;</span>).append(rest);</span><br><span class="line">                loading = <span class="literal">false</span>;</span><br><span class="line">                $(<span class="string">&#x27;#loading&#x27;</span>).hide();</span><br><span class="line">                <span class="comment">// 如果有回调函数则调用</span></span><br><span class="line">                <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">                    callback()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下拉刷新</span></span><br><span class="line">    $(<span class="built_in">document</span>.body).pullToRefresh().on(<span class="string">&#x27;pull-to-refresh&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&#x27;#list&#x27;</span>).empty();<span class="comment">// 清空数据</span></span><br><span class="line">        page = <span class="number">1</span>;</span><br><span class="line">        noMore = <span class="literal">false</span>;</span><br><span class="line">        LoadData(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">document</span>.body).pullToRefreshDone();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="built_in">document</span>.body).infinite(<span class="number">200</span>).on(<span class="string">&#x27;infinite&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (page&lt;&#123;&#123; paginator.num_pages &#125;&#125;)&#123;</span><br><span class="line">            page++;</span><br><span class="line">            LoadData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    LoadData();<span class="comment">// 默认加载第一页</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>新建一个循环体加载的HTML，<code>product_load_list.html</code>，将需要加载部分的html复制到其中。添加加载HTML片段的url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> mall <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 使用class方法实现商品列表展示和搜索</span></span><br><span class="line">    path(<span class="string">&#x27;pro/list/&#x27;</span>, views.ProductList.as_view(), name=<span class="string">&#x27;pro_list&#x27;</span>),</span><br><span class="line">    <span class="comment"># 加载HTML片段</span></span><br><span class="line">    path(<span class="string">&#x27;pro/load/list&#x27;</span>,views.ProductList.as_view(</span><br><span class="line">template_name=<span class="string">&#x27;product_load_list.html&#x27;</span></span><br><span class="line">),name=<span class="string">&#x27;product_load_list&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>pycharm shift+tab整体代码左移</p><p><strong>碰见的一个小bug</strong>：</p><p>上滑加载商品时候，会出现超出页面范围的get请求。比如数据库总共只有一页数据，底部上滑会继续发送第二页数据的get请求，导致报错</p><p><img src="django-mooc-project2/5ef8296f09672b1a12510212.jpg" alt="img"></p><p>解决办法：</p><p>ListView实际上是Django自带的分页器属性的，可以调用分页器的属性paginator.num_pages获取到总页数，判断在总页数范围内，再调用上滑事件。同时将page++;的操作从加载事件LoadData中拿出来了。</p><p><img src="django-mooc-project2/image-20200628160654784.png" alt="image-20200628160654784"></p><h2 id="ajax异步加载后搜索问题的解决"><a href="#ajax异步加载后搜索问题的解决" class="headerlink" title="ajax异步加载后搜索问题的解决"></a>ajax异步加载后搜索问题的解决</h2><p>在上一节加入ajax异步请求后，又出现了新的问题，搜索商品功能无法实现了。搜索一件商品后，产生了请求，但是没有将搜素参数带上。很显然我们需要对商品列表ProductList的视图进行处理。</p><p><img src="django-mooc-project2/image-20200628161243818.png" alt="image-20200628161243818"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span>(<span class="params">ListView</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用面向对象的方法实现商品的展示 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 每页放多少条数据</span></span><br><span class="line">    paginate_by = <span class="number">6</span></span><br><span class="line">    <span class="comment"># 模板位置</span></span><br><span class="line">    template_name = <span class="string">&#x27;pro_list.html&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span></span><br><span class="line">        query = Q(status=constants.PRODUCT_STATUS_SELL,is_valid=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 按名称搜索</span></span><br><span class="line">        name = self.request.GET.get(<span class="string">&#x27;search&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name:</span><br><span class="line">            query = query &amp; Q(name__icontains=name)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Product.objects.<span class="built_in">filter</span>(query)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span>(<span class="params">self, **kwargs</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加额外的参数 如搜索参数 &quot;&quot;&quot;</span></span><br><span class="line">        context = <span class="built_in">super</span>().get_context_data(**kwargs)</span><br><span class="line">        context[<span class="string">&#x27;search_data&#x27;</span>] = self.request.GET.<span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">return</span> context</span><br></pre></td></tr></table></figure><p>同时给异步请求加入搜索内容的参数</p><p><img src="django-mooc-project2/image-20200628171831341.png" alt="image-20200628171831341"></p><p>然后再给首页的搜索框添加action属性，提交到商品列表页面，实现了首页的搜索功能。这样整个项目就告一段落。</p><p><img src="django-mooc-project2/image-20200628172314285.png" alt="image-20200628172314285"></p>]]></content>
      
      
      <categories>
          
          <category> 实战案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 实战 </tag>
            
            <tag> JQuery </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery入门笔记</title>
      <link href="/2020/06/01/jQuery/"/>
      <url>/2020/06/01/jQuery/</url>
      
        <content type="html"><![CDATA[<p>该文章是<a href="https://www.imooc.com/">慕课网</a>相关课程的学习笔记</p><blockquote><p>jQuery是一个快速、简洁的JavaScript框架。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</p></blockquote><p><strong>使用jQuery做什么？</strong></p><p>查询/操作DOM、处理JS事件、实现动画效果、封装/使用jQuery插件、使用ajax发送异步请求</p><h2 id="使用jQuery操作DOM对象"><a href="#使用jQuery操作DOM对象" class="headerlink" title="使用jQuery操作DOM对象"></a>使用jQuery操作DOM对象</h2><p>演示中没有将JavaScript业务逻辑与HTML分离，可自行分离</p><h3 id="理解jQuery对象和DOM对象"><a href="#理解jQuery对象和DOM对象" class="headerlink" title="理解jQuery对象和DOM对象"></a>理解jQuery对象和DOM对象</h3><p>使用原生js实现查询：id、class、标签</p><p>实现jQuery的id选择器。jQuery就是用不同的符号表示选择器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己实现jQuery中的ID选择器</span></span><br><span class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>选择器类型多样可以参考官方文档api<a href="https://jquery.com/">jQuery</a></p><p>主要有#id选择器、element选择器、.class选择器、层级选择（父子、兄弟等）、伪类选择（:first)等等</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 在DOM文档加载完成之后执行jQuery代码</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 根据id</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> username = $(<span class="string">&#x27;#username&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(username);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 根据class</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> citys = $(<span class="string">&#x27;.city&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(citys);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 根据元素标签来查询</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pList = $(<span class="string">&#x27;p&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(pList);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 属性</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> sh = $(<span class="string">&#x27;p[id=&quot;sh&quot;]&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(sh);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 伪类</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pFirst = $(<span class="string">&#x27;p:first&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(pFirst);</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id_username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;sh&#x27;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jQuery属性值"><a href="#jQuery属性值" class="headerlink" title="jQuery属性值"></a>jQuery属性值</h3><p>访问DOM元素的HTML属性(id,class,style,自定义属性) ：<code>.attr()</code></p><p>​    <code>.attr(&#39;class&#39;)</code>查询其class属性</p><p>查看DOM元素的HTML/文本信息：</p><p>​    <code>.html()/text()</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;citys&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;sh&#x27;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">   <span class="keyword">var</span> city_info = $(<span class="string">&#x27;#citys&#x27;</span>).html();</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(city_info);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>控制台将会输出div中的内容，text()只打印文字信息，不打印标签</p><p>查看表单值信息：</p><p>​    <code>.val()</code></p><p>jQuery对象转化为DOM对象：</p><p>‘$(‘#citys’).get(0)’ （0代表结果集的第一个）</p><h3 id="遍历DOM"><a href="#遍历DOM" class="headerlink" title="遍历DOM"></a>遍历DOM</h3><ol><li><p>for循环遍历</p></li><li><p>.each函数遍历</p><p>第二种each方法<font color='red'>使用范围更广</font>，不局限于DOM对象，后端向前端传递的json也可以使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;city&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;sh&#x27;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 遍历DOM</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> citys = $(<span class="string">&#x27;.city&#x27;</span>)</span></span><br><span class="line"><span class="javascript">citys.each(<span class="function"><span class="keyword">function</span>(<span class="params">index,value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(index,value);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">$.each(citys,<span class="function"><span class="keyword">function</span>(<span class="params">index,value</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(index,value);</span></span><br><span class="line"><span class="javascript">&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="jQuery/image-20200601200731685.png" alt="image-20200601200731685"></p></li></ol><p><code>.find()/.children()</code>可以查看子类标签信息，两者区别在于children针对的是子一级元素，而不会继续再往下找</p><h3 id="修改DOM信息"><a href="#修改DOM信息" class="headerlink" title="修改DOM信息"></a>修改DOM信息</h3><p>使用jQuery构建DOM：</p><p><code>$(&#39;&lt;p/&gt;&#39;)</code></p><p>‘.append()/.appendTo()’添加到DOM</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给body最后添加一个p块级元素</span></span><br><span class="line">htmlDOM=$(<span class="string">&#x27;&lt;p class=&quot;&quot;/&gt;&#x27;</span>)</span><br><span class="line">htmlDOM.appendTo(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).append(htmlDOM);</span><br></pre></td></tr></table></figure><p>‘.html()/.text()/.val()/.attr()’设置内容/值/属性。括号中不填写内容则是查询，填写了内容则是设置</p><p><code>css()</code>添加css，<code>.addClass()/.removeClass()</code>添加/删除class类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给id为city的元素设置css样式</span></span><br><span class="line">$(<span class="string">&#x27;#city&#x27;</span>).css(&#123;</span><br><span class="line">    <span class="string">&#x27;background-color&#x27;</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>.show()/.hide()</code>显示/隐藏。封装了css里面的display属性</p><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>举例：生成html对象并添加到DOM</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给id为citys的DOM最后添加p变迁</span></span><br><span class="line">$(<span class="string">&#x27;&lt;p/&gt;&#x27;</span>).text(<span class="string">&#x27;宜春&#x27;</span>).appendTo(<span class="string">&#x27;#citys&#x27;</span>);</span><br></pre></td></tr></table></figure><p>但是不便于读写</p><h2 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h2><ul><li><p>ready——页面载入事件</p><p>表示页面DOM载入完毕</p></li></ul><p>事件的两种写法：</p><ul><li>on(‘click’,function(){})</li><li>click(function(){})</li></ul><p>.click()/.dbclick()——点击事件</p><p>.focus()/.blur()——获得焦点/失去焦点事件</p><p>.keyup()/.keydown()/.keypress()——键盘事件</p><p>.mousedown()/.mouseup()/.mousemove()等——鼠标事件</p><p>例如绑定点击事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">&#x27;a&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 取消掉a标签的默认行为，当然也可以通过href=&#x27;javascript:;&#x27;来实现</span></span><br><span class="line">        event.preventDefault();</span><br><span class="line">        alert(<span class="string">&#x27;clicked&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入框中输入内容页面再次显示</span></span><br><span class="line">$(<span class="string">&#x27;#username&#x27;</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> val=$(<span class="built_in">this</span>).val();</span><br><span class="line">$(<span class="string">&#x27;#append&#x27;</span>).text(val);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更多事件可以查询文档</p><h2 id="AJAX异步请求"><a href="#AJAX异步请求" class="headerlink" title="AJAX异步请求"></a>AJAX异步请求</h2><p><strong>异步请求有什么好处？</strong></p><ul><li>在不重新加载页面的情况下更新网页</li><li>页面加载完成后请求/接收数据</li><li>在后台向服务器发送数据</li></ul><h3 id="AJAX原理"><a href="#AJAX原理" class="headerlink" title="AJAX原理"></a>AJAX原理</h3><p>步骤:</p><ol><li><p>创建XMLHttpRequest/ActiveXObject对象</p><p>XMLHttpRequest对象用于在后台与服务器交换数据</p><p>XMLHttpRequest的几种状态：</p><p>0：对象没有完成初始化</p><p>1：对象开始发送请求</p><p>2：对象的请求发送完成</p><p>3：对象开始读取服务器响应</p><p>4：对象读取服务器响应结束</p></li><li><p>注册回调函数</p></li><li><p>配置请求参数</p></li><li><p>发送请求</p></li><li><p>创建回调</p></li></ol><p>手动实现AJAX：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建XMLHttpRequest/ActiveXObject对象</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 判断浏览器是否支持ajax</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;浏览器不支持&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 注册回调函数</span></span><br><span class="line"><span class="keyword">if</span>(xmlhttp !== <span class="literal">null</span>)&#123;</span><br><span class="line">xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xmlhttp.readyState === <span class="number">4</span>)&#123;</span><br><span class="line"><span class="comment">// http状态码</span></span><br><span class="line"><span class="built_in">console</span>.log(xmlhttp.status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 配置请求参数</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&#x27;https://rice-and-bran.site&#x27;</span>;</span><br><span class="line"><span class="comment">// 4. 发送请求</span></span><br><span class="line"><span class="comment">// 参数3 true表示开启异步(持续发送请求，不用等待结果)</span></span><br><span class="line">xmlhttp.open(<span class="string">&#x27;GET&#x27;</span>,url,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xmlhttp.send(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 5. 创建回调</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(xmlhttp.readyState === <span class="number">4</span>)&#123;</span><br><span class="line"><span class="comment">// http状态码</span></span><br><span class="line"><span class="built_in">console</span>.log(xmlhttp.status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>对于JavaScript中比较运算符，可能大家用的比较多的是“==”、对于“===”很多人可能很陌生。=== 表示恒等，首先比较两边的变量数据类型是否相等，其次比较两边的变量的数值是否相等；== 表示相等即仅仅比较两边变量的数值是否相等。</p></blockquote><p><code>Access to XMLHttpRequest at &#39;https://rice-and-bran.site/&#39; from origin &#39;null&#39; has been blocked by CORS policy: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></p><p><font color='red'>跨域错误</font></p><p>同源策略：协议    地址    端口（默认80或8001）</p><p>所在页面地址与请求目标地址不匹配。</p><h3 id="AJAX函数"><a href="#AJAX函数" class="headerlink" title="AJAX函数"></a>AJAX函数</h3><p>jQuery 中实现ajax不需要上面name繁琐</p><h4 id="jQuery-ajax-options-函数"><a href="#jQuery-ajax-options-函数" class="headerlink" title="jQuery.ajax(options)函数"></a>jQuery<code>.ajax(options)</code>函数</h4><p>url——请求地址</p><p>method——请求类型</p><p>data——请求参数</p><p>dataType——返回的数据类型（xml/html/json等）</p><p>headers——请求头信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;http://127.0.0.1:8000/jq_ajax/&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;gan&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;123456&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 请求发送成功之后需要进步一处理，比如返回信息</span></span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data,status</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>,data,status)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data,status</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>,data,status)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">complete</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data,status</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;complete&#x27;</span>,data,status)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如图成功发送请求后会返回一次信息，完成后再次返回完成状态</p><p><img src="jQuery/image-20200607144540797.png" alt="image-20200607144540797"></p><h4 id="ajax快捷函数"><a href="#ajax快捷函数" class="headerlink" title="ajax快捷函数"></a>ajax快捷函数</h4><p>url——请求地址</p><p>method——请求类型</p><p>callback——请求完成后的回调函数</p><ul><li>.post()——post请求</li><li>.get()——get请求</li><li>.getJSON()——get请求json数据</li></ul><p>服务器端返回的是json数据可以通过getJSON()直接返回json数据到前端使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">&#x27;a&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $.getJSON(<span class="string">&#x27;http://127.0.0.1:8000/json/&#x27;</span>,&#123;</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">rest</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(rest.username);</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>url对应的视图添加方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ajax_json</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 模拟后端传递给前端的数据</span></span><br><span class="line">    user = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;gan&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;nickname&#x27;</span>: <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;profile&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>: <span class="number">24</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(json.dumps(user))</span><br></pre></td></tr></table></figure><h3 id="AJAX全局设置"><a href="#AJAX全局设置" class="headerlink" title="AJAX全局设置"></a>AJAX全局设置</h3><p>ajaxSetup()全局设置使用场景</p><ul><li>请求响应拦截，如：http状态码401跳转到登录界面</li><li>添加全局参数</li><li>添加请求头信息</li></ul><p>举例：添加请求头，给401状态添加提示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 添加全局设置</span></span><br><span class="line"> $.ajaxSetup(&#123;</span><br><span class="line">     <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;appfrom&#x27;</span>:<span class="string">&#x27;web&#x27;</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">statusCode</span>:&#123;</span><br><span class="line">        <span class="number">401</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;您没有登录，请登录&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> AJAX </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM操作返回null</title>
      <link href="/2020/05/27/javascript-null/"/>
      <url>/2020/05/27/javascript-null/</url>
      
        <content type="html"><![CDATA[<p>在使用JavaScript进行DOM操作时候，浏览器报错返回null。发现原来是JavaScript引用位置的问题，导致js文件加载失效。</p><p>JavaScript应该<font color='red'>在body之后引用</font>，因为JavaScript应该要在页面完成解析时执行，否则无法获取到HTML DOM。</p><p>或者 在<code>&lt;script type=&quot;text/javascript&quot;&gt; </code>里面加个<font color='red'>defer属性</font>，这样可以引用放在head中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML &lt;script&gt; defer属性：</p><p>defer 属性是一个布尔属性。</p><p>defer 属性规定当页面已完成加载后，才会执行脚本。</p><p>注意：defer 属性仅适用于外部脚本（只有在使用 src 属性时）</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战JavaScript轮播图</title>
      <link href="/2020/05/17/js-ratation/"/>
      <url>/2020/05/17/js-ratation/</url>
      
        <content type="html"><![CDATA[<p>实现很多网站首页的图片轮播和导航菜单效果</p><iframe width:1200px height:500px src='http://cdn.rice-and-bran.site/JavaScript%E8%BD%AE%E6%92%AD%E5%9B%BE.gif'></iframe><h2 id="轮播图内容和样式"><a href="#轮播图内容和样式" class="headerlink" title="轮播图内容和样式"></a>轮播图内容和样式</h2><h3 id="设置轮播图样式"><a href="#设置轮播图样式" class="headerlink" title="设置轮播图样式"></a>设置轮播图样式</h3><p>新建三个图片的div</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;main&#x27;</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片轮播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;banner&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;banner&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner-slide slide1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner-slide slide2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner-slide slide3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置相关样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;微软雅黑&#x27;</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#14191e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">30px</span> auto;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*在图片轮播区域，设置轮播图作为背景*/</span></span><br><span class="line"><span class="selector-class">.banner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner-slide</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-size</span>: cover;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*将第二三张图片先暂时隐藏，后续通过js实现轮播*/</span></span><br><span class="line"><span class="selector-class">.slide1</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../static/js1.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide2</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../static/js2.jpg&#x27;</span>);</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide3</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../static/js3.jpg&#x27;</span>);</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置轮播图的按钮"><a href="#设置轮播图的按钮" class="headerlink" title="设置轮播图的按钮"></a>设置轮播图的按钮</h3><p><code>href=&quot;javascript:void(0)&quot;</code>当点击超级链接时，什么都不发生。其中void()可用于执行操作符中的代码</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 举例：执行 void() 操作符中的js代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(alert(&#x27;nothing&#x27;))&quot;</span>&gt;</span>点我弹出警告框!!!<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加轮播图的按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上一张下一张按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;button prev&#x27;</span> <span class="attr">id</span>=<span class="string">&quot;prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;button next&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;next&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">244px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;../static/箭头.png&#x27;</span>);</span><br><span class="line"><span class="attribute">background-size</span>: contain;</span><br><span class="line"><span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line"><span class="attribute">background-position</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line"><span class="comment">/*兼容其他浏览器的透明度设置*/</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">alpha</span>(opacity=<span class="number">80</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.prev</span>&#123;</span><br><span class="line"><span class="comment">/*设置按键旋转180度*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.next</span>&#123;</span><br><span class="line"><span class="comment">/*上面设置了244px,先将left不起作用*/</span></span><br><span class="line"><span class="attribute">left</span>: auto;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置轮播图圆点"><a href="#设置轮播图圆点" class="headerlink" title="设置轮播图圆点"></a>设置轮播图圆点</h3><p><code>class=&#39;active&#39;</code>表示当前所处的按钮，要通过js、css实现效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 圆点导航 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dots&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;dots&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&#x27;active&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dots</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dots</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="comment">/*生成行内的块级元素*/</span></span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">0.4</span>);</span><br><span class="line"><span class="comment">/*设置圆点的阴影 水平 垂直 距离 模糊程度 颜色 inset向内阴影*/</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.8</span>) inset;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置选中的圆点样式*/</span></span><br><span class="line"><span class="selector-class">.dots</span> <span class="selector-tag">span</span><span class="selector-class">.active</span>&#123;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">7</span>,<span class="number">17</span>,<span class="number">27</span>,<span class="number">0.4</span>) inset;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="轮播图特效的实现"><a href="#轮播图特效的实现" class="headerlink" title="轮播图特效的实现"></a>轮播图特效的实现</h2><h3 id="封装getElementById-方法"><a href="#封装getElementById-方法" class="headerlink" title="封装getElementById()方法"></a>封装getElementById()方法</h3><p>为了减少代码量，封装一个代替getElementById()的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个代替getElementById()的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">byId</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"><span class="comment">// ===判断值的同时还要判断类型 三目运算符，满足参数为string返回对应div对象，否则返回参数</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span>(id) === <span class="string">&quot;string&quot;</span>?<span class="built_in">document</span>.getElementById(id):id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="轮播图自动轮播"><a href="#轮播图自动轮播" class="headerlink" title="轮播图自动轮播"></a>轮播图自动轮播</h3><p>定义一个切换图片的函数，这个函数里面用于切换图片，我们现在这一步完成自动轮播的部分。</p><p><em>main是html页面中最大的一个div，包含所有div</em></p><p>切换图片的原理是通过全局变量index对应div的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置全局变量，</span></span><br><span class="line"><span class="keyword">var</span> index=<span class="number">0</span>,timer=<span class="literal">null</span>,</span><br><span class="line">pics=byId(<span class="string">&#x27;banner&#x27;</span>).getElementsByTagName(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">len=pics.length;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slideImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> main = byId(<span class="string">&quot;main&quot;</span>);</span><br><span class="line"><span class="comment">// 划过清除定时器，离开继续</span></span><br><span class="line">main.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 划过图片清除定时器</span></span><br><span class="line"><span class="keyword">if</span>(timer) <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">&#125;</span><br><span class="line">main.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 每隔三秒调用切换函数</span></span><br><span class="line"><span class="comment">// 间歇调用 setInterval返回一个 ID（数字），可以将这个ID传递给clearInterval()</span></span><br><span class="line">timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span>(index&gt;=len)&#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用切换图片函数</span></span><br><span class="line">changeImg();</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 切换图片的函数</span></span><br><span class="line"><span class="comment">// 遍历banner下所有的div将其隐藏</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">pics[i].style.display=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让轮播图的div显示</span></span><br><span class="line">pics[index].style.display=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用轮播函数</span></span><br><span class="line">slideImg();</span><br></pre></td></tr></table></figure><h3 id="点击圆点切换图片"><a href="#点击圆点切换图片" class="headerlink" title="点击圆点切换图片"></a>点击圆点切换图片</h3><p>这一步我们需要实现点击圆点切换对应图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继续在slideImg()函数中添加该方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slideImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 点击圆点切换图片</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="comment">// 给dots添加id属性</span></span><br><span class="line">dots[i].id=i;</span><br><span class="line">dots[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">index=<span class="built_in">this</span>.id;</span><br><span class="line">changeImg();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按钮切换图片"><a href="#按钮切换图片" class="headerlink" title="按钮切换图片"></a>按钮切换图片</h3><p>实现点击按钮切换图片(继续在slideImg()函数中添加该方法)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下一张</span></span><br><span class="line">byId(<span class="string">&#x27;next&#x27;</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span>(index&gt;=len)&#123;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeImg();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上一张</span></span><br><span class="line">byId(<span class="string">&#x27;prev&#x27;</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">index--;</span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">index=len-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">changeImg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="导航菜单的内容和样式"><a href="#导航菜单的内容和样式" class="headerlink" title="导航菜单的内容和样式"></a>导航菜单的内容和样式</h2><h3 id="导航主菜单的结构样式"><a href="#导航主菜单的结构样式" class="headerlink" title="导航主菜单的结构样式"></a>导航主菜单的结构样式</h3><p><code>&amp;#xe665</code>是引用的字体中的一个箭头标志，字体通过css引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;menu&#x27;</span> <span class="attr">id</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-menu hide&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sub-menu&quot;</span>&gt;</span></span><br><span class="line">    待完善</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;menu-content&#x27;</span> <span class="attr">id</span>=<span class="string">&quot;menu-content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>手机、配件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="symbol">&amp;#xe665;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="symbol">&amp;#xe665;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="symbol">&amp;#xe665;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>家具<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="symbol">&amp;#xe665;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*引用的字体，已经提前下载好*/</span></span><br><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../static/font/iconfont.eot&#x27;</span>);</span><br><span class="line"><span class="comment">/*兼容不同浏览器*/</span></span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../static/font/iconfont.eot&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line"> <span class="built_in">url</span>(<span class="string">&#x27;../static/font/iconfont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line"> <span class="built_in">url</span>(<span class="string">&#x27;../static/font/iconfont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line"> <span class="built_in">url</span>(<span class="string">&#x27;../static/font/iconfont.svg#iconfog&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*导航菜单*/</span></span><br><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">244px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">460px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-content</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">244px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">454px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">64px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span> <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-class">.menu-item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1.5px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span> <span class="selector-tag">i</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续在slideImg()函数中添加导航菜单的动效方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> index=<span class="number">0</span>,timer=<span class="literal">null</span>,</span><br><span class="line">pics=byId(<span class="string">&#x27;banner&#x27;</span>).getElementsByTagName(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">len=pics.length,</span><br><span class="line">dots=byId(<span class="string">&#x27;dots&#x27;</span>).getElementsByTagName(<span class="string">&#x27;span&#x27;</span>),</span><br><span class="line">menu_content=byId(<span class="string">&#x27;menu-content&#x27;</span>),</span><br><span class="line">sub_menu=byId(<span class="string">&#x27;sub-menu&#x27;</span>),</span><br><span class="line">menuItems=menu_content.getElementsByClassName(<span class="string">&#x27;menu-item&#x27;</span>),</span><br><span class="line">inner_box=sub_menu.getElementsByClassName(<span class="string">&#x27;inner-box&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slideImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">// 导航菜单</span></span><br><span class="line"><span class="comment">// 遍历menu-item 添加划过效果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>;m&lt;menuItems.length;m++)&#123;</span><br><span class="line"><span class="comment">// 给每一个menu-item定义data-index属性，作为索引</span></span><br><span class="line">menuItems[m].setAttribute(<span class="string">&#x27;data-index&#x27;</span>,m);</span><br><span class="line">menuItems[m].onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// TODO 鼠标滑过显示子菜单</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="子菜单结构与样式"><a href="#子菜单结构与样式" class="headerlink" title="子菜单结构与样式"></a>子菜单结构与样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-menu hide&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sub-menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-inner-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>手机、配件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold mr10&quot;</span>&gt;</span>手机通讯：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>手机维修<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>以旧换新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold mr10&quot;</span>&gt;</span>手机配件：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>手机壳<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>手机存储卡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>数据线<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>充电器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>电池<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold mr10&quot;</span>&gt;</span>运营商：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>中国联通<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>中国移动<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>中国电信<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold mr10&quot;</span>&gt;</span>智能设备：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>智能手环<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>智能家居<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>智能手表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>其他配件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-row&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;bold mr10&quot;</span>&gt;</span>娱乐：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>耳机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>音响<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>收音机<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ml10 mr10&quot;</span>&gt;</span>/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>麦克风<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-inner-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>电脑<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-inner-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>家用电器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-inner-box&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>家具<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sub-menu</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">740px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">454px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.6</span>);</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">244px</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">30</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner-box</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.title</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#f01414</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.sub-row</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.bold</span>&#123;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.mr10</span>&#123;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub-inner-box</span> <span class="selector-class">.ml10</span>&#123;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hide</span>&#123;</span><br><span class="line">    <span class="comment">/*通过该属性来控制子菜单的显示与隐藏*/</span></span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充之前的导航菜单js方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导航菜单</span></span><br><span class="line"><span class="comment">// 遍历menu-item 添加划过效果</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m=<span class="number">0</span>;m&lt;menuItems.length;m++)&#123;</span><br><span class="line"><span class="comment">// 给每一个menu-item定义data-index属性，作为索引</span></span><br><span class="line">menuItems[m].setAttribute(<span class="string">&#x27;data-index&#x27;</span>,m);</span><br><span class="line">menuItems[m].onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> idx = <span class="built_in">this</span>.getAttribute(<span class="string">&#x27;data-index&#x27;</span>);</span><br><span class="line"><span class="comment">// 遍历所有子菜单，先将每一个都隐藏</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;inner_box.length;j++)&#123;</span><br><span class="line">inner_box[j].style.display=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 再将子菜单显示，及对应inner-box显示</span></span><br><span class="line">sub_menu.className=<span class="string">&#x27;sub-menu&#x27;</span>;</span><br><span class="line">inner_box[idx].style.display=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标移出子菜单 隐藏</span></span><br><span class="line">sub_menu.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">sub_menu.className=<span class="string">&#x27;sub-menu hide&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标位于子菜单 显示</span></span><br><span class="line">sub_menu.onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">sub_menu.className=<span class="string">&#x27;sub-menu&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 鼠标移出主菜单 子菜单隐藏</span></span><br><span class="line">menu_content.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">sub_menu.className=<span class="string">&#x27;sub-menu hide&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>项目关键点我认为有几个：</p><ol><li><p>实现对应内容的显示隐藏，不论是图片轮播还是子菜单都需要涉及到。内容的显示隐藏有两种方案：一是通过给div加class名，通过css控制对应class名显示或隐藏，然后js DOM操作加控制class名；二是通过js 操作DOM的显示隐藏<code>DOM.style.display=&#39;&#39;;</code></p></li><li><p>图片与圆点的对应，主菜单与子菜单的对应。通过给圆点添加属性<code>setAttribute</code>，来给圆点加入序号，调用图片时候通过该属性值调用圆点实现一一对应。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 实战案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django表单的使用与介绍</title>
      <link href="/2020/05/17/django-form/"/>
      <url>/2020/05/17/django-form/</url>
      
        <content type="html"><![CDATA[<p>该文章是<a href="https://www.imooc.com/">慕课网</a>的相关课程笔记</p><p><strong>如何学好表单</strong></p><ul><li>掌握HTML各表单元素的使用</li><li>掌握前后端验证表单的方法</li><li>掌握从后端获取表单传递的数据</li><li>掌握在django中使用表单</li><li>实战演练夯实基础</li></ul><h2 id="表单相关介绍与使用"><a href="#表单相关介绍与使用" class="headerlink" title="表单相关介绍与使用"></a>表单相关介绍与使用</h2><h3 id="表单的介绍"><a href="#表单的介绍" class="headerlink" title="表单的介绍"></a>表单的介绍</h3><p>常见的表单元素：</p><ol><li>表单标签——&lt;form&gt;</li><li>单行文本框/多行文本框</li><li>选择（单选、多选、下拉选择）</li><li>隐藏表单域</li><li>表单按钮</li><li>文件上传框</li></ol><p>&lt;form&gt;标签：</p><ol><li>action——表单提交的URL地址</li><li>method——表单请求的方式（GET/POST）</li><li>enctype——请求内容的形式<pre><code>application/x-www-form-urlencoded   multipart/form-data（用于上上传文件，如word、excel等）</code></pre></li></ol><p>文本标签：</p><ol><li><p>textarea——多行文本</p></li><li><p>单行文本（对应input中的type值）</p><p>text    password    email    url    number    color    时间日期等（date、month、week、time、date、datetime、datetime-local）</p></li></ol><p>选择标签：</p><ol><li><p>单选多选radio    checkbox</p></li><li><p>下拉选择</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他：file上传文件    button    hidden隐藏表单域</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://rice-and-bran.site&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--placeholder提示性的文字--&gt;</span></span><br><span class="line">        用户地址：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">       用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入年龄&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        性别：</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--label for让点击文字时也能选中，不用只点击框--&gt;</span></span><br><span class="line">        爱好：</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id-play-ball&quot;</span>&gt;</span>打球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id-play-ball&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打球&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;id-play&quot;</span>&gt;</span>玩耍<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id-play&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玩耍&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在视图中获取表单值：</p><ol><li>GET请求<br><code>request.GET.get(&#39;name&#39;, None)</code></li><li>POST请求<br><code>request.POST.get(&#39;name&#39;, None)</code></li></ol><h3 id="表单的使用"><a href="#表单的使用" class="headerlink" title="表单的使用"></a>表单的使用</h3><p>第一步：创建表单</p><p>新建表单文件form.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 生成一个简单的登录表单 &quot;&quot;&quot;</span></span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p>第二步：添加到视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">form</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 将表单添加到视图 &quot;&quot;&quot;</span></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;form.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br></pre></td></tr></table></figure><p>第三步：渲染到模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;hello form&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &#123;<span class="comment"># action=&#x27;.&#x27;表示提交url为当前url #&#125;</span></span><br><span class="line">    &lt;form action=<span class="string">&quot;.&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; form &#125;&#125;</span><br><span class="line">        &#123;<span class="comment"># type为submit才是可提交按钮 #&#125;</span></span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="django-form/image-20200529115759076.png" alt="image-20200529115759076"></p><p>第四步：在视图中处理表单数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">form</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 将表单添加到视图 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 如果是post请求，要接收参数处理数据</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = LoginForm(request.POST)</span><br><span class="line">        <span class="comment"># 验证表单数据的合法性</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 获取数据</span></span><br><span class="line">            data = form.cleaned_data</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;data:&#x27;</span>, data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># get请求</span></span><br><span class="line">        form = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;form.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="Django内置的字段"><a href="#Django内置的字段" class="headerlink" title="Django内置的字段"></a>Django内置的字段</h3><p><strong>Form对象的属性和方法：</strong><br>is_bound    是否已经绑定数据<br>is_valid()    表单是否已经通过验证<br>cleaned_data    访问表单验证后的数据<br>as_p/as_ul/as_table    渲染表单（在表单html中添加）<br>errors    表单验证后的错误信息<br>fields    表单中的字段<br>initial    初始化数据（指定value值）</p><ul><li>表单字段继承自django.forms.Field</li><li>每个字段都具有核心参数</li><li>每个字段都可以有自定义的验证逻辑</li><li>每个字段都有钩子函数，方便扩充功能</li></ul><p><strong>字段的常用核心参数：</strong><br>required    是否为必填，默认为必填<br>label    label标签（如：输入框前的文字描述）<br>initial    初始化数据<br>widget    定制界面显示方式（如    文本框、选择框）<br>help_text    帮助文字<br>error_messages    覆盖字段引发异常后的错误显示<br>localize    本地化，根据用户所在地区格式进行显示<br>disabled    禁用表单，界面上不可操作<br>has_changed()    值是否发生了改变</p><p><strong>Django内置的字段（与ORM模型中字段类似）：</strong><br>    与HTML表单的各种类型对应</p><p>文本/字符串<br>    CharField    字符串输入<br>    EmailField    邮件地址输入<br>    URLField    URL地址输入<br>    UUIDField    uuid字符串输入</p><p>数值（整数、小数）<br>    FloadField    浮点数输入<br>    IntegerField    整数输入<br>    DecimalField    小数输入（更精确）</p><p>选择<br>    ChoiceField        单选<br>    MutipleChoiceField    多选<br>    TypedChoiceField    高级选择（支持结果转换类型）</p><p>日期/时间<br>    FileField    文件<br>    FilePathField    文件路径<br>    ImageField    图片</p><p>布尔<br>    BooleanField    True/False<br>    NullBooleanField    None/True/False</p><p>正则<br>    RegexField    正则输入</p><h3 id="内置的widgets"><a href="#内置的widgets" class="headerlink" title="内置的widgets"></a>内置的widgets</h3><p>文本输入<br>    TextInput    HiddenInput    NumberInput    DateTimeInput    URLInput    TimeInput    PasswordInput    Textarea</p><p>选择输入<br>    Slect    SelectMultiple    NullBooleanSelect    CheckboxSelectMultiple    RadioSelect</p><p>文件上传<br>    FileInput</p><p>复合Widgets<br>    MultipleHiddenInput    SplitDateTimeWidget    SplitHiddenDateTimeWidget    SelectDateTimeWidget</p><p>建议使用的时候多查文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 生成一个简单的登录表单 &quot;&quot;&quot;</span></span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    email = forms.EmailField(label=<span class="string">&#x27;邮箱&#x27;</span>)</span><br><span class="line">    <span class="comment"># 密码输入框</span></span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>, widget=forms.PasswordInput)</span><br><span class="line">    <span class="comment"># 多行文本输入</span></span><br><span class="line">    postscript = forms.CharField(label=<span class="string">&#x27;备注&#x27;</span>, widget=forms.Textarea)</span><br><span class="line">    <span class="comment"># 单选输入</span></span><br><span class="line">    sex = forms.ChoiceField(label=<span class="string">&#x27;性别&#x27;</span>, choices=((<span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>)), widget=forms.RadioSelect)</span><br></pre></td></tr></table></figure><h2 id="根据模型定义表单"><a href="#根据模型定义表单" class="headerlink" title="根据模型定义表单"></a>根据模型定义表单</h2><h3 id="根据模型定义表单-1"><a href="#根据模型定义表单-1" class="headerlink" title="根据模型定义表单"></a>根据模型定义表单</h3><p>定义一个登陆表单，且添加视图和url：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>, widget=forms.PasswordInput, max_length=<span class="number">64</span>)</span><br><span class="line">    verify_code = forms.CharField(label=<span class="string">&#x27;验证码&#x27;</span>, max_length=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="单个字段验证"><a href="#单个字段验证" class="headerlink" title="单个字段验证"></a>单个字段验证</h3><p>举例：验证用户名为手机号码</p><p>​    <strong>第一步：定义clean_xx验证方法</strong></p><p>​    给这个表单定义clean_username方法用于验证用户名（用户名必须为手机号）</p><p>​    <strong>第二步：获取对应的字段值并验证</strong></p><p><code>cleaned_data</code>方法用于获取对应字段username，通过正则匹配该字段是否为手机号</p><p>​    <strong>第三步：验证失败触发forms.ValidationError异常</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    username = forms.CharField(label=<span class="string">&#x27;用户名&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    password = forms.CharField(label=<span class="string">&#x27;密码&#x27;</span>, widget=forms.PasswordInput, max_length=<span class="number">64</span>)</span><br><span class="line">    verify_code = forms.CharField(label=<span class="string">&#x27;验证码&#x27;</span>, max_length=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_username</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户名 属于django的一个钩子函数&quot;&quot;&quot;</span></span><br><span class="line">        username = self.cleaned_data[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        <span class="comment"># 用正则匹配验证用户名输入的是否为手机号</span></span><br><span class="line">        pattern = <span class="string">r&#x27;^0&#123;0,1&#125;1[0-9]&#123;10&#125;$&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.match(pattern, username):</span><br><span class="line">           <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;请输入做正确的手机号码&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure><p>​    <strong>第四步：返回验证后的数据</strong>    </p><p>在clean_username方法中返回，且在视图函数中调用该表单，调用form.is_valid()方法查看是否验证通过，验证通过则返回该表单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = Login(request.POST)</span><br><span class="line">        <span class="comment"># 验证表单的合法性且获取数据</span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            data = form.cleaned_data</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;data:&#x27;</span>, data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># get请求则直接显示该页面</span></span><br><span class="line">        form = Login()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;form.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>​    <strong>第五步：HTML页面中显示错误</strong></p><p>如果验证未通过html页面中会显示错误’请输入做正确的手机号码’，同时为该提示自动创建标签。后期可通过css及errorlist类名来美化页面。</p><p><img src="django-form/image-20200530194553567.png" alt="image-20200530194553567"></p><h3 id="多个字段验证"><a href="#多个字段验证" class="headerlink" title="多个字段验证"></a>多个字段验证</h3><p>举例：验证用户名或密码是否正确</p><p>​    <strong>第一步：重写clean()方法</strong></p><p>给用户登录表单添加验证用户名和密码的clean()方法</p><p>​    <strong>第二步：获取用户名和密码数据并验证</strong></p><p>使用cleaned_data.get(field, None)来获取用户名，密码</p><p>​    <strong>第三步：验证失败触发forms.ValidationError异常</strong></p><p>​    <strong>第四步：返回验证后的表单数据cleaned_data</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录 &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_username</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户名 属于django的一个钩子函数&quot;&quot;&quot;</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户名及密码 &quot;&quot;&quot;</span></span><br><span class="line">        cleaned_data = <span class="built_in">super</span>().clean()</span><br><span class="line">        <span class="comment"># 获取用户名及密码</span></span><br><span class="line">        username = cleaned_data.get(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        password = cleaned_data.get(<span class="string">&#x27;password&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">and</span> password:</span><br><span class="line">            <span class="comment"># 查看用户名或密码是否匹配，不匹配是空列表，count为0</span></span><br><span class="line">            count = WeiboUser.objects.<span class="built_in">filter</span>(username=username, password=password).count()</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line">        <span class="comment"># 返回验证后的数据</span></span><br><span class="line">        <span class="keyword">return</span> cleaned_data</span><br></pre></td></tr></table></figure><p>​    <strong>第五步：在html页面显示错误non_field_errors</strong></p><p>如果要在html页面中选择性显示表单内容，可以更改模板方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello form<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;# action=&#x27;.&#x27;表示提交url为当前url #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;.&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.username.label &#125;&#125;</span><br><span class="line">            &#123;&#123; form.username &#125;&#125;</span><br><span class="line">            &#123;&#123; form.username.errors.as_p &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.password.label &#125;&#125;</span><br><span class="line">            &#123;&#123; form.password &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123; form.verify_code &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 展示表单错误提示，因为是不属于任何单个字段的错误，所以叫non_field... --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 作为文本显示 --&gt;</span></span><br><span class="line">            &#123;&#123; form.non_field_errors.as_text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不加as_text，也可以通过css渲染errorlist类显示</p><p><img src="django-form/image-20200531165723695.png" alt="image-20200531165723695"></p><p>是否可以通过DjangoORM模型来创建表单？</p><p><img src="django-form/image-20200529212033281.png" alt="image-20200529212033281"></p><p>假设已经有模型(Model)了，但是要设计对应的表单(Form)，此时又很多公用的字段，为了方便创建表单，可以使用django的ModelForm</p><table><thead><tr><th>ORM字段</th><th>表单字段</th></tr></thead><tbody><tr><td>ForeignKey</td><td>ModelChoiceField</td></tr><tr><td>ManyToManyField</td><td>ModelMultipleChoiceField</td></tr><tr><td>TextField</td><td>CharField</td></tr><tr><td>PositiveIntegerField</td><td>IntegerField</td></tr></tbody></table><p><font color='red'>可以在官方文档中搜索ModelForm查看各种对应字段。</font></p><p>修改模型表单主要是通过Meta来修改</p><p>Meta配置选项：</p><ul><li>widgets——修改展现样式（文本输入、数字输入）</li><li>help_texts——设置帮助文字</li><li>labels——设置表单输入前的文字提示</li><li>error_messages——设置表单的错误提示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserForm</span>(<span class="params">forms.ModelForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用模型创建表单 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = WeiboUser</span><br><span class="line">        fields = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="comment"># 将password框改为密文显示</span></span><br><span class="line">        widgets = &#123;</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: forms.PasswordInput</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 改写username框的名称</span></span><br><span class="line">        labels = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;手机号码&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 设置表单的错误提示</span></span><br><span class="line">        error_messages = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;required&#x27;</span>: <span class="string">&#x27;请输入手机号码&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;max_length&#x27;</span>: <span class="string">&#x27;最长32位&#x27;</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 验证用户名及密码 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        cleaned_data = <span class="built_in">super</span>().clean()</span><br><span class="line">        username = cleaned_data.get(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        password = cleaned_data.get(<span class="string">&#x27;password&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">and</span> password:</span><br><span class="line">            <span class="comment"># 查看用户名或密码是否匹配，不匹配是空列表，count为0</span></span><br><span class="line">            count = WeiboUser.objects.<span class="built_in">filter</span>(username=username, password=password).count()</span><br><span class="line">            <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> forms.ValidationError(<span class="string">&#x27;用户名或密码错误&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> cleaned_data</span><br></pre></td></tr></table></figure><h2 id="文件上传操作"><a href="#文件上传操作" class="headerlink" title="文件上传操作"></a>文件上传操作</h2><h3 id="文件上传之表单上传"><a href="#文件上传之表单上传" class="headerlink" title="文件上传之表单上传"></a>文件上传之表单上传</h3><p>步骤：</p><ul><li><p>表单设置<code>enctype=&#39;multipart/form-data&#39;</code>属性</p></li><li><p>在视图中通过<code>request.FILES</code>来获取文件对象</p></li><li><p>将文件保存到磁盘</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 保存文件 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;some/file/name.jpg&#x27;</span>,<span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> dest:</span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> f.chunks():</span><br><span class="line">            dest.write(chunk)</span><br></pre></td></tr></table></figure></li></ul><h4 id="通过HTML表单type-’file’标签实现上传"><a href="#通过HTML表单type-’file’标签实现上传" class="headerlink" title="通过HTML表单type=’file’标签实现上传"></a>通过HTML表单type=’file’标签实现上传</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;.&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">enctype</span>=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;avatar&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;上传&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过将文件写入磁盘（略）</p><h4 id="通过Django表单实现上传"><a href="#通过Django表单实现上传" class="headerlink" title="通过Django表单实现上传"></a>通过Django表单实现上传</h4><ol><li>首先新建HTML模板</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ModelForm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    &#123;# 设置enctype=&quot;multipart/form-data&quot;可以上传文件 #&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;.&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; desc &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交数据&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>新建Django模板</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadFile</span>(<span class="params">forms.Form</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 使用表单上传文件 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    remark = forms.CharField(label=<span class="string">&#x27;备注&#x27;</span>, max_length=<span class="number">12</span>)</span><br><span class="line">    avatar = forms.ImageField(label=<span class="string">&#x27;头像&#x27;</span>, max_length=<span class="number">512</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 可以填写验证方法 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ol start="3"><li>添加url，新建视图</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file_form</span>(<span class="params">request</span>):</span></span><br><span class="line">    desc = <span class="string">&#x27;用表单上传文件&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = UploadFile(request.POST, request.FILES)</span><br><span class="line">        file_name = os.path.join(settings.MEDIA_ROOT, <span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># 保存图片,先获取图片，再写入保存</span></span><br><span class="line">            file = request.FILES.get(<span class="string">&#x27;avatar&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> file.chunks():</span><br><span class="line">                    f.write(chunk)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;上传成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = UploadFile()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;model_form.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;desc&#x27;</span>: desc,</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>上传成功后会在指定目录生成test.jpg文件</p><h3 id="文件上传之ORM上传-优先采用"><a href="#文件上传之ORM上传-优先采用" class="headerlink" title="文件上传之ORM上传(优先采用)"></a>文件上传之ORM上传(优先采用)</h3><ul><li>表单设置<code>enctype=&#39;multipart/form-data&#39;</code>属性</li><li>在模型中使用<code>models.ImageField</code></li><li>在表单中使用<code>forms.ImageField</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadFile_ORM</span>(<span class="params">forms.ModelForm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 通过ORM上传文件 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># attrs添加该字段其他属性</span></span><br><span class="line">    content = forms.CharField(label=<span class="string">&#x27;微博内容&#x27;</span>, widget=forms.Textarea(attrs=&#123;</span><br><span class="line">        <span class="string">&#x27;placeholder&#x27;</span>: <span class="string">&#x27;请输入内容&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cols&#x27;</span>: <span class="number">80</span>,</span><br><span class="line">        <span class="string">&#x27;rows&#x27;</span>: <span class="number">10</span></span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = WeiboImg</span><br><span class="line">        fields = [<span class="string">&#x27;img&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        labels = &#123;</span><br><span class="line">            <span class="string">&#x27;img&#x27;</span>: <span class="string">&#x27;上传图片&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span>(<span class="params">self, user, commit=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 改写模型表单的内置方法，该方法是用于将数据存储至数据库 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 先不保存到数据库，先得到对象，接下来对这个对象进行修改，然后再保存</span></span><br><span class="line">        obj = <span class="built_in">super</span>().save(commit)</span><br><span class="line"></span><br><span class="line">        data = self.cleaned_data</span><br><span class="line">        content = data[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">        <span class="comment"># 1.创建微博的记录</span></span><br><span class="line">        weibo = Weibo.objects.create(user=user, content=content)</span><br><span class="line">        <span class="comment"># 2.修改微博关联的关系</span></span><br><span class="line">        obj.weibo = weibo</span><br><span class="line">        obj.save()</span><br><span class="line">        <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>在这里使用的是模型表单WeiboImg，该模型也关联了Weibo模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weibo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; weibo content &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(WeiboUser, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;weibo user&#x27;</span>)</span><br><span class="line">    content = models.CharField(<span class="string">&#x27;weibo content&#x27;</span>, max_length=<span class="number">500</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;create time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    source = models.CharField(<span class="string">&#x27;weibo source&#x27;</span>, max_length=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;weibo_content&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboImg</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; weibo images &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># file will be uploaded to MEDIA_ROOT/weibo</span></span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">&#x27;weibo&#x27;</span>, verbose_name=<span class="string">&#x27;weibo images&#x27;</span>)</span><br><span class="line">    weibo = models.ForeignKey(Weibo, models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;weibo_image&#x27;</span></span><br></pre></td></tr></table></figure><p>视图函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file_ORM</span>(<span class="params">request</span>):</span></span><br><span class="line">    desc = <span class="string">&#x27;用ORM上传图片&#x27;</span></span><br><span class="line">    <span class="comment"># 还没有设置登录，任意指定一个用户</span></span><br><span class="line">    user = WeiboUser.objects.get(pk=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        form = UploadFile_ORM(request.POST,request.FILES)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save(user,<span class="literal">False</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;保存成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form=UploadFile_ORM()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;model_form.html&#x27;</span>,&#123;</span><br><span class="line">        <span class="string">&#x27;desc&#x27;</span>: desc,</span><br><span class="line">        <span class="string">&#x27;form&#x27;</span>: form</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><img src="django-form/image-20200601163517437.png" alt="image-20200601163517437"></p><p>提交后，传入的数据直接写入了数据库</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用浏览器直接访问谷歌学术（超简单的教程）</title>
      <link href="/2020/05/15/visit-scholar-google/"/>
      <url>/2020/05/15/visit-scholar-google/</url>
      
        <content type="html"><![CDATA[<p>众所周知，通过谷歌学术可以方便的查找、引用、下载文献，但是由于审查原因，国内ip无法正常访问。</p><p>这里教大家一种访问谷歌学术的简便方法！通过该方法也可以访问谷歌的其他产品。</p><p>需要用到的工具：<font color='red'>Chromium版的Edge浏览器</font>，一定认准是最新的Chrome内核的Edge浏览器哦</p><p><img src="visit-scholar-google/image-20200515214604760.png" alt="image-20200515214604760"></p><p><em>这里我用的是测试版，直接去官网下载的应该是正式版了</em></p><p><em>新版Edge浏览器因为用的是Chrome内核，所以也可以安装chrome浏览器的扩展文件，而且微软的扩展应用商店访问速度更快，所以非常建议大家用这个浏览器替换Chrome浏览器</em></p><h2 id="下载新版的Edge浏览器"><a href="#下载新版的Edge浏览器" class="headerlink" title="下载新版的Edge浏览器"></a>下载新版的Edge浏览器</h2><p><a href="https://www.microsoft.com/zh-cn/edge">官方下载地址，点我</a></p><h2 id="安装扩展商店的Ghelper"><a href="#安装扩展商店的Ghelper" class="headerlink" title="安装扩展商店的Ghelper"></a>安装扩展商店的Ghelper</h2><p>打开edge浏览器，点击设置及其他，找到扩展</p><p><img src="visit-scholar-google/image-20200515215102090.png" alt="image-20200515215102090"></p><p>在扩展中找到”获取Microsoft Edge扩展”进入扩展插件商城</p><p><img src="visit-scholar-google/image-20200515215623385.png" alt="image-20200515215623385"></p><p>搜索 Ghelper 或 谷歌上网助手 安装</p><p><img src="visit-scholar-google/image-20200515215833067.png" alt="image-20200515215833067"></p><p>安装完毕后，浏览器工具栏中会出现ghelper图表，可以通过扩展打开或关闭该插件。</p><p><img src="visit-scholar-google/image-20200515220502243.png" alt="image-20200515220502243"></p><h2 id="使用10分钟临时邮箱注册Ghelper"><a href="#使用10分钟临时邮箱注册Ghelper" class="headerlink" title="使用10分钟临时邮箱注册Ghelper"></a>使用10分钟临时邮箱注册Ghelper</h2><p>该插件需要使用邮箱注册，且只提供3天免费使用期限。为了能够一直白嫖下去你需要这样做：</p><p><img src="visit-scholar-google/image-20200515220652755.png" alt="image-20200515220652755"></p><ol><li><p>点击立即注册</p></li><li><p>百度搜索10分钟临时邮箱</p><p>这种临时邮箱网站一大堆，随便选一个即可，我用的是<a href="http://www.linshiyouxiang.net/">http://www.linshiyouxiang.net/</a></p><p>这种邮箱使用时间只有10分钟，我们用它来进行注册和验证</p></li><li><p>将生成的邮箱地址复制，到ghelper的注册页面粘贴4次（账号密码都不需要记住），点击注册</p></li></ol><p><img src="visit-scholar-google/image-20200515221042886.png" alt="image-20200515221042886"></p><ol start="4"><li><p>到临时邮箱页面接收邮件，激活账户</p><p><img src="visit-scholar-google/image-20200515221648576.png" alt="image-20200515221648576"></p><p>点击邮件，访问邮件中的激活连接，大功告成！</p><p><img src="visit-scholar-google/image-20200515222056758.png" alt="image-20200515222056758"></p></li><li><p>三天到期之后退出当前账户，重新用临时邮箱注册即可（1分钟即可完成）</p></li></ol><p><font color='yellow' size=5>赶紧去试试吧，Bye</font></p><p><img src="visit-scholar-google/image-20200515223323714.png" alt="image-20200515223323714"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷歌学术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django2.2实战积分商城1——创建ORM模型</title>
      <link href="/2020/05/12/django-mooc-project/"/>
      <url>/2020/05/12/django-mooc-project/</url>
      
        <content type="html"><![CDATA[<p>用Django来实战一个积分商城的项目</p><p>项目准备阶段在我的<a href="%5Bhttps://www.rice-and-bran.site/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/%5D(https://www.rice-and-bran.site/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/)">Django框架入门</a> 文章中，不再赘述</p><h2 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h2><p>设计模型添加系统轮播图和新闻及通知到数据库中，可以从数据库中调取数据后展现到首页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> system <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slider</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 系统轮播图 &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;描述&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    types = models.SmallIntegerField(<span class="string">&#x27;展示位置&#x27;</span>, choices=constants.SLIDER_TYPES_CHOICES,</span><br><span class="line">                                     default=constants.SLIDER_TYPE_INDEX)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;图片&#x27;</span>, upload_to=<span class="string">&#x27;slider&#x27;</span>)</span><br><span class="line">    reorder = models.SmallIntegerField(<span class="string">&#x27;排序&#x27;</span>, default=<span class="number">0</span>, help_text=<span class="string">&#x27;数字越大越靠前&#x27;</span>)</span><br><span class="line">    start_time = models.DateTimeField(<span class="string">&#x27;开始生效时间&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    end_time = models.DateTimeField(<span class="string">&#x27;生效结束时间&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    target_url = models.CharField(<span class="string">&#x27;跳转地址&#x27;</span>, max_length=<span class="number">256</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">&#x27;是否删除&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = models.DateTimeField(<span class="string">&#x27;创建时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_time = models.DateTimeField(<span class="string">&#x27;最后修改时间&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;system_slider&#x27;</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-reorder&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">News</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 新闻及通知 &quot;&quot;&quot;</span></span><br><span class="line">    types = models.SmallIntegerField(<span class="string">&#x27;类型&#x27;</span>, choices=constants.NEWS_TYPES_CHOICES,</span><br><span class="line">                                     default=constants.NEWS_TYPE_NOTICES)</span><br><span class="line">    title = models.CharField(<span class="string">&#x27;标题&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    content = models.TextField(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">    reorder = models.SmallIntegerField(<span class="string">&#x27;排序&#x27;</span>, default=<span class="number">0</span>, help_text=<span class="string">&#x27;数字越大越靠前&#x27;</span>)</span><br><span class="line">    start_time = models.DateTimeField(<span class="string">&#x27;开始生效时间&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    end_time = models.DateTimeField(<span class="string">&#x27;生效结束时间&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">&#x27;是否删除&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_time = models.DateTimeField(<span class="string">&#x27;创建时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_time = models.DateTimeField(<span class="string">&#x27;最后修改时间&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">    view_count = models.IntegerField(<span class="string">&#x27;浏览次数&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    is_top = models.BooleanField(<span class="string">&#x27;是否顶置&#x27;</span>, default=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;system_news&#x27;</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-reorder&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将上面的变量写入constants中，方便后期维护修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#系统模块-轮播图配置</span></span><br><span class="line">SLIDER_TYPE_INDEX = <span class="number">11</span></span><br><span class="line">SLIDER_TYPES_CHOICES = (</span><br><span class="line">(SLIDER_TYPE_INDEX, <span class="string">&#x27;首页&#x27;</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 系统模块-新闻通知</span></span><br><span class="line">NEWS_TYPE_NEWS=<span class="number">11</span></span><br><span class="line">NEWS_TYPE_NOTICES=<span class="number">12</span></span><br><span class="line">NEWS_TYPES_CHOICES = (</span><br><span class="line">(NEWS_TYPE_NEWS, <span class="string">&#x27;新闻&#x27;</span>),</span><br><span class="line">    (NEWS_TYPE_NOTICES, <span class="string">&#x27;通知&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用migrate同步到数据库，并给表中添加数据</p><h2 id="实现首页轮播图和新闻、消息通知"><a href="#实现首页轮播图和新闻、消息通知" class="headerlink" title="实现首页轮播图和新闻、消息通知"></a>实现首页轮播图和新闻、消息通知</h2><p>创建首页视图后，在首页html中添加模板，并通过视图传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!--顶部轮播--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container swiper-banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">              &#123;% for slider in slider_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; slider.target_url &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; slider.img &#125;&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container swiper-news&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">              &#123;% for notice in notice_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../system/templates/news_info.html&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123; notice.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>项目首页的视图中添加轮播图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 首页 &quot;&quot;&quot;</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    <span class="comment"># 查询首页轮播图</span></span><br><span class="line">    slider_list = Slider.objects.<span class="built_in">filter</span>(types=constants.SLIDER_TYPE_INDEX)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查询首页通知通知 顶置 有效 在生效时间内</span></span><br><span class="line">    notice_list = News.objects.<span class="built_in">filter</span>(types=constants.NEWS_TYPE_NOTICES, is_top=<span class="literal">True</span>,</span><br><span class="line">                                      is_valid=<span class="literal">True</span>, start_time__lte=now_time,</span><br><span class="line">                                      end_time__gte=now_time)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;index.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;slider_list&#x27;</span>: slider_list,</span><br><span class="line">        <span class="string">&#x27;notice_list&#x27;</span>: notice_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>在system模块中添加通知列表和详情url ，同步添加视图notice_list 、notice_detail</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;notice_list/&#x27;</span>,views.notice_list,name=<span class="string">&#x27;notice_list&#x27;</span>),</span><br><span class="line">re_path(<span class="string">r&#x27;^notice_detail/(?P&lt;pk&gt;\d+)/$&#x27;</span>,views.notice_detail,name=<span class="string">&#x27;notice_detail&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response, get_object_or_404</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> system <span class="keyword">import</span> constants</span><br><span class="line"><span class="keyword">from</span> system.models <span class="keyword">import</span> News</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notice_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 新闻或通知列表 &quot;&quot;&quot;</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    notice_list = News.objects.<span class="built_in">filter</span>(types=constants.NEWS_TYPE_NOTICES, is_top=<span class="literal">True</span>,</span><br><span class="line">                                      is_valid=<span class="literal">True</span>, start_time__lte=now_time,</span><br><span class="line">                                      end_time__gte=now_time)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;news_list.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;notice_list&#x27;</span>: notice_list</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notice_detail</span>(<span class="params">request, pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 新闻或通知详情 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获得目标新闻或通知，没有的话就返回404</span></span><br><span class="line">    new_obj = get_object_or_404(News, pk=pk, is_valid=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 查看一次详情view_count增加1次</span></span><br><span class="line">    new_obj.view_count = F(<span class="string">&#x27;view_count&#x27;</span>) + <span class="number">1</span></span><br><span class="line">    new_obj.save()</span><br><span class="line">    <span class="comment"># 刷新 重新从数据库取出数据</span></span><br><span class="line">    new_obj.refresh_from_db()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;news_info.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;new_obj&#x27;</span>: new_obj</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>从项目url中引入system模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;sys/&#x27;</span>,include((<span class="string">&#x27;system.urls&#x27;</span>,<span class="string">&#x27;system&#x27;</span>),namespace=<span class="string">&#x27;sys&#x27;</span>)),</span><br></pre></td></tr></table></figure><p>修改html，使得index、news_list、news_detail的相关html页面能实现互相跳转，并继承自base.html，简化页面代码</p><p>继承base.html的过程及方法不再赘述，可查看我的django入门文章中的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &#123;# index.html,实现首页显示通知，并点击跳转和查看更多 #&#125;</span><br><span class="line"><span class="comment">&lt;!--新闻切换--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wy-ind-news&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;news-icon-laba&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container swiper-news&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">              &#123;% for notice in notice_list %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span></span><br><span class="line">                &#123;# url跳转 &#x27;namespace:name&#x27; 参数 #&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;sys:notice_detail&#x27; notice.pk %&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123; notice.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;sys:notice_list&#x27; %&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;newsmore&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;news-icon-more&quot;</span>&gt;</span>&lt;/i</span><br><span class="line">        &gt;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;# news_list.html #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-cells wy-news-list&quot;</span>&gt;</span></span><br><span class="line">          &#123;% for notice in notice_list %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;weui-cell weui-cell_access&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;sys:notice_detail&#x27; notice.pk %&#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-cell__bd&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; notice.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-cell__ft&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;# news_info.html #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;weui-article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; new_obj.title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;wy-news-time&quot;</span>&gt;</span>&#123;&#123; new_obj.created_time|date &#125;&#125; </span><br><span class="line">            浏览次数：&#123;&#123; new_obj.view_count &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;wy-news-info&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;&#123; new_obj.content &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;upload/ban1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;upload/ban2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分页处理消息列表"><a href="#分页处理消息列表" class="headerlink" title="分页处理消息列表"></a>分页处理消息列表</h2><p>提前插入多条数据准备</p><p><strong>使用django模型 控制台插入mysql日期数据时候报错：RuntimeWarning: DateTimeField News.start_time received a naive datetime (xxx) while time zone support is active.</strong></p><p>错误原因：和UTC（世界标准时间）有关。插入的数据包含日期类型</p><p>解决方法：…/settings.py 文件中设置：USE_TZ = False</p><p>在system视图中补充notice_list 使用分页器分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notice_list</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 查看新闻列表 &quot;&quot;&quot;</span></span><br><span class="line">    now_time = datetime.now()</span><br><span class="line">    notice_list = News.objects.<span class="built_in">filter</span>(types=constants.NEWS_TYPE_NOTICES,</span><br><span class="line">                                      is_valid=<span class="literal">True</span>, start_time__lte=now_time,</span><br><span class="line">                                      end_time__gte=now_time)</span><br><span class="line">    page = request.GET.get(<span class="string">&#x27;page&#x27;</span>)</span><br><span class="line">    page_size = <span class="number">15</span></span><br><span class="line">    pages = Paginator(notice_list, page_size)</span><br><span class="line">    notice_data = pages.page(page)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;news_list.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;notice_data&#x27;</span>: notice_data</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>修改news_list.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-cells wy-news-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.object_list当前数据页列表--&gt;</span></span><br><span class="line">    &#123;% for notice in notice_data.object_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;weui-cell weui-cell_access&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;sys:notice_detail&#x27; notice.pk %&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-cell__bd&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; notice.title &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html添加分页按钮，加入if标签判断，并使用jQueryweui修饰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--从官网copy组件然后添加内容即可--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;weui-footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;weui-footer__text&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--.paginator.num_pages可以查看总的分页数--&gt;</span></span><br><span class="line">    当前是第&#123;&#123; notice_data.number &#125;&#125;页，共&#123;&#123; notice_data.paginator.num_pages &#125;&#125;页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--判断是否存在上一页，添加上一页的跳转链接--&gt;</span></span><br><span class="line">    &#123;% if notice_data.has_previous %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;weui-footer__link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;sys:notice_list&#x27; %&#125;?page=&#123;&#123; notice_data.previous_page_number &#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;% if notice_data.has_next %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;weui-footer__link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;sys:notice_list&#x27; %&#125;?page=&#123;&#123; notice_data.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="against-Procrastination/image-20200515160423314.png" alt="image-20200515160423314"></p><h2 id="用户基本信息的实现"><a href="#用户基本信息的实现" class="headerlink" title="用户基本信息的实现"></a>用户基本信息的实现</h2><h3 id="设计模型-1"><a href="#设计模型-1" class="headerlink" title="设计模型"></a>设计模型</h3><p><img src="django-mooc-project/image-20200515161705432.png" alt="image-20200515161705432"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> accounts <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUtils</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;create_time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">&#x27;update_time&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 按更新时间排序，-号表示降序</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-upated_at&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户基本信息表 &quot;&quot;&quot;</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">256</span>)</span><br><span class="line">    avatar = models.ImageField(upload_to=<span class="string">&#x27;avatar&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    integral = models.SmallIntegerField(<span class="string">&#x27;用户积分&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    nickname = models.CharField(max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    level = models.SmallIntegerField(<span class="string">&#x27;用户等级&#x27;</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;accounts_user&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProfile</span>(<span class="params">CommonUtils</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户详细信息表 &quot;&quot;&quot;</span></span><br><span class="line">    user = models.OneToOneField(User, models.CASCADE)</span><br><span class="line">    real_name = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    email = models.EmailField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    is_email_valid = models.BooleanField(<span class="string">&#x27;邮箱是否已经通过验证&#x27;</span>, default=<span class="literal">False</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    phone_num = models.CharField(max_length=<span class="number">13</span>)</span><br><span class="line">    sex = models.SmallIntegerField(default=<span class="number">1</span>, choices=constants.SEX_CHOICES)</span><br><span class="line">    age = models.SmallIntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;accounts_user_profile&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAddress</span>(<span class="params">CommonUtils</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户收货地址表 &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE)</span><br><span class="line">    province = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    city = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    area = models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;详细地址&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    receiver = models.CharField(<span class="string">&#x27;收件人&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">&#x27;地址是否有效&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line">    is_default = models.BooleanField(<span class="string">&#x27;是否默认地址&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;accounts_user_address&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginRecord</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户登录历史 &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE)</span><br><span class="line">    ip = models.CharField(<span class="string">&#x27;ip地址&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    address = models.CharField(<span class="string">&#x27;所在地&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    source = models.CharField(<span class="string">&#x27;登录来源&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    login_time = models.DateTimeField(<span class="string">&#x27;登录时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;accounts_user_login&#x27;</span></span><br><span class="line">        ordering = [<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordChangeLog</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户更改密码记录 &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE)</span><br><span class="line">    new_pass = models.CharField(<span class="string">&#x27;新密码&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    old_pass = models.CharField(<span class="string">&#x27;旧密码&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    change_time = models.DateTimeField(<span class="string">&#x27;修改时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;accounts_password_change_log&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="商品的基本信息"><a href="#商品的基本信息" class="headerlink" title="商品的基本信息"></a>商品的基本信息</h2><p><img src="django-mooc-project/image-20200515183136821.png" alt="image-20200515183136821"></p><h3 id="related-name-related-query-name区别"><a href="#related-name-related-query-name区别" class="headerlink" title="related_name/related_query_name区别"></a>related_name/related_query_name区别</h3><blockquote><p>看表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">   name = models.CharField(verbose_name=<span class="string">&#x27;姓名&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line">   age = models.IntegerField(verbose_name=<span class="string">&#x27;年龄&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">   name = models.CharField(verbose_name=<span class="string">&#x27;书名&#x27;</span>, max_length=<span class="number">100</span>)</span><br><span class="line">   author = models.ForeignKey(Author, verbose_name=<span class="string">&#x27;作者&#x27;</span>, related_name=<span class="string">&#x27;bs&#x27;</span>, related_query_name=<span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>那该怎么查询呢？？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;Author.objects.<span class="built_in">filter</span>(b__name=<span class="string">&#x27;learn_python&#x27;</span>)</span><br><span class="line">&gt;<span class="comment">#通过related_query_name查询书名为learn_python的作者</span></span><br><span class="line"></span><br><span class="line">&gt;author = Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">&gt;author.bs.<span class="built_in">all</span>()</span><br><span class="line">&gt;通过related_name来查询该作者所有的书</span><br></pre></td></tr></table></figure><p>看懂例子自然就明白这两个的区别的用法了<br>————————————————<br>版权声明：本文为CSDN博主「木木木可可可」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_45154837/article/details/9989299">https://blog.csdn.net/weixin_45154837/article/details/9989299</a></p></blockquote><p>首先我们要设计商品表、商品分类表、标签表以及评论表。其中商品的图片需要关联商品，也要关联店铺、关联评论，这样图片需要单独使用一张表，且用到复合关联，这张表我们放在system模块中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># system 模块中添加该表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageFile</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 图片表 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 给图片文件夹进行分割 2020/5</span></span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;图片&#x27;</span>, upload_to=<span class="string">&#x27;%Y%m/images/&#x27;</span>)</span><br><span class="line">    summary = models.CharField(<span class="string">&#x27;图片名称&#x27;</span>, max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 复合关联</span></span><br><span class="line">    content_type = models.ForeignKey(ContentType, models.CASCADE)</span><br><span class="line">    object_id = models.PositiveIntegerField()</span><br><span class="line">    content_object = GenericForeignKey(<span class="string">&#x27;content_type&#x27;</span>, <span class="string">&#x27;object_id&#x27;</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">&#x27;是否有效&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;create_time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">&#x27;update_time&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;system_images&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mall模块中</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericRelation</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> accounts.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> system.models <span class="keyword">import</span> ImageFile</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUtil</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 公共类 &quot;&quot;&quot;</span></span><br><span class="line">    uid = models.UUIDField(<span class="string">&#x27;商品/分类/标签等的uid&#x27;</span>, default=uuid.uuid4, editable=<span class="literal">False</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">&#x27;是否有效&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;create_time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">&#x27;update_time&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">    reorder = models.SmallIntegerField(<span class="string">&#x27;排序&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Classify</span>(<span class="params">CommonUtil</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品分类表 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 分类下面的子分类，进行外键关联</span></span><br><span class="line">    parent = models.ForeignKey(<span class="string">&#x27;self&#x27;</span>, models.CASCADE, related_name=<span class="string">&#x27;children&#x27;</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;分类主图&#x27;</span>, upload_to=<span class="string">&#x27;classify&#x27;</span>)</span><br><span class="line">    code = models.CharField(<span class="string">&#x27;编码&#x27;</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    name = models.CharField(<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">12</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;描述&#x27;</span>, max_length=<span class="number">64</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;mall_classify&#x27;</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-reorder&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span>(<span class="params">CommonUtil</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品标签表 &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">12</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;分类主图&#x27;</span>, upload_to=<span class="string">&#x27;tag&#x27;</span>)</span><br><span class="line">    code = models.CharField(<span class="string">&#x27;编码&#x27;</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;mall_tag&#x27;</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-reorder&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>(<span class="params">CommonUtil</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品基本信息表 &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    desc = models.CharField(<span class="string">&#x27;商品描述&#x27;</span>, max_length=<span class="number">128</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    content = models.TextField(<span class="string">&#x27;商品描述&#x27;</span>)</span><br><span class="line">    types = models.SmallIntegerField(<span class="string">&#x27;商品类型&#x27;</span>, choices=constants.PRODUCT_TYPE_CHOICES,</span><br><span class="line">                                     default=constants.PRODUCT_TYPE_ACTUAL)</span><br><span class="line">    price = models.FloatField(<span class="string">&#x27;兑换价格&#x27;</span>)</span><br><span class="line">    origin_price = models.FloatField(<span class="string">&#x27;商品原价&#x27;</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;商品主图&#x27;</span>, upload_to=<span class="string">&#x27;product&#x27;</span>)</span><br><span class="line">    buy_link = models.CharField(<span class="string">&#x27;购买链接&#x27;</span>, max_length=<span class="number">256</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    status = models.SmallIntegerField(<span class="string">&#x27;商品状态&#x27;</span>, choices=constants.PRODUCT_STATUS_CHOICES,</span><br><span class="line">                                      default=constants.PRODUCT_STATUS_OFF)</span><br><span class="line">    storage = models.IntegerField(<span class="string">&#x27;库存&#x27;</span>)</span><br><span class="line">    remain_storage = models.IntegerField(<span class="string">&#x27;剩余库存&#x27;</span>)</span><br><span class="line">    view_count = models.IntegerField(<span class="string">&#x27;浏览次数&#x27;</span>)</span><br><span class="line">    score = models.FloatField(<span class="string">&#x27;商品评分&#x27;</span>, default=<span class="number">10.0</span>)</span><br><span class="line">    <span class="comment"># 关联Tag Classify</span></span><br><span class="line">    tags = models.ManyToManyField(Tag, verbose_name=<span class="string">&#x27;标签&#x27;</span>, related_name=<span class="string">&#x27;tags&#x27;</span>)</span><br><span class="line">    classes = models.ManyToManyField(Classify, verbose_name=<span class="string">&#x27;商品分类&#x27;</span>, related_name=<span class="string">&#x27;classify&#x27;</span>)</span><br><span class="line">    <span class="comment"># 方向关联system中的图片</span></span><br><span class="line">    banners = GenericRelation(ImageFile, verbose_name=<span class="string">&#x27;banner图&#x27;</span>, related_query_name=<span class="string">&#x27;banners&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;mall_product&#x27;</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-reorder&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comments</span>(<span class="params">CommonUtil</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品评论表 &quot;&quot;&quot;</span></span><br><span class="line">    product = models.ForeignKey(Product, models.CASCADE)</span><br><span class="line">    <span class="comment"># on_delete=models.PROTECT用户删除后，评论不删除</span></span><br><span class="line">    user = models.OneToOneField(User, models.PROTECT)</span><br><span class="line">    content = models.TextField(<span class="string">&#x27;评论内容&#x27;</span>)</span><br><span class="line">    score = models.FloatField(<span class="string">&#x27;用户评分&#x27;</span>, choices=constants.COMMENTS_SCORE)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;评论图片&#x27;</span>, upload_to=<span class="string">&#x27;comments&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;mall_comments&#x27;</span></span><br><span class="line">        <span class="comment"># 先按排序降序，再按发表时间排序</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-reorder&#x27;</span>, <span class="string">&#x27;-created_at&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="订单中心及购物车"><a href="#订单中心及购物车" class="headerlink" title="订单中心及购物车"></a>订单中心及购物车</h2><p>个人中心模型</p><p><img src="django-mooc-project/image-20200517090713181.png" alt="image-20200517090713181"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericRelation</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> accounts.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> mall.models <span class="keyword">import</span> Product</span><br><span class="line"><span class="keyword">from</span> system.models <span class="keyword">import</span> ImageFile</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 用户订单 &quot;&quot;&quot;</span></span><br><span class="line">    sn = models.CharField(<span class="string">&#x27;订单编号&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    user = models.ForeignKey(User, models.PROTECT, related_name=<span class="string">&#x27;orders&#x27;</span>)</span><br><span class="line">    buy_count = models.IntegerField(<span class="string">&#x27;购买数量&#x27;</span>, default=<span class="number">1</span>)</span><br><span class="line">    buy_amount = models.FloatField(<span class="string">&#x27;总价&#x27;</span>)</span><br><span class="line">    product = models.ForeignKey(Product, models.PROTECT)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;订单提交时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 商品快照</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    price = models.FloatField(<span class="string">&#x27;兑换价格&#x27;</span>)</span><br><span class="line">    origin_price = models.FloatField(<span class="string">&#x27;商品原价&#x27;</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;商品主图&#x27;</span>)</span><br><span class="line">    <span class="comment"># 收货人信息</span></span><br><span class="line">    to_user = models.CharField(<span class="string">&#x27;收货人&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    to_area = models.CharField(<span class="string">&#x27;省市区&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    to_address = models.CharField(<span class="string">&#x27;详细地址&#x27;</span>, max_length=<span class="number">128</span>)</span><br><span class="line">    to_phone = models.CharField(<span class="string">&#x27;手机号码&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">    remark = models.CharField(<span class="string">&#x27;备注信息&#x27;</span>, max_length=<span class="number">256</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 快递信息</span></span><br><span class="line">    express_name = models.CharField(<span class="string">&#x27;快递&#x27;</span>, max_length=<span class="number">32</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line">    status = models.SmallIntegerField(<span class="string">&#x27;订单状态&#x27;</span>, choices=constants.ORDER_STATUS_CHOICES,</span><br><span class="line">                                      default=constants.ORDER_STATUS_SUBMIT)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;mine_order&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 购物车模型 &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(User, models.CASCADE, related_name=<span class="string">&#x27;carts&#x27;</span>)</span><br><span class="line">    product = models.ForeignKey(Product, models.CASCADE)</span><br><span class="line">    <span class="comment"># 与订单关联，提交订单时订单可以获取到购物车的商品</span></span><br><span class="line">    order = models.ForeignKey(Order, models.CASCADE, verbose_name=<span class="string">&#x27;订单&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 商品快照</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;商品名称&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    price = models.FloatField(<span class="string">&#x27;兑换价格&#x27;</span>)</span><br><span class="line">    origin_price = models.FloatField(<span class="string">&#x27;商品原价&#x27;</span>)</span><br><span class="line">    img = models.ImageField(<span class="string">&#x27;商品主图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    count = models.PositiveIntegerField(<span class="string">&#x27;购买数量&#x27;</span>)</span><br><span class="line">    amount = models.FloatField(<span class="string">&#x27;总额&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;创建时间&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">&#x27;修改时间&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    status = models.SmallIntegerField(<span class="string">&#x27;订单状态&#x27;</span>, choices=constants.ORDER_STATUS_CHOICES,</span><br><span class="line">                                      default=constants.ORDER_STATUS_INIT)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;mine_cart&#x27;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 因为需要关联订单，所以将评论移动至了mine表中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comments</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品评论表 &quot;&quot;&quot;</span></span><br><span class="line">    product = models.ForeignKey(Product, models.CASCADE, related_name=<span class="string">&#x27;comments&#x27;</span>)</span><br><span class="line">    <span class="comment"># on_delete=models.PROTECT用户删除后，评论不删除</span></span><br><span class="line">    user = models.OneToOneField(User, models.PROTECT, related_name=<span class="string">&#x27;comments&#x27;</span>)</span><br><span class="line">    oder = models.ForeignKey(Order, models.PROTECT, related_name=<span class="string">&#x27;comments&#x27;</span>, verbose_name=<span class="string">&#x27;订单&#x27;</span>)</span><br><span class="line">    content = models.TextField(<span class="string">&#x27;评论内容&#x27;</span>)</span><br><span class="line">    score = models.FloatField(<span class="string">&#x27;商品评分&#x27;</span>, choices=constants.COMMENTS_SCORE)</span><br><span class="line">    imgs = GenericRelation(ImageFile, verbose_name=<span class="string">&#x27;评价晒图&#x27;</span>, related_query_name=<span class="string">&#x27;imgs&#x27;</span>)</span><br><span class="line">    is_anonymous = models.BooleanField(<span class="string">&#x27;是否匿名&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line">    uid = models.UUIDField(<span class="string">&#x27;商品/分类/标签等的uid&#x27;</span>, default=uuid.uuid4, editable=<span class="literal">False</span>)</span><br><span class="line">    is_valid = models.BooleanField(<span class="string">&#x27;是否有效&#x27;</span>, default=<span class="literal">True</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;create_time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">&#x27;update_time&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line">    reorder = models.SmallIntegerField(<span class="string">&#x27;排序&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;mine_product_comments&#x27;</span></span><br><span class="line">        <span class="comment"># 先按排序降序，再按发表时间排序</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-reorder&#x27;</span>, <span class="string">&#x27;-created_at&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终的数据表</p><p><img src="django-mooc-project/image-20200517110542810.png" alt="image-20200517110542810"></p>]]></content>
      
      
      <categories>
          
          <category> 实战案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何应对拖延症</title>
      <link href="/2020/05/11/against-Procrastination/"/>
      <url>/2020/05/11/against-Procrastination/</url>
      
        <content type="html"><![CDATA[<p>一直以来我都有比较严重的拖延症，毫无疑问拖延症一直影响着学习、工作以及生活。对我个人而言，拖延症主要原因还是在于想逃避相对完成难度较大的任务，我会倾向于挑简单的事情先完成，导致难度大但是重要的事情一拖再拖，最后造成严重后果。摘录一个心理测试结果用来提醒自己，对抗拖延症！</p><h2 id="如何应对拖延？"><a href="#如何应对拖延？" class="headerlink" title="如何应对拖延？"></a><font color='red'>如何应对拖延？</font></h2><p>在解决拖延前需要做的三件事：</p><p>1、停止指责自己</p><p>当拖延出现时，不必急于指责自己，你不妨觉察一下，是什么原因使你抗拒做事？</p><p>拖延很多时候是难以依靠意识控制的，因为它可能涉及你内在的冲突、防御或习惯化。所以一味地要求自己克服拖延可能会引发焦虑或自我否定，从而陷入越想克服拖延、越焦虑、越焦虑越难以开启行动的恶性循环。</p><p>停止自我批评和指责，思考拖延对于你的意义和原因，你才能找到解决的办法。</p><p>2、理解你拖延的意义</p><p>任何行为的发生都是有意义的，拖延也是如此，它的背后可能暗含着多种提示信号，比如提示着内心的冲突，提示着未被觉察的焦虑和恐惧，提示着暂时无法接受的现实。或者，它在提示你，比起计划中要做的事，你潜意识中有更渴望的事情想做。</p><p>在克服拖延之前，不妨试着思考拖延在提示你什么，这可以帮助你获得更多有价值的信息，从而做出更适合你的判断与决策。</p><p>3、觉察拖延带给你怎样的好处？</p><p>仔细想想，拖延一定在某种程度上给你带来了一些“好处”。</p><p>这些好处是什么呢？比如：</p><p>间接地表达了你不被允许的感受：比如我不愿意被控制、我用拖延来表达反抗等等；</p><p>暂时地逃避了面对现实的痛苦感；</p><p>使你不必面对失望感等等；</p><p>拖延往往只是人们内在冲突的一种表达。去理解你内在的冲突是什么，你才能找到应对的办法。</p><p><strong>下面的七条建议是帮助你应对拖延的小技巧：</strong></p><p>1、将事件与自尊和自我价值区分开</p><p>当我们迟迟无法开始做某件事，往往是赋予了这件事不同寻常的意义。此时，事件已经不单单是它本身，它还可能涉及到个人的自尊、自我价值、欲望等等。</p><p>比如，一个演员拖延应该参加的排练，可能是害怕失败减损自己的自尊感；</p><p>一个完美主义的画家，迟迟无法动笔，因为一旦落笔，就会失去“完美感”；</p><p>一个孩子担负了家庭太多的预期，担忧自己的表现令人失望，于是总是回避去行动等等；</p><p>一件事情结果的好坏和一个人的自我价值是不同的。区分它们两个，能够使你更专注于当下的事件。</p><p>2、了解自己的能力，选择有适当挑战的任务</p><p>在面对过度超越自己能力的任务时，任何人都会选择拖延或逃跑。挑战过大时，容易减损自己的信心，对自我过于苛责。</p><p>而当挑战适度，人们更愿意迎接挑战，并从过程中获得成长和快感。</p><p>3、将任务拆分成更容易的目标</p><p>当你感到要做的事情非常多，压力和焦虑的感觉可能会让你想要回避所有的任务。</p><p>因此，每当面临一项繁重的任务而感到压力时，你可以试着将任务分成几个小部分，将注意力集中在单独的小目标上。当你选定一个小目标而不去看剩下的所有事情，你会有更大的动力去完成它。</p><p>4、训练大脑，提升自控力和意志力</p><p>据科学研究表明，人的大脑具有极强的可塑性。大脑能够将个体的经验转化为自身的能力。我们的意志力也是可以锻炼的。</p><p>研究发现，在小事上持续自控可以提高整体的意志力。你可以尝试从日常生活中的小事做起，比如：每天早上吃早餐、一周锻炼两次身体等等。</p><p>5、保护自己的意志力资源</p><p>人的意志力资源是有限的。这意味着，我们不可能同时做好所有事情。所以，在行动前，不妨先将事情区分个轻重缓急，对于那些不太重要的事，可以降低对自己的要求，避免意志力资源过分消耗。</p><p>6、坚持体育运动</p><p>心理学家认为，理解自己的情绪状态，和良好的身体状态，都有助于帮助个体面对和完成被拖延的任务。在行为主义对拖延的干预中，也提到了体育运动的重要性。坚持运动可以改善个体的情绪状态，对于抑郁和焦虑也有一定的改善，同时还可以提升个体的自信心。这可以在一定程度上缓解拖延。</p><p>7、接纳自己的局限</p><p>拖延的本质是我们延迟去面对某件事，这背后往往蕴含着我们不想面对的现实。因为一旦开始行动，现实就更加难以掩饰。</p><p>这些现实可能包括：</p><p>1.我们只是一个普通人。</p><p>2.我们无法不犯错。</p><p>3.我们没办法每次都成功。</p><p>4.总有些事情是我们不了解的。</p><p>5.你不可能让每一件事都非常出色。</p><p>6.努力不一定会有回报等等。</p><p>这意味着，只要做事和行动，我们就可能要面对理想化的破灭，不可避免要去面对我们自己的一些局限和痛苦感。</p><p>但我们都是有局限的普通人，接纳自我、做最小的尝试，才是最有力量的行动。请你将每一次的拖延都看做自我探索的机会，理解它，并学习和它相处。</p><p>如果拖延已经开始影响到你的工作和生活，并伴随着情绪上的困扰，比如抑郁、焦虑等等；建议寻求专业心理咨询的帮助。心理咨询师会帮助你探索和理解你拖延的意义，帮助你面对你内在的冲突和困境。</p><p>最后，祝你好运！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（提升篇）</title>
      <link href="/2020/05/11/Linux2/"/>
      <url>/2020/05/11/Linux2/</url>
      
        <content type="html"><![CDATA[<h2 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h2><p>该篇主要内容是线程同步和进程同步的方法</p><p>有关进程同步的内容可以查看 <a href="%5Bhttps://www.rice-and-bran.site/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%5D(https://www.rice-and-bran.site/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5)">操作系统（基础篇）进程同步</a></p><blockquote><p><strong>临界资源</strong>：临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。当有进程在使用临界资源时，其他进程必须依据操作系统额同步机制等待占用进程释放该共享资源才可重新竞争使用资源。</p></blockquote><div class="mermaid">graph TD;A[保护临界资源]--&gt;B[线程间同步]A--&gt;C[进程间同步]B--&gt;D[互斥量]B--&gt;E[读写锁]B--&gt;F[自旋锁]B--&gt;G[条件变量]C--&gt;H[共享内存]C--&gt;I[域套接字]C--&gt;J[...]</div><p>其他内容：用户态与内核态、上下文切换、协程、编写性能良好的程序指南</p><h2 id="线程同步之互斥量"><a href="#线程同步之互斥量" class="headerlink" title="线程同步之互斥量"></a>线程同步之互斥量</h2><p>比如有两个线程的指令交叉执行，而互斥量可以保证先后执行，保证了线程执行的<font color='red'>原子性</font>。</p><p>原子性是指一系列操作<font color='red'>不可被中断</font>的特性。这一系列操作要么全部执行完成，要么全部没有执行，不存在部分执行部分未执行的情况。</p><ul><li>互斥量是最简单的线程同步的方法</li><li>互斥量（互斥锁），处于两态之一的变量：解锁和加锁。</li><li>两个状态可以保证资源访问的串行</li><li>操作系统直接提供了互斥量的API，开发者可以直接使用API完成资源的加锁、解锁操作。c语言的API: pthread_mutex_t</li></ul><h2 id="线程同步之自旋锁"><a href="#线程同步之自旋锁" class="headerlink" title="线程同步之自旋锁"></a>线程同步之自旋锁</h2><p>原理和互斥量类似。</p><ul><li>自旋锁也是一种多线程同步的变量</li><li>使用自旋锁的线程会反复检查锁变量是否可用</li><li>自旋锁不会让出CPU，也是一种<font color='red'>忙等待</font>状态（这是与互斥量最大的区别）</li></ul><p>自旋锁避免了进程或线程上下文切换的开销，操作系统内部很多地方使用的是自旋锁，自旋锁不适合在单核CPU使用。</p><p>c语言的API：pthread_spinlock_t</p><h2 id="线程同步之读写锁"><a href="#线程同步之读写锁" class="headerlink" title="线程同步之读写锁"></a>线程同步之读写锁</h2><p>临界资源多读少写，读取的时候并不会改变临界资源的值。所以是否存在效率更高的同步方法？读写锁对该情况有速率提升的效果</p><ul><li>读写锁是一种特殊的自旋锁</li><li>允许多个读者同时访问资源以提高读性能</li><li>对于写操作则是互斥的</li></ul><p>API：pthread_rwlock_t，pthread_rwlock_rdlock(读锁)，pthread_rwlock_wrlock(写锁)</p><h2 id="线程同步之条件变量"><a href="#线程同步之条件变量" class="headerlink" title="线程同步之条件变量"></a>线程同步之条件变量</h2><ul><li>条件变量是一种相对复杂的线程同步方法</li><li>条件变量允许线程睡眠，直到满足某种条件</li><li>当满足条件时，可以向该线程发出信号，通知唤醒</li></ul><p>API：pthread_cond_t、pthread_cond_wait(等待条件满足)、pthread_cond_signal(等待被唤醒)</p><h2 id="线程同步方法总结："><a href="#线程同步方法总结：" class="headerlink" title="线程同步方法总结："></a>线程同步方法总结：</h2><p><img src="Linux2/image-20200602153456601.png" alt="image-20200602153456601"></p><p><img src="Linux2/image-20200602153549973.png" alt="image-20200602153549973"></p><p>线程同步方法对比：</p><table><thead><tr><th>同步方法</th><th>描述</th></tr></thead><tbody><tr><td>互斥锁</td><td>最简单的一种线程同步方法，会阻塞线程</td></tr><tr><td>自旋锁</td><td>避免切换的一种线程同步方法，属于“忙等待”</td></tr><tr><td>读写锁</td><td>为“读多写少”的资源设计的线程同步方法，可以显著提高性能</td></tr><tr><td>条件变量</td><td>相对复杂的一种线程同步方式，有更灵活的使用场景</td></tr></tbody></table><h2 id="使用fork系统调用创建进程"><a href="#使用fork系统调用创建进程" class="headerlink" title="使用fork系统调用创建进程"></a>使用fork系统调用创建进程</h2><ul><li><p>fork系统调用是用于创建进程的</p></li><li><p>fork创建的进程初始化状态和父进程一样</p></li><li><p>系统会为fork的进程分配新的资源</p></li><li><p>fork系统调用无参数</p></li><li><p>fork会<font color='red'>返回两次</font>，分别返回子进程id和0</p><p>两次返回分别是父进程与子进程返回的</p></li><li><p>返回子进程id的是父进程，返回0的是子进程</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1000</span>;</span><br><span class="line">    pid = fork();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;这是一个子进程。&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;num in son process:&#x27;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;num in son process:&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">0.3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;这是一个父进程。&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;子进程id：&quot;</span> &lt;&lt; pid &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;num in parent process:&#x27;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;num in parent process:&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">0.3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pid &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;创建进程失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们新建一个c++文件演示fork系统调用。通过进程id判断父子进程，分别给他们做加减操作。父进程会返回子进程id，同时父子进程返回的初始数字都为1000，说明<font color='red'>子进程的初始化状态和父进程一致</font></p><p><img src="Linux2/image-20200630180818516.png" alt="image-20200630180818516"></p><p>另外编译c++文件时候需要先安装c++编译器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 安装c的编译器</span><br><span class="line">yum install gcc</span><br><span class="line">// 安装c++的编译器</span><br><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure><p>将fork.cpp文件转化为可以执行文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ fork.cpp</span><br></pre></td></tr></table></figure><p>然后就会自动生成可以执行文件，通过<code>./a.out</code>执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">import</span> os</span><br><span class="line"> <span class="number">2</span> <span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span> pid = os.fork()</span><br><span class="line"> <span class="number">5</span> </span><br><span class="line"> <span class="number">6</span> <span class="keyword">if</span> pid &lt; <span class="number">0</span>:</span><br><span class="line"> <span class="number">7</span>   <span class="built_in">print</span>(<span class="string">&quot;Create process failed&quot;</span>)</span><br><span class="line"> <span class="number">8</span> <span class="keyword">elif</span> pid == <span class="number">0</span>:</span><br><span class="line"> <span class="number">9</span>   os._exit(<span class="number">0</span>)</span><br><span class="line"><span class="number">10</span>   sleep(<span class="number">3</span>)</span><br><span class="line"><span class="number">11</span>   <span class="built_in">print</span>(<span class="string">&quot;New process&quot;</span>)</span><br><span class="line"><span class="number">12</span> <span class="keyword">else</span>:</span><br><span class="line"><span class="number">13</span>   sleep(<span class="number">5</span>)</span><br><span class="line"><span class="number">14</span>   <span class="built_in">print</span>(<span class="string">&quot;Old process&quot;</span>)</span><br><span class="line"><span class="number">15</span> </span><br><span class="line"><span class="number">16</span> <span class="built_in">print</span>(<span class="string">&quot;Fork test end&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="进程同步之共享内存"><a href="#进程同步之共享内存" class="headerlink" title="进程同步之共享内存"></a>进程同步之共享内存</h2><p><img src="Linux2/image-20200630182458506.png" alt="image-20200630182458506"></p><p>进程都是通过页表与物理内存空间进行映射的。在某种程度上，多进程是共同使用物理内存的。</p><p>由于操作系统的进程管理，进程间的内存空间是独立的。</p><p>所以<strong>进程默认是不能访问进程空间之外的内存空间的</strong></p><p>而通过<strong>共享内存</strong>，两个进程可以通过页表映射到同一个内存空间中，被两者读写。</p><p>共享内存：</p><ul><li>共享存储允许不相关的进程访问同一片物理内存</li><li>共享内存是<font color='red'>两个进程之间共享和传递数据最快的方式</font></li><li>共享内存<font color='red'>未提供同步机制</font>，需要借助其他机制管理访问</li><li>共享内存是高性能后台开发中最常用的进程同步方式</li></ul><p>共享内存使用步骤：</p><ol><li>申请共享内存</li><li>连接到进程空间</li><li>使用共享内存</li><li>脱离进程空间&amp;删除</li></ol><p>举例：服务器与客户端通过共享内存来进行通信</p><p>common.h定义共享内存的数据结构。这个例子里通过该结构体进行同步数据</p><p>common.h：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __COMMON_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __COMMON_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEXT_LEN 2048</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 共享内存的数据结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ShmEntry</span>&#123;</span></span><br><span class="line"><span class="comment">// 是否可以读取共享内存，用于进程间同步</span></span><br><span class="line"><span class="keyword">bool</span> can_read;</span><br><span class="line"><span class="comment">// 共享内存信息</span></span><br><span class="line"><span class="keyword">char</span> msg[<span class="number">2048</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>server.cpp：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 共享内存的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ShmEntry</span> *<span class="title">entry</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.申请共享内存</span></span><br><span class="line"><span class="keyword">int</span> shmid = <span class="built_in">shmget</span>((<span class="keyword">key_t</span>)<span class="number">1111</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct ShmEntry), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line"><span class="keyword">if</span> (shmid == <span class="number">-1</span>)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Create share memory error!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.连接到当前进程空间/使用共享内存</span></span><br><span class="line">entry = (ShmEntry*)<span class="built_in">shmat</span>(shmid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">entry-&gt;can_read = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (entry-&gt;can_read == <span class="number">1</span>)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Received message: &quot;</span> &lt;&lt; entry-&gt;msg &lt;&lt; std::endl;</span><br><span class="line">entry-&gt;can_read = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Entry can not read. Sleep ls.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 脱离进程空间</span></span><br><span class="line"><span class="built_in">shmdt</span>(entry);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 删除共享内存</span></span><br><span class="line"><span class="built_in">shmctl</span>(shmid, IPC_RMID, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.cpp：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ShmEntry</span> *<span class="title">entry</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 申请共享内存</span></span><br><span class="line"><span class="keyword">int</span> shmid = <span class="built_in">shmget</span>((<span class="keyword">key_t</span>)<span class="number">1111</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct ShmEntry), <span class="number">0666</span>|IPC_CREAT);</span><br><span class="line"><span class="keyword">if</span> (shmid == <span class="number">-1</span>)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Create share memory error!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 连接到当前进程空间/使用共享内存</span></span><br><span class="line">entry = (ShmEntry*)<span class="built_in">shmat</span>(shmid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">entry-&gt;can_read = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buffer[TEXT_LEN];</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (entry-&gt;can_read == <span class="number">0</span>)&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Input message&gt;&gt;&gt; &quot;</span>;</span><br><span class="line"><span class="built_in">fgets</span>(buffer, TEXT_LEN, stdin);</span><br><span class="line"><span class="built_in">strncpy</span>(entry-&gt;msg, buffer, TEXT_LEN);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Send message: &quot;</span> &lt;&lt; entry-&gt;msg &lt;&lt; std::endl;</span><br><span class="line">entry-&gt;can_read = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 脱离进程空间</span></span><br><span class="line"><span class="built_in">shmdt</span>(entry);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 删除共享内存</span></span><br><span class="line"><span class="built_in">shmctl</span>(shmid, IPC_PMID, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将三个文件都编译一下，打开两个终端分别运行server和client。先将server运行起来，接收client数据。client运行后，发送信息，server就通过共享内存读取到并打印出来了。</p><p><img src="Linux2/image-20200701104408583.png" alt="image-20200701104408583"></p><p><img src="Linux2/image-20200701104337616.png" alt="image-20200701104337616"></p><h2 id="Python进程同步之共享内存"><a href="#Python进程同步之共享内存" class="headerlink" title="Python进程同步之共享内存"></a>Python进程同步之共享内存</h2><p>另开文章</p><h2 id="进程同步之Unix域套接字"><a href="#进程同步之Unix域套接字" class="headerlink" title="进程同步之Unix域套接字"></a>进程同步之Unix域套接字</h2><ul><li>套接字（socket）原是网络通信中使用的术语</li><li>Unix系统提供的域套接字提供了网络套接字类似的功能</li><li>提供了单机简单可靠的进程通信同步服务</li><li>只能单机使用，不能跨机器使用</li></ul><p>两个进程间同步，服务端使用域套接字过程：</p><ol><li>创建套接字</li><li>绑定套接字</li><li>监听套接字</li><li>接收&amp;处理信息</li></ol><p>客户端使用套接字过程:</p><ol><li>创建套接字</li><li>连接套接字</li><li>发送信息</li></ol><p>举例：客户端与服务端通信（通过域套接字）</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell切入虚拟环境</title>
      <link href="/2020/04/29/powershell%E5%88%87%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/04/29/powershell%E5%88%87%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>PowerShell切入虚拟环境需要以下步骤：</p><ol><li>用cd进入虚拟环境目录</li><li>使用命令“Set-ExecutionPolicy -ExecutionPolicy Unrestricted”修改执行策略，询问是否更改时输入”Y”。</li><li>cd 进入Scripts文件夹</li><li>输入命令”.\activate.ps1”进入该虚拟环境</li></ol><p><img src="powershell%E5%88%87%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/image-20200429212019072.png" alt="image-20200429212019072"></p><p>如果是命令提示符环境直接输入<code>workon django2.2</code>即可</p><p><img src="powershell%E5%88%87%E5%85%A5%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/image-20200429212208471.png" alt="image-20200429212208471"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PowerShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器</title>
      <link href="/2020/04/24/Python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2020/04/24/Python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>装饰器</p><ul><li>用于扩展原来函数功能的函数</li><li>返回函数的函数</li><li>在不用更改原函数的代码的前提下给函数增加新的功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span>(<span class="params">a_func</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">warpTheFunction</span>():</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am doing some boring work before executing a_func()&#x27;</span>)</span><br><span class="line">a_func()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am doing some boring work after executing a_func()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> warpTheFunction</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;I am the function which needs some decoration to remove my foul smell&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a_function_requiring_decoration()</span><br><span class="line">    <span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line">    </span><br><span class="line">    a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br><span class="line"><span class="comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span></span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure><p>它们封装一个函数，并且用这样或者那样的方式来修改它的行为，以上演示的就是装饰器的基本原理</p><p>装饰器中的@可以用简短的方式生成被装饰的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#the @a_new_decorator is just a short way of saying:</span></span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br></pre></td></tr></table></figure><h2 id="wraps"><a href="#wraps" class="headerlink" title="@wraps"></a>@wraps</h2><p>接上，如果输出<code>a_function_requiring_decoration.__name__</code>，结果将是wrapTheFunction。这里的函数被warpTheFunction替代了。它重写了我们函数的名字和注释文档(docstring)。幸运的是Python提供给我们一个简单的函数来解决这个问题，那就是functools.wraps。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_new_decorator</span>(<span class="params">a_func</span>):</span></span><br><span class="line"><span class="meta">    @wraps(<span class="params">a_func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapTheFunction</span>():</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"> </span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_function_requiring_decoration</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey yo! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: a_function_requiring_decoration</span></span><br></pre></td></tr></table></figure><h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><ul><li>通过给单层装饰器函数外层再添加一层嵌套，达到给单层装饰器添加参数的目的</li><li>可以不传入参数，但是不能省略小括号</li></ul><p>1、<em>args代表不定长参数，“不定长”意味着你在定义函数的时候不知道调用者会传递几个参数进来，加了星号 * 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</em>代表传入的参数类型是元组<br>2、**kwargs允许传递不定长的关键字参数。若需要在函数中定义不定长个命名参数，需要使用。**代表传入的参数类型是字典<br>3、结合在一起使用</p><p>日志的例子，并创建一个包裹函数，能让我们指定一个用于输出的日志文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logit</span>(<span class="params">logfile=<span class="string">&#x27;out.log&#x27;</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logging_decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapped_function</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">            log_string = func.__name__ + <span class="string">&quot; was called&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile，并写入内容</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(logfile, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的logfile</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line">    <span class="keyword">return</span> logging_decorator</span><br><span class="line"> </span><br><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc1</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">myfunc1()</span><br><span class="line"><span class="comment"># Output: myfunc1 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 out.log 的文件出现了，里面的内容就是上面的字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@logit(<span class="params">logfile=<span class="string">&#x27;func2.log&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc2</span>():</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">myfunc2()</span><br><span class="line"><span class="comment"># Output: myfunc2 was called</span></span><br><span class="line"><span class="comment"># 现在一个叫做 func2.log 的文件出现了，里面的内容就是上面的字符串</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基本操作</title>
      <link href="/2020/04/23/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/04/23/MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>回顾一下数据库的一些知识</p><h2 id="数据库相关问题"><a href="#数据库相关问题" class="headerlink" title="数据库相关问题"></a>数据库相关问题</h2><p><strong>四个基本性质：</strong></p><ol><li><p>原子性(Atomicity)</p><p>事务的原子性是指事务中包含的所有操作要么全做，要么全部不做</p></li><li><p>一致性(Consistency)</p><p>在事务开始以前，数据库处于一致性的状态，事务结束后，数据库也必须处于一致性状态。</p></li><li><p>隔离性(Isolation)</p><p>事务隔离性要求系统必须保证事务不受其他并发执行的事务影响</p></li><li><p>持久性(Durability)</p><p>一个事务一旦成功完成，它对数据库的改变是永久的，即便是在系统遇到故障的情况下也不会丢失。数据重要性决定了事务持久性的重要性。</p></li></ol><h2 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h2><p>MySQL配置文件部分参数</p><p>MySQL默认端口号3306，80端口是HTTP常用端口，21端口主要用于FTP（File Transfer Protocol，文件传输协议）服务，22端口是ssh常用端口。</p><p>MySQL配置文件：<br>在my.ini文件中，我们可以配置各种MySQL的配置，例如字符集、端口号、目录地址等等。<br>在结构上分三大块：client图形界面的设置、mysql命令行客户端的设置（客户端配置信息）、mysqld数据库配置信息</p><p><img src="MySQL%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/5e78338c00015cfc19201080.jpg" alt="img"></p><p><strong>如何覆盖root用户密码</strong>：</p><ol><li>在任何目录下创建一个TXT文件，定义修改密码的SQL语句：ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘123456’（假设文件所在目录为E:/temp.txt）</li><li>右键左侧开始图标，点击Windows PowerShell(管理员)(A)</li><li>关闭MySQL服务：net stop mysql80</li><li>修改密码命令：mysqld –defaults -file=”C:\ProgramData\MySQL\MySQL Server 8.0\my.ini” –init-file=”E:/temp.txt” –console</li><li>按Ctrl+C关闭mysqld</li><li>关闭当前Windows PowerShell(管理员)(A)打开另一个Windows PowerShell(管理员)(A)启动MySQL服务 ：net start mysql80</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><p>MySQL支持所有标准SQL数值数据类型。</p><p>这些类型包括严格数值数据类型(INTEGER、SMALLINT、DECIMAL和NUMERIC)，以及近似数值数据类型(FLOAT、REAL和DOUBLE PRECISION)。</p><p><a href="https://www.runoob.com/mysql/mysql-data-types.html">菜鸟教程mysql数据类型</a></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>命令行登录数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><strong>Python连接数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector# 安装mysql-connector驱动</span><br></pre></td></tr></table></figure><p>创建数据库连接</p><p>通过cursor.execute(sql)来执行sql语句，fetchone、fetchall可以获取执行后的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"> </span><br><span class="line">mydb = mysql.connector.connect(</span><br><span class="line">  host=<span class="string">&quot;localhost&quot;</span>,       <span class="comment"># 数据库主机地址</span></span><br><span class="line">  user=<span class="string">&quot;yourusername&quot;</span>,    <span class="comment"># 数据库用户名</span></span><br><span class="line">  passwd=<span class="string">&quot;yourpassword&quot;</span>   <span class="comment"># 数据库密码</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">mycursor = mydb.cursor()</span><br><span class="line">mycursor.execute(<span class="string">&quot;CREATE DATABASE runoob_db&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="创建-删除数据库数据表"><a href="#创建-删除数据库数据表" class="headerlink" title="创建/删除数据库数据表"></a>创建/删除数据库数据表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>使用 mysqladmin 创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p create 数据库名</span><br></pre></td></tr></table></figure><p>drop删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure><p>使用 mysqladmin 删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p drop 数据库名;</span><br></pre></td></tr></table></figure><p>选择数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><p>创建数据表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">colum_name colum_type,</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE table_name;</span><br></pre></td></tr></table></figure><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="修改字段s"><a href="#修改字段s" class="headerlink" title="修改字段s"></a>修改字段s</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//修改字段长度</span><br><span class="line">ALTER TABLE table_name MODIFY colum_name char(15);</span><br><span class="line">//修改字段名称以及长度</span><br><span class="line">ALTER TABLE table_name CHANGE colum_name name_new char(32);</span><br><span class="line">ALTER TABLE table_name CHANGE id id int(10);</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE Clause]</span><br><span class="line">[LIMIT N][ OFFSET M]</span><br></pre></td></tr></table></figure><ul><li><p>SELECT 命令可以读取一条或者多条记录。</p></li><li><p>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</p></li><li><p>你可以使用 WHERE 语句来包含任何条件。</p></li><li><p>你可以使用 LIMIT 属性来设定返回的记录数。</p></li><li><p>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</p></li></ul><h3 id="WHERE子句"><a href="#WHERE子句" class="headerlink" title="WHERE子句"></a>WHERE子句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">[WHERE condition1 [AND [OR]] condition2.....</span><br></pre></td></tr></table></figure><ul><li>查询语句中你可以使用一个或者多个表，表之间使用逗号**,** 分割，并使用WHERE语句来设定查询条件。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以使用 AND 或者 OR 指定一个或多个条件。</li><li>WHERE 子句也可以运用于 SQL 的 DELETE 或者 UPDATE 命令。</li><li>WHERE 子句类似于程序语言中的 if 条件，根据 MySQL 表中的字段值来读取指定的数据。</li></ul><h4 id="LIKE子句"><a href="#LIKE子句" class="headerlink" title="LIKE子句"></a>LIKE子句</h4><p> LIKE 子句中使用百分号 %字符来表示任意字符，用来继续限定条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE field1 LIKE condition1 [AND [OR]] filed2 = &#x27;somevalue&#x27;</span><br></pre></td></tr></table></figure><h3 id="UPDATE-更新"><a href="#UPDATE-更新" class="headerlink" title="UPDATE 更新"></a>UPDATE 更新</h3><p>如果我们需要修改或更新 MySQL 中的数据，我们可以使用 SQL UPDATE 命令来操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br></pre></td></tr></table></figure><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><h3 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h3><p>使用 SQL 的 DELETE FROM 命令来删除 MySQL 数据表中的记录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE Clause]</span><br></pre></td></tr></table></figure><h3 id="UNION操作符"><a href="#UNION操作符" class="headerlink" title="UNION操作符"></a>UNION操作符</h3><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions]</span><br><span class="line">UNION [ALL | DISTINCT]</span><br><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions];</span><br></pre></td></tr></table></figure><p>DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</p><p>ALL: 可选，返回所有结果集，包含重复数据。</p><h3 id="ORDER-BY排序"><a href="#ORDER-BY排序" class="headerlink" title="ORDER BY排序"></a>ORDER BY排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT field1, field2,...fieldN FROM table_name1, table_name2...</span><br><span class="line">ORDER BY field1 [ASC [DESC][默认 ASC]], [field2...] [ASC [DESC][默认 ASC]]</span><br></pre></td></tr></table></figure><ul><li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li><li>你可以设定多个字段来排序。</li><li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 WHERE…LIKE 子句来设置条件。</li></ul><h3 id="GROUP-BY-语句"><a href="#GROUP-BY-语句" class="headerlink" title="GROUP BY 语句"></a>GROUP BY 语句</h3><p>GROUP BY 语句根据一个或多个列对结果集进行分组。</p><p>在分组的列上我们可以使用 COUNT, SUM, AVG,等函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name, function(column_name)</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE column_name operator value</span><br><span class="line">GROUP BY column_name;</span><br></pre></td></tr></table></figure><h4 id="HAVING子句"><a href="#HAVING子句" class="headerlink" title="HAVING子句"></a>HAVING子句</h4><p>用于限定GROUP BY的查询，作为GROUP BY的条件使用</p><p>例如：查询每个部门汇总，1982年以后入职的员工超过2个人的部门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT deptno FROM t_emp</span><br><span class="line">WHERE hiredate&gt;=&#x27;1982-01-01&#x27;</span><br><span class="line">GROUP BY deptno HAVING COUNT(*)&gt;=2;</span><br></pre></td></tr></table></figure><h3 id="JOIN语句"><a href="#JOIN语句" class="headerlink" title="JOIN语句"></a>JOIN语句</h3><p>JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。<br>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。<br>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</p><p>ON 接连接条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查找某一位用户的订单</span><br><span class="line">SELECT user.name,order.id,order.create_time</span><br><span class="line">FROM order</span><br><span class="line">JOIN user</span><br><span class="line">ON user.id=order.user_id</span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>WHERE和SELECT子句的子查询效率低下不推荐使用，应该改成表连接的写法。但是FROM子查询经常使用，因为他只会查询一次。</p><p>查询底薪超过公司底薪的员工信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT empno,ename,sal</span><br><span class="line">FROM t_emp</span><br><span class="line">WHERE sal&gt;=(SELECT AVG(sal) FROM t_emp); # 比较每条记录都要重复执行</span><br></pre></td></tr></table></figure><p>改为FROM子查询后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.empno,e.ename,e.sal,t.svg</span><br><span class="line">FROM t_emp e JOIN</span><br><span class="line">(SELECT deptno,AVG(sal)) as avg</span><br><span class="line">FROM t_emp GROUP BY deptno) t</span><br><span class="line">ON e.deptno=t.deptno AND e.sal&gt;=t.avg;</span><br></pre></td></tr></table></figure><p>注意：FROM字查询之后的数据来源不是数据表，而是一个查询结果，一般FROM子查询的返回类型的多行多列的结果集</p><h2 id="其他MySQL内容"><a href="#其他MySQL内容" class="headerlink" title="其他MySQL内容"></a>其他MySQL内容</h2><p>参见<a href="https://www.runoob.com/mysql/mysql-null.html">MySQL</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django对象关系映射(ORM)</title>
      <link href="/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/"/>
      <url>/2020/04/22/Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/</url>
      
        <content type="html"><![CDATA[<p>本文是<a href="www.imooc.com">慕课网</a>相关课程的学习笔记</p><p>**ORM(Object Relational Mapping)**，对象关系映射</p><p>ORM的重要特性：</p><ul><li>面向对象的编程思想，方便扩充</li><li>少写SQL，提升开发效率</li><li>支持多种类型的数据库，方便切换</li><li>ORM技术成熟，能解决大部分问题</li></ul><h2 id="ORM模型"><a href="#ORM模型" class="headerlink" title="ORM模型"></a>ORM模型</h2><h3 id="Django-ORM配置"><a href="#Django-ORM配置" class="headerlink" title="Django ORM配置"></a>Django ORM配置</h3><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>:<span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>:<span class="string">&#x27;mydatabase&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;mydatabase_user&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;mypassword&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>default：默认的数据库，可配置多个数据，使用名称来区分<br>ENGINE：数据库引擎<br><code>&#39;django.db.backends.mysql&#39; &#39;django.db.backends.postgresql&#39; &#39;django.db.backends.sqlite3&#39; &#39;django.db.backends.oracle&#39;</code><br>NAME：数据库名称<br>USER：数据库登录用户名<br>PASSWORD：数据库登录密码<br>HOST：数据库访问地址<br>PORT：数据库访问端口<br>sqlite3的配置选项：<br>只需要指定数据库引擎和数据库文件名称即可，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"><span class="string">&#x27;default&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>:<span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>:<span class="string">&#x27;mydatabase.db&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见类型介绍"><a href="#常见类型介绍" class="headerlink" title="常见类型介绍"></a>常见类型介绍</h3><p>数据库字段和ORM模型对应，是用field对应，field是一个基础的类，有很多很多子类<br>基类类型的选项：<br>1、null、blank——是否为Null、空值（null是什么都没填，空值是空字符串）<br>2、db_column——数据库表中对应的字段名称<br>3、default——不填写该字段时的默认值<br>4、primary_key、unique——主键、唯一索引<br>5、verbose_name——供编程查看的字段名称（便于阅读）<br>6、hep_text——帮助文字<br>7、choices——可供选择的选项，如：性别的选项（男，女）<br>8、get_FOO_display()——展示choices对应的值<br>Django中的常见类型：<br>1、CharField、TextField——字符串、文本<br>2、DateField、DatetimeField——日期时间<br>3、FileField、ImageField——文件、图片<br>4、IntegerField、SmallIntegerField——整数（前面大一点、后面小一点）<br>5、FloatField、DecimalField——小数<br>CharField：<br>1、max_length——最大长度<br>2、相关类型：<br>    EmailField——邮件输入<br>    URLField——URL输入<br>    TextField——长文本输入<br>    FielPathField——文件路径的输入<br>    ImageField——图片输入<br>DateField：<br>1、auto_now——更新时间为记录更改时的时间<br>2、auto_now_add——记录创建的时间</p><h3 id="常见类型创建"><a href="#常见类型创建" class="headerlink" title="常见类型创建"></a>常见类型创建</h3><p>stttings配置数据库，同时要新建一个名为‘students的数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;students&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE students;</span><br></pre></td></tr></table></figure><p>利用Django新建模型，用模型去生成数据表。根据业务需求来执行app.models</p><p>使用Django模型新建的表<font color='red'>自带id作为主键</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 创建学生表 &quot;&quot;&quot;</span></span><br><span class="line">    name=models.CharField(<span class="string">&#x27;name&#x27;</span>,max_length=<span class="number">64</span>)</span><br><span class="line">    sex=models.CharField(<span class="string">&#x27;sex&#x27;</span>,max_length=<span class="number">1</span>,choices=(</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;male&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">    ),default=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    age=models.PositiveIntegerField(<span class="string">&#x27;age&#x27;</span>,default=<span class="number">0</span>)</span><br><span class="line">    username=models.CharField(<span class="string">&#x27;username&#x27;</span>,max_length=<span class="number">64</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    password=models.CharField(<span class="string">&#x27;password&#x27;</span>,max_length=<span class="number">256</span>)</span><br><span class="line">    created_at=models.DateTimeField(<span class="string">&#x27;create_time&#x27;</span>,auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at=models.DateTimeField(<span class="string">&#x27;update_time&#x27;</span>,auto_now=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="模型同步migrate"><a href="#模型同步migrate" class="headerlink" title="模型同步migrate"></a>模型同步migrate</h3><p>将模型同步到数据库，INSTALLED_APPS中添加相应模块</p><p>终端或命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 检查模型是否存在问题</span><br><span class="line">python manage.py check</span><br><span class="line"># 使用makemigrations生成同步原语</span><br><span class="line">python manage.py makemigrations</span><br><span class="line"># 使用migrate执行同步到数据库</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>如果check时候报错未安装mysqlclient，需要先安装下<code>pip install mysqlclient</code></p><p>同步数据后，模块中会出现migrations包，students数据库中也出现了数据表</p><p><img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200424180801837.png" alt="image-20200424180801837"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名;</span><br><span class="line"># 查看表结构</span><br></pre></td></tr></table></figure><p>模型变更(添加、修改、删除)了一些字段，怎么快速的修改数据库对应的表结构？</p><p>如果直接操作数据库的话需要使用UPDATE、ALTER等语句修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD COLUMN 列名 VARCHAR(30);</span><br><span class="line">ALTER TABLE 表名 DROP COLUMN 列名;</span><br></pre></td></tr></table></figure><p>如果使用Django模型，直接在models中添加修改即可，然后使用migrate同步</p><h3 id="模型的元数据"><a href="#模型的元数据" class="headerlink" title="模型的元数据"></a>模型的元数据</h3><ul><li><p>使用Meta类来表示</p></li><li><p>对模型的补充说明</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    verbose_name = <span class="string">&#x27;用户基础信息&#x27;</span></span><br><span class="line">    verbose_name_plural = <span class="string">&#x27;用户基础信息&#x27;</span></span><br><span class="line">    db_table = <span class="string">&#x27;oauth_user&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p>元数据的描述：</p><p>db_table——模型映射的数据库表的名称<br>ordering——指定数据表的默认排序规则<br>verbose_name——供编程查看的字段名称（便于阅读）<br>abstract——抽象类（抽象类不会生成数据库表）<br>一些公共用的字段部分（如创建时间和更新时间），写成一个类，这个类不会被创建一个表，其他类需要<strong>继承</strong>自这个类，减少代码量</p><p>proxy——代理模型（对父模型的功能进行扩充）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUtils</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;create_time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    updated_at = models.DateTimeField(<span class="string">&#x27;update_time&#x27;</span>, auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 按更新时间排序，-号表示降序</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-upated_at&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">CommonUtils</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 创建学生表 &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;name&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    sex = models.CharField(<span class="string">&#x27;sex&#x27;</span>, max_length=<span class="number">1</span>, choices=(</span><br><span class="line">        (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;male&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;female&#x27;</span>),</span><br><span class="line">    ), default=<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    id_no = models.CharField(<span class="string">&#x27;student_id&#x27;</span>, max_length=<span class="number">10</span>)</span><br><span class="line">    email = models.EmailField(<span class="string">&#x27;email&#x27;</span>)</span><br><span class="line">    age = models.PositiveIntegerField(<span class="string">&#x27;age&#x27;</span>, default=<span class="number">0</span>)</span><br><span class="line">    username = models.CharField(<span class="string">&#x27;username&#x27;</span>, max_length=<span class="number">64</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    password = models.CharField(<span class="string">&#x27;password&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 重命名表名</span></span><br><span class="line">        db_table = <span class="string">&#x27;students&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyStudent</span>(<span class="params">Student</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 对Student表的功能进行扩充 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_first_name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取学生的姓</span></span><br><span class="line">        <span class="keyword">return</span> self.name[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h3 id="外键关联类型、复合类型"><a href="#外键关联类型、复合类型" class="headerlink" title="外键关联类型、复合类型"></a>外键关联类型、复合类型</h3><p>数据关系的几种类型：</p><p>OneToOneField——一对一关系</p><p>举例：用户信息进行分表</p><div class="mermaid">graph RLA[用户详细信息] --&gt; B[用户基本信息]</div><p><font color='red'>接着上面的代码补充学生信息表</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDetail</span>(<span class="params">CommonUtils</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 学生详细信息表 &quot;&quot;&quot;</span></span><br><span class="line">    student = models.OneToOneField(Student, on_delete=models.CASCADE, blank=<span class="literal">True</span>, null=<span class="literal">True</span>)</span><br><span class="line">    motto = models.CharField(<span class="string">&#x27;motto&#x27;</span>, max_length=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 按更新时间排序，-号表示降序</span></span><br><span class="line">        ordering = [<span class="string">&#x27;-updated_at&#x27;</span>]</span><br></pre></td></tr></table></figure><p>ManyToManyField——表示多对多关系</p><p>举例：学生选课</p><p>补充选课表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span>(<span class="params">CommonUtils</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 课程目录表 &quot;&quot;&quot;</span></span><br><span class="line">    name = models.CharField(<span class="string">&#x27;course_name&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    <span class="comment"># TO DO 可补充一对一的老师表</span></span><br><span class="line">    teacher = models.CharField(<span class="string">&#x27;teacher&#x27;</span>, max_length=<span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">CommonUtils</span>):</span></span><br><span class="line">...</span><br><span class="line">    course = models.ManyToManyField(Course)</span><br></pre></td></tr></table></figure><p>ForeignKey——表示多对一关系</p><p>举例：用户的收货地址</p><p>补充学生地址表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">stu_addr</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 学生地址表 &quot;&quot;&quot;</span></span><br><span class="line">    student = models.ForeignKey(Student, on_delete=models.CASCADE)</span><br><span class="line">    phone = models.CharField(<span class="string">&#x27;phone&#x27;</span>, max_length=<span class="number">10</span>)</span><br><span class="line">    addr = models.CharField(<span class="string">&#x27;address&#x27;</span>, max_length=<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p><strong>ForeignKey.ondelete</strong>在Djnago2.2中是必填内容，当被关联的表删除后，设置关联表的操作</p><p>举个例子：</p><blockquote><p>当你在Django中删除了一个有着外键关联的数据时，比如一个作者和他名下的所有的书的信息，书的外键是作者（一个作者可有好多本书），当你把作者的信息从数据库中删除时，Django提供了一下几个参数来对作者的书的数据进行操作</p><p>外键的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">#models.py</span></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">   author = models.CharField(max_length=<span class="number">250</span>)</span><br><span class="line"></span><br><span class="line">&gt;<span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">models.Model</span>):</span> </span><br><span class="line">   book = models.ForeignKey(Author,on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><p>CASCADE：删除作者信息一并删除作者名下的所有书的信息；<br>PROTECT：删除作者的信息时，采取保护机制，抛出错误：即不删除Books的内容；<br>SET_NULL：只有当null=True才将关联的内容置空；<br>SET_DEFAULT：设置为默认值；<br>SET( )：括号里可以是函数，设置为自己定义的东西；<br>DO_NOTHING：字面的意思，啥也不干，你删除你的干我毛线关系<br>————————————————<br>版权声明：本文为CSDN博主「Lex_lht」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/lht_521/article/details/80605146">https://blog.csdn.net/lht_521/article/details/80605146</a></p></blockquote><p><strong>oauth.Course: (models.E015) ‘ordering’ refers to the nonexistent field ‘upated_at’.</strong></p><p>当Meta.ordering存在于通用表中时，且继承的表中存在外键关联，会出现以上报错，解决方法：应在关联表中添加Meta.ordering，不能在通用表中添加该方法。</p><p>比如上面的课程表中的ordering不能放在CommonUtils表中</p><h4 id="Mysql中查看外键关联关系"><a href="#Mysql中查看外键关联关系" class="headerlink" title="Mysql中查看外键关联关系"></a>Mysql中查看外键关联关系</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where REFERENCED_TABLE_NAME=‘被引用表的表名’;</span><br><span class="line"># \G可以让表分行显示，更加美观可读</span><br><span class="line">select * from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where REFERENCED_TABLE_NAME=‘被引用表的表名’\G</span><br></pre></td></tr></table></figure><p><img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200426231505455.png" alt="image-20200426231505455"></p><p>图中显示了students表与其他表的外键关联情况，但是<font color='red'>多对多、一对一等关系不会在mysql中体现，是通过Django约束来实现的。</font></p><h4 id="外键关联复合类型"><a href="#外键关联复合类型" class="headerlink" title="外键关联复合类型"></a>外键关联复合类型</h4><p>举例：用户收藏商品、收藏店铺都是多对多关系，如果用manytomany则需要两张表，其有大部分字段重复。需要将用户收藏店铺和商品都放在一张表中，整合到一起<br>ContentType——模型类型</p><p>使用djangoORM会自动在数据库中生成一个表django_content_type</p><p>给定appLabel和model，一一对应。根据id可以查到对应模块下的模型。</p><p>​    <img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200427163913047.png" alt="image-20200427163913047"><br>models.ForeignKey（ContentType）——关联复合模型<br>    用于追踪项目中所有的model<br>    通过ForeignKey找到ContentType（通过多对一关联店铺或者商品）<br>GenericForeignKey——关联模型<br>​    GenericForeignKey关联店铺或商品ID,实现收藏商品的过程<br>GenericRelation——反向关联<br>​    找到用户收藏的商品</p><blockquote><p>ContentType是Django的内置的一个应用，在ContentType表中，记录了项目中所有的APP和model的对应关系，content_type字段关联到ContentType表，object_id是IntegerField字段，表示关联数据的id，在本案例中，即是商品id或者店铺id，GenericForeignKey将content_type和object_id关联，至此我们可以通过object_id查找到content_type，即通过object_id找到是商品模型还是店铺模型。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.fields <span class="keyword">import</span> GenericForeignKey, GenericRelation</span><br><span class="line"><span class="keyword">from</span> django.contrib.contenttypes.models <span class="keyword">import</span> ContentType</span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="keyword">from</span> oauth.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Production</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品表 &quot;&quot;&quot;</span></span><br><span class="line">    product_name = models.CharField(<span class="string">&#x27;product_name&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    <span class="comment"># 反向关联找到该商品关联的被收藏的次数</span></span><br><span class="line">    collections = GenericRelation(<span class="string">&#x27;Collection&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 店铺名称 &quot;&quot;&quot;</span></span><br><span class="line">    store_name = models.CharField(<span class="string">&#x27;store_name&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 商品收藏 &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(Student, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># 通过django_content_type表关联商品和店铺</span></span><br><span class="line">    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># 关联的id，店铺或者商品的di</span></span><br><span class="line">    object_id = models.IntegerField(<span class="string">&#x27;关联的id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 通过content_type和object_id关联的模型 即店铺/商品，然后找到关联的商品或店铺</span></span><br><span class="line">    content_object = GenericForeignKey(<span class="string">&#x27;content_type&#x27;</span>, <span class="string">&#x27;object_id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    created_time = models.DateTimeField(<span class="string">&#x27;collected_time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：必须将该模块添加进settings.INSTALLED_APPS中，否则makemigrations时候报错No changes detected</p><h2 id="ORM的增删改查操作"><a href="#ORM的增删改查操作" class="headerlink" title="ORM的增删改查操作"></a>ORM的增删改查操作</h2><h3 id="分析定义模型"><a href="#分析定义模型" class="headerlink" title="分析定义模型"></a>分析定义模型</h3><p>以微博为例：</p><p><img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/5db92b110001888819201080.jpg" alt="img"></p><p>新建微博模块</p><p>新建用户、微博、评论、图片等模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboUser</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; weibo user &quot;&quot;&quot;</span></span><br><span class="line">    username = models.CharField(<span class="string">&#x27;username&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line">    password = models.CharField(<span class="string">&#x27;password&#x27;</span>, max_length=<span class="number">256</span>)</span><br><span class="line">    nickname = models.CharField(<span class="string">&#x27;nickname&#x27;</span>, max_length=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;weibo_user&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weibo</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; weibo content &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(WeiboUser, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;weibo user&#x27;</span>)</span><br><span class="line">    content = models.CharField(<span class="string">&#x27;weibo content&#x27;</span>, max_length=<span class="number">500</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;create time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    source = models.CharField(<span class="string">&#x27;weibo source&#x27;</span>, max_length=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;weibo_content&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboComment</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; weibo comments &quot;&quot;&quot;</span></span><br><span class="line">    user = models.ForeignKey(WeiboUser, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;weibo user&#x27;</span>)</span><br><span class="line">    weibo = models.ForeignKey(Weibo, on_delete=models.CASCADE, verbose_name=<span class="string">&#x27;related weibo&#x27;</span>)</span><br><span class="line">    content = models.CharField(<span class="string">&#x27;comment detail&#x27;</span>, max_length=<span class="number">500</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;create time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;weibo_comment&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboImg</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; weibo images &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># file will be uploaded to MEDIA_ROOT/weibo</span></span><br><span class="line">    img = models.ImageField(upload_to=<span class="string">&#x27;weibo&#x27;</span>, verbose_name=<span class="string">&#x27;weibo images&#x27;</span>)</span><br><span class="line">    weibo = models.ForeignKey(Weibo, models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;weibo_image&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboFriends</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; weibo friends &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 对于两个关联同一个外键的属性，需要指定related_name</span></span><br><span class="line">    user_from = models.ForeignKey(WeiboUser, <span class="string">&#x27;weibo follower&#x27;</span>,related_name=<span class="string">&#x27;follower&#x27;</span>)</span><br><span class="line">    user_to = models.ForeignKey(WeiboUser, <span class="string">&#x27;weibo follow&#x27;</span>,related_name=<span class="string">&#x27;follow&#x27;</span>)</span><br><span class="line">    created_at = models.DateTimeField(<span class="string">&#x27;follow time&#x27;</span>, auto_now_add=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;weibo_friends&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>错误记录：(fields.E304) Reverse accessor for  “ “clashes with reverse accessor for “ “.</strong></p><p>对于两个关联同一个外键的属性，需要指定related_name</p><h3 id="使用ORM实现新增操作"><a href="#使用ORM实现新增操作" class="headerlink" title="使用ORM实现新增操作"></a>使用ORM实现新增操作</h3><p><font color='red'>C</font>reate<font color='red'>R</font>ead<font color='red'>U</font>pdate<font color='red'>D</font>elete</p><p>Pycharm控制台输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.hashers <span class="keyword">import</span> make_password, check_password</span><br><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">password=make_password(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">user_obj=User(username=<span class="string">&#x27;zhangsan&#x27;</span>,password=password,nickname=<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">user_obj.save()</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">user=User.objects.create(username=<span class="string">&#x27;lisi&#x27;</span>,password=password,nickname=<span class="string">&#x27;李四&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Django自带密码加密与解密方法make_password，check_password</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwd=<span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="comment"># 参数三可指定加密算法</span></span><br><span class="line">make_password(pwd,salt=<span class="literal">None</span>,<span class="string">&#x27;pbkdf2_sha256&#x27;</span>)</span><br></pre></td></tr></table></figure><p>内置算法详见Django文档</p><blockquote><p>加Salt散列</p><p>我们知道，如果直接对密码进行散列，那么黑客（统称那些有能力窃取用户数据并企图得到用户密码的人）可以对一个已知密码进行散列，然后通过对比散列值得到某用户的密码。换句话说，虽然黑客不能取得某特定用户的密码，但他可以知道使用特定密码的用户有哪些。</p><p>加Salt可以一定程度上解决这一问题。所谓加Salt，就是加点“佐料”。其基本想法是这样的——当用户首次提供密码时（通常是注册时），由系统自动往这个密码里撒一些“佐料”，然后再散列。而当用户登录时，系统为用户提供的代码撒上同样的“佐料”，然后散列，再比较散列值，已确定密码是否正确。</p><p>这里的“佐料”被称作“Salt值”，这个值是由系统随机生成的，并且只有系统知道。这样，即便两个用户使用了同一个密码，由于系统为它们生成的salt值不同，他们的散列值也是不同的。即便黑客可以通过自己的密码和自己生成的散列值来找具有特定密码的用户，但这个几率太小了（密码和salt值都得和黑客使用的一样才行）。</p></blockquote><p>从命令行插入数据（powershell切换虚拟环境不成功）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在项目所在目录切换虚拟环境</span><br><span class="line">workon django2.2</span><br><span class="line"># 将项目中的配置加载到环境变量中</span><br><span class="line">python manage.py shell</span><br><span class="line">...（之后的操作和前面一致）</span><br></pre></td></tr></table></figure><h3 id="ORM查询操作"><a href="#ORM查询操作" class="headerlink" title="ORM查询操作"></a>ORM查询操作</h3><p>get()通过条件用来查询单条记录，不存在的记录会报错。all()用来查询表中的所有数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="comment"># pk=primary key,使用id也可以</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user = User.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(user.username,user.nickname)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user_list = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line"><span class="built_in">print</span>(user.nickname)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><h3 id="ORM修改操作"><a href="#ORM修改操作" class="headerlink" title="ORM修改操作"></a>ORM修改操作</h3><p>使用模型的save()修改单条数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">user = User.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    user.nickname = <span class="string">&#x27;张三三&#x27;</span></span><br><span class="line">    user.save()</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>使用模型的update()批量修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">user = User.objects.<span class="built_in">all</span>().update(<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><h3 id="ORM删除操作"><a href="#ORM删除操作" class="headerlink" title="ORM删除操作"></a>ORM删除操作</h3><p>使用模型的delete()修改单条或全部数据 all().delete()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">user = User.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">    user.delete()</span><br><span class="line"> <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p>这里的删除属于<font color='red'>物理删除</font>，慎用。</p><p>逻辑删除：<br>将数据标记删除，删除后还占磁盘空间，删除后还可以恢复，删除后通过查询条件不展示给用户<br>物理删除：<br>将数据从数据库干掉，干掉了就不占磁盘空间了，干掉了就找不回来了</p><p>实现逻辑删除应该给用户添加一个状态属性，标记数据的存在和删除</p><h2 id="查询条件的使用"><a href="#查询条件的使用" class="headerlink" title="查询条件的使用"></a>查询条件的使用</h2><h3 id="结果集QuerySet常用方法"><a href="#结果集QuerySet常用方法" class="headerlink" title="结果集QuerySet常用方法"></a>结果集QuerySet常用方法</h3><ol><li>Queryset表示从数据库中取出来的对象的集合</li><li>它可以含有零个、一个或者多个过滤器（filter）（相当于数据库的where）</li><li>从模型的Manager那里取得QuerySet</li><li>QuerySet的筛选结果本身还是QuerySet</li><li>QuerySet是惰性的（不是每一次都去数据库执行sql，比如：把用户取出一个结果集，查找一次后不会去数据库中查找了，会在用户结果集中查找）</li></ol><p>QuerySet常用方法：</p><ol><li><p>get()——返回单条记录</p></li><li><p>create()——创建/新增一条数据库记录</p></li><li><p>get_or_create()——有则返回，没有则创建记录</p></li><li><p>bulk_create()——创建/新增多条数据库记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user1 = User(username=<span class="string">&#x27;user1&#x27;</span>, nickname=<span class="string">&#x27;用户1&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">user2 = User(username=<span class="string">&#x27;user2&#x27;</span>, nickname=<span class="string">&#x27;用户2&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">user3 = User(username=<span class="string">&#x27;user3&#x27;</span>, nickname=<span class="string">&#x27;用户3&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">User.objects.bulk_create([user1,user2,user3])</span><br></pre></td></tr></table></figure></li><li><p>first()/last()——返回第一条/最后一条记录</p></li><li><p>count()——返回记录行数之和</p></li><li><p>exists()——结果集是否存在（1条以上）</p></li><li><p>update()——修改记录</p></li><li><p>delete()——物理删除记录</p></li></ol><p>QuerySet链式查询方法：</p><ol><li><p>filter()——筛选出满足条件的多条记录</p></li><li><p>exclude()——排除满足条件的多条记录</p></li><li><p>order_by()——对查询的记录排序</p></li><li><p>all()——查询所有记录</p></li><li><p>none()——创建一个空的结果集</p></li><li><p>using()——使用指定的数据库查询(在settings中添加多数据库支持)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找xx数据库的全部记录，并将其通过id降序排列</span></span><br><span class="line">User.objects.<span class="built_in">all</span>().order_by(<span class="string">&#x27;-id&#x27;</span>).using(<span class="string">&#x27;数据库名&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h3><p>减少等待时间，提升用户体验<br>如何进行分页查询：</p><ol><li><p>对查询结果集QuerySet进行分片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回前n个对象（LIMIT 5）</span></span><br><span class="line">User.objects.<span class="built_in">all</span>()[:<span class="number">5</span>]</span><br><span class="line"><span class="comment"># 返回第6到第10个对象（offset 5 limit 5）sql中offset偏移的意思</span></span><br><span class="line">User.objects.<span class="built_in">all</span>()[<span class="number">5</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用django.core.paginator进行分页处理(分页处理器)</p><p>分页处理相关类：<br>Paginator——分页器<br>Page——某一页对象<br>异常：<br>InvalidPage——无效的页码<br>PageNotAnInteger——页码必须是整数<br>EmptyPage——空页（没有数据）</p></li></ol><h3 id="分页处理器"><a href="#分页处理器" class="headerlink" title="分页处理器"></a>分页处理器</h3><ol><li><p>取得分页器Paginator(objects,page_size)<br>objects——要进行分页的数据<br>page_size——每页的数据放多少</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = Paginator(objects,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>分页器的属性：<br>count——数据记录的总条数<br>num_pages——总页数（总记录条数/每页大小）<br>page_range——页码范围</p></li><li><p>取得页面实例page=p.page(page_num)<br>page_num——当前页的页码，如第几页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = Paginator(objects,<span class="number">2</span>)</span><br><span class="line">page = p.page(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>页面实例的属性：<br>number——当前页的页码<br>object_list——当前页的数据列表<br>paginator——分页器对象的引用<br>页面实例的常用方法：<br>has_next()——是否还有下一页<br>has_previous()——是否还有上一页<br>has_other_pages()——是否还有其他页（上/下一页）<br>next_page_number()——下一页的页码，如果没有，触发InvalidPage异常<br>previous_page_number()——上一页的页码，如果没有，触发InvalidPage异常</p></li></ol><h4 id="使用分页处理器"><a href="#使用分页处理器" class="headerlink" title="使用分页处理器"></a>使用分页处理器</h4><p>添加urls等略过，写views方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, render_to_response</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paginator</span>(<span class="params">request, page</span>):</span></span><br><span class="line">    <span class="comment"># 获取微博用户数据</span></span><br><span class="line">    objects = WeiboUser.objects.<span class="built_in">all</span>()</span><br><span class="line">    page_size=<span class="number">5</span></span><br><span class="line">    <span class="comment"># 生成分页器</span></span><br><span class="line">    p = Paginator(objects, per_page=page_size)</span><br><span class="line">    <span class="comment"># 获取当前页数据，若没有获取到则打印错误到控制台</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        page_data = p.page(page)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;weibo_paginator.html&#x27;</span>, context=&#123;</span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>: p.count,</span><br><span class="line">        <span class="string">&#x27;num_pages&#x27;</span>: p.num_pages,</span><br><span class="line">        <span class="string">&#x27;num_range&#x27;</span>: p.page_range,</span><br><span class="line">        <span class="string">&#x27;page_num&#x27;</span>: page_data.number,</span><br><span class="line">        <span class="string">&#x27;object_list&#x27;</span>: page_data.object_list,</span><br><span class="line">        <span class="string">&#x27;has_next&#x27;</span>: page_data.has_next(),</span><br><span class="line">        <span class="string">&#x27;has_previous&#x27;</span>: page_data.has_previous(),</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200504165151150.png" alt="image-20200504165151150"></p><h3 id="查询条件的使用-1"><a href="#查询条件的使用-1" class="headerlink" title="查询条件的使用"></a>查询条件的使用</h3><p>查询语法：<br>字段名称__查询条件 = “查询内容” <font color='red'>注意是双下划线</font></p><ol><li><p>相等/等于<br>exact, iexact——等于xx值（默认的形式）<br>如：id_exact=6 或者 id=6</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WeiboUser.objects.<span class="built_in">filter</span>(username__iexact=<span class="string">&#x27;gan&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>是否包含xx字符串<br>contains, icontains——包含xx值<br>如：name__contains= ‘san’</p></li><li><p>以xx开始<br>startswith、istartswith</p></li><li><p>以xx结束<br>endswith、iendswith</p></li><li><p>在xx选项（列表）之类<br>in</p></li><li><p>gt大于某个值、gte大于等于某个值、lt小于某个值、lte小于或等于某个值、isnull是否为空值等等</p></li><li><p>date/datetime查询条件</p><p>date——日期<br>year——年<br>month——月份<br>day——天<br>hour/minute/second——时分秒<br>week/week_day——星期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询在2020年1月1日之后创建的数据</span></span><br><span class="line">user_list = WeiboUser.objects.<span class="built_in">filter</span>(created_at__gt=<span class="string">&#x27;2020-1-1&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="外键关联查询"><a href="#外键关联查询" class="headerlink" title="外键关联查询"></a>外键关联查询</h4><p>查询条件是外键的某个属性（字段）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询外键关联表字段包含&#x27;xx&#x27;的在本表数据</span></span><br><span class="line">model.objects.<span class="built_in">filter</span>(model__column__icontains=<span class="string">&#x27;xx&#x27;</span>)</span><br></pre></td></tr></table></figure><p>手动添加微博及评论，然后举例外键关联查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> Weibo,WeiboUser,WeiboComment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动添加微博和评论</span></span><br><span class="line">user=User.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">weibo=Weibo.objects.create(user=user,content=<span class="string">&#x27;wdnmd&#x27;</span>,source=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">WeiboComment.objects.create(weibo=weibo,user=user,content=<span class="string">&#x27;dnmd&#x27;</span>)</span><br></pre></td></tr></table></figure><p>外键关联：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：</span></span><br><span class="line">user=WeiboUser.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 查询该用户的评论集合</span></span><br><span class="line">comments_list=UserComment.objects.<span class="built_in">filter</span>(user=user)</span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="comment"># 根据外键的某个属性(字段)进行查询</span></span><br><span class="line">comment_list=Comment.objects.<span class="built_in">filter</span>(user__username=<span class="string">&#x27;zhangsan&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Django中事务与统计的使用"><a href="#Django中事务与统计的使用" class="headerlink" title="Django中事务与统计的使用"></a>Django中事务与统计的使用</h2><h3 id="Django中事务的使用"><a href="#Django中事务的使用" class="headerlink" title="Django中事务的使用"></a>Django中事务的使用</h3><p>事务与回滚：<br>事务：多个数据库逻辑操作的集合<br>回滚：多个逻辑中某个操作出错，回到初始状态<br>事务的原子性要求事务要么全部完成，要么全部不完成，不可能停滞在某个中间状态</p><p>需要事务控制的情况：</p><ol><li>对多个ORM模型操作时（比如：用户信息表和用户详细信息表，必须一致）</li><li>对结果要求严格一致（要么成功，要么失败）</li></ol><p>在django中使用事务：</p><ol><li><p>自动提交</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"><span class="meta">@transaction.atomic</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">viewfunc</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 事务内的代码</span></span><br><span class="line">do_stuff()</span><br></pre></td></tr></table></figure><p>atomic自动提交过程解析<br>a. 进入到最外层的atomic代码块时会打开一个事务<br>b. 进入到内层atomic代码块时会创建一个标记<br>c. 退出内部块时会释放或回滚至标记<br>d. 退出外部块时提交或回退事务</p></li><li><p>手动提交和回滚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 放弃自动提交</span></span><br><span class="line">    transaction.set_autocommit(<span class="literal">False</span>)</span><br><span class="line">a.save()</span><br><span class="line">b.save()</span><br><span class="line">transaction.commit() <span class="comment"># 提交事务</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">transaction.rollback() <span class="comment"># 回滚</span></span><br></pre></td></tr></table></figure></li></ol><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> transaction</span><br><span class="line"></span><br><span class="line"><span class="meta">@transaction.atomic()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 事务练习：用户发布微博时候，顺便发布一条评论，只能同时成功，否则发生回滚 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获得一个用户</span></span><br><span class="line">    user = WeiboUser.objects.get(pk=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 发布一条微博和评论</span></span><br><span class="line">    weibo = Weibo.objects.create(user=user, content=<span class="string">&#x27;事务练习&#x27;</span>, source=<span class="string">&#x27;other&#x27;</span>)</span><br><span class="line">    WeiboComment.objects.create(user=user, content=<span class="string">&#x27;事务练习&#x27;</span>, weibo=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ojbk&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上例中会weibo不能为空值，会触发回滚机制，若事务机制不存在，则只会将weibo对象创建成功</p><p>通过with来完成自动的事务提交：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transaction_with</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 事务练习：用户发布微博时候，顺便发布一条评论，只能同时成功，否则发生回滚 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获得一个用户</span></span><br><span class="line">    user = WeiboUser.objects.get(pk=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">with</span> transaction.atomic():</span><br><span class="line">        <span class="comment"># 发布一条微博和评论</span></span><br><span class="line">        weibo = Weibo.objects.create(user=user, content=<span class="string">&#x27;事务练习_with&#x27;</span>, source=<span class="string">&#x27;other&#x27;</span>)</span><br><span class="line">        WeiboComment.objects.create(user=user, content=<span class="string">&#x27;事务练习_with&#x27;</span>, weibo=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ojbk&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="手动提交事务"><a href="#手动提交事务" class="headerlink" title="手动提交事务"></a>手动提交事务</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transaction_hand</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 事务练习：用户发布微博时候，顺便发布一条评论，只能同时成功，否则发生回滚 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获得一个用户</span></span><br><span class="line">    user = WeiboUser.objects.get(pk=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 放弃自动提交</span></span><br><span class="line">        transaction.set_autocommit(<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># 发布一条微博和评论</span></span><br><span class="line">        weibo = Weibo.objects.create(user=user, content=<span class="string">&#x27;事务练习_hand&#x27;</span>, source=<span class="string">&#x27;other&#x27;</span>)</span><br><span class="line">        WeiboComment.objects.create(user=user, content=<span class="string">&#x27;事务练习_hand&#x27;</span>, weibo=<span class="literal">None</span>)</span><br><span class="line">        transaction.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        transaction.rollback()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ojbk&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="聚合与统计"><a href="#聚合与统计" class="headerlink" title="聚合与统计"></a>聚合与统计</h3><p>内置聚合函数：</p><p>聚合函数位于django.db.models中，有Sum、Avg、Count、Max/Min等</p><p>聚合的两种使用方法：</p><ol><li><p>使用aggregate从<font color='red'>整个</font>查询结果集生成统计数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg</span><br><span class="line">Book.objects.<span class="built_in">all</span>().aggregate(Avg(<span class="string">&#x27;price&#x27;</span>))</span><br><span class="line"><span class="comment"># 获得的对象为字典格式 &#123;&#x27;price__avg&#x27;: 34.35&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>使用annotate为查询结果集中的<font color='red'>每一项</font>生成统计数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Count</span><br><span class="line">q = Book.objects.annotate(Count(<span class="string">&#x27;authors&#x27;</span>))</span><br><span class="line"><span class="comment"># 查询第一个作者的书籍数量</span></span><br><span class="line">q[<span class="number">0</span>].author__count</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>举例：<br>有学生成绩模型和填充的数据表如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu_info</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 学生表 &quot;&quot;&quot;</span></span><br><span class="line">    student_name = models.CharField(<span class="string">&#x27;student_name&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    student_tel = models.CharField(<span class="string">&#x27;student_tel&#x27;</span>, max_length=<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;stu_info&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Score</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 学生分数表 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># related_name方便在聚合统计时候使用外键关联对象</span></span><br><span class="line">    student = models.ForeignKey(Stu_info, models.CASCADE, related_name=<span class="string">&#x27;stu_sco&#x27;</span>)</span><br><span class="line">    subject = models.CharField(<span class="string">&#x27;subject_name&#x27;</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    score = models.PositiveIntegerField(<span class="string">&#x27;sbuject_score&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">&#x27;stu_score&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200507235731189.png" alt="image-20200507235731189"></p><p>添加聚合统计的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Avg, Sum</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="keyword">from</span> score.models <span class="keyword">import</span> Stu_info,Score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aggre</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 计算所有成绩平均分</span></span><br><span class="line">    avg_score = Score.objects.<span class="built_in">all</span>().aggregate(avg=Avg(<span class="string">&#x27;score&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;average_score:&#x27;</span>, avg_score[<span class="string">&#x27;avg&#x27;</span>])</span><br><span class="line">    <span class="comment"># 计算单个学生的平均成绩</span></span><br><span class="line">    <span class="comment"># 相当于 SELECT student,SUM(score) FROM stu_score GROUP BY student</span></span><br><span class="line">    avg_score = Score.objects.values_list(<span class="string">&#x27;student&#x27;</span>).annotate(Avg(<span class="string">&#x27;score&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(avg_score)</span><br><span class="line">    <span class="comment"># 计算单个学生的平均成绩，但是可以显示两个表的内容 stu_sco是分数表中的related_name</span></span><br><span class="line">    <span class="comment"># 相当于 SELECT i.student_name,SUM(score) FROM stu_score s JOIN stu_info i ON i.id=s.student_id GROUP BY i.student_name</span></span><br><span class="line">    stu_list= Stu_info.objects.<span class="built_in">all</span>().annotate(Sum(<span class="string">&#x27;stu_sco__score&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> stu <span class="keyword">in</span> stu_list:</span><br><span class="line">        <span class="built_in">print</span>(stu.student_name,stu.stu_sco__score__sum)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>控制台返回结果：</p><p>average_score: 84.6667<br>&lt;QuerySet [(1, 86.6667), (2, 89.3333), (3, 78.0)]&gt;<br>gan 260<br>lee 268<br>wong 234</p><h2 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h2><h3 id="自定义查询函数Q"><a href="#自定义查询函数Q" class="headerlink" title="自定义查询函数Q"></a>自定义查询函数Q</h3><p>多个可选的查询条件：</p><ul><li>使用Q()函数实现复杂的查询</li><li>Q()函数支持&amp;（且）和|（或），对应SQL中的AND和OR</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_q</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 通过url指定name参数，查询参数中的username或nickname为指定参数的用户</span></span><br><span class="line">    name = request.GET.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    query = Q(username=name) | Q(nickname=name)</span><br><span class="line">    user_list = WeiboUser.objects.<span class="built_in">filter</span>(query)</span><br><span class="line">    <span class="built_in">print</span>(user_list)</span><br><span class="line">    <span class="comment"># 通过url指定参数，查询多条件数据</span></span><br><span class="line">    name = request.GET.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    query = Q(username=name) &amp; Q(password=<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    user_list = WeiboUser.objects.<span class="built_in">filter</span>(query)</span><br><span class="line">    <span class="built_in">print</span>(user_list)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(url中的参数通过?name=xxx传递)</p><h3 id="自定义查询函数F"><a href="#自定义查询函数F" class="headerlink" title="自定义查询函数F"></a>自定义查询函数F</h3><p>F()函数的使用：<br>F()函数从数据库操作层面修改数据<br>F()函数可避免同时操作时竞态条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeThread</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 改变用户状态 使用自定义查询F()&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, max_count=<span class="number">100</span>, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        self.max_count = max_count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        user = WeiboUser.objects.get(pk=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 最多循环max_count次数</span></span><br><span class="line">            <span class="keyword">if</span> count &gt;= self.max_count:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 原本是10 set status=11</span></span><br><span class="line">            <span class="comment"># user.status += 1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 相当于SET status=status+1</span></span><br><span class="line">            user.status = F(<span class="string">&#x27;status&#x27;</span>) + <span class="number">1</span></span><br><span class="line">            user.save()</span><br><span class="line">            <span class="built_in">print</span>(self.getName(), count)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    t1 = ChangeThread(max_count=<span class="number">200</span>)</span><br><span class="line">    t2 = ChangeThread(max_count=<span class="number">400</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><h3 id="使用SQL查询"><a href="#使用SQL查询" class="headerlink" title="使用SQL查询"></a>使用SQL查询</h3><p>关联多张表的时候需要使用sql查询</p><h4 id="管理器raw-sql-查询"><a href="#管理器raw-sql-查询" class="headerlink" title="管理器raw(sql)查询"></a>管理器raw(sql)查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw(raw_query,params=<span class="literal">None</span>,translations=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># 返回django.db.models.query.RawQuerySet实例</span></span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">raw_sql</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 通过url传入指定参数</span></span><br><span class="line">    username = request.GET.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    sql = (</span><br><span class="line">        <span class="string">&#x27;SELECT id FROM weibo_user &#x27;</span></span><br><span class="line">        <span class="string">&#x27;WHERE username=%s&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    user_list = WeiboUser.objects.raw(sql, (username,))</span><br><span class="line">    <span class="comment"># user_list对象是一个RawQuerySet</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">        <span class="comment"># user也只是单个Query,可指定其字段</span></span><br><span class="line">        <span class="built_in">print</span>(user.nickname)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="获取数据库连接、游标、直接执行sql"><a href="#获取数据库连接、游标、直接执行sql" class="headerlink" title="获取数据库连接、游标、直接执行sql"></a>获取数据库连接、游标、直接执行sql</h4><p>类似于python操作数据库，举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 获取数据库的连接</span></span><br><span class="line">    <span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line">    <span class="comment"># 根据连接获取游标</span></span><br><span class="line">    cursor = connection.cursor()</span><br><span class="line">    sql = (</span><br><span class="line">        <span class="string">&#x27;SELECT id,username,nickname FROM weibo_user &#x27;</span></span><br><span class="line">        <span class="string">&#x27;WHERE id=%s&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 执行sql</span></span><br><span class="line">    cursor.execute(sql, (<span class="number">3</span>,))</span><br><span class="line">    <span class="comment"># 查询结果</span></span><br><span class="line">    user_list = cursor.fetchall()</span><br><span class="line">    <span class="comment"># user_list对象是一个元组</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> user_list:</span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="自定义SQL分页"><a href="#自定义SQL分页" class="headerlink" title="自定义SQL分页"></a>自定义SQL分页</h3><ol><li>为SQL添加LIMIT及OFFSET分页处理</li><li>根据页面参数page生成偏移量</li><li>封装分页类</li><li>返回记录总数</li><li>返回总页数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqlpaginator</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; sql语句分页查询 &quot;&quot;&quot;</span></span><br><span class="line">    sql = (</span><br><span class="line">        <span class="string">&#x27;SELECT id,nickname FROM weibo_user &#x27;</span></span><br><span class="line">        <span class="string">&#x27;WHERE id &gt; %s &#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        param = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;id&gt;&#x27;</span>))</span><br><span class="line">        page = <span class="built_in">int</span>(request.GET.get(<span class="string">&#x27;page&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 调用自定义异常</span></span><br><span class="line">        <span class="keyword">raise</span> InputError</span><br><span class="line">     <span class="comment"># 调用自定义SQL分页查询方法</span></span><br><span class="line">    sql_paginator = SQLPaginator(sql, param, page_size=<span class="number">10</span>)</span><br><span class="line">    rest = sql_paginator.page(page)</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> rest:</span><br><span class="line">        <span class="built_in">print</span>(user)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;总记录数：&#x27;</span>, sql_paginator.count)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;总页数：&#x27;</span>, sql_paginator.page_count)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;ok&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 自定义异常处理 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLPaginator</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 封装sql分页器 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, sql, param, page_size</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.sql = sql  <span class="comment"># 传入sql语句</span></span><br><span class="line">        self.param = param  <span class="comment"># 传入其他的参数</span></span><br><span class="line">        self.page_size = page_size  <span class="comment"># 传入单个页面大小</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">page_count</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 查询总页数 &quot;&quot;&quot;</span></span><br><span class="line">        page_count = math.ceil(self.count / self.page_size)</span><br><span class="line">        <span class="keyword">return</span> page_count</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 查询总记录数&quot;&quot;&quot;</span></span><br><span class="line">        sql = (</span><br><span class="line">            <span class="string">&#x27;SELECT COUNT(1) FROM ( &#x27;</span></span><br><span class="line">            <span class="string">&#x27;&#123;&#125;) AS search_list&#x27;</span></span><br><span class="line">        ).<span class="built_in">format</span>(self.sql)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor = connection.cursor()</span><br><span class="line">            cursor.execute(sql, (self.param,))</span><br><span class="line">            rest = cursor.fetchone()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            rest = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> rest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">page</span>(<span class="params">self, now_page</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 自定义页码 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># if now_page &gt; self.page_count or now_page &lt; 1:</span></span><br><span class="line">        <span class="comment">#     raise InputError</span></span><br><span class="line">        <span class="comment"># 设置查询偏移量</span></span><br><span class="line">        offset = <span class="built_in">int</span>((now_page - <span class="number">1</span>) * self.page_size)</span><br><span class="line">        sql = self.sql + <span class="string">&#x27; LIMIT %s OFFSET %s&#x27;</span></span><br><span class="line">        <span class="comment"># 调用游标，执行sql,返回结果</span></span><br><span class="line">        cursor = connection.cursor()</span><br><span class="line">        cursor.execute(sql, (self.param, self.page_size, offset))</span><br><span class="line">        rest = cursor.fetchall()</span><br><span class="line">        <span class="keyword">return</span> rest</span><br></pre></td></tr></table></figure><h3 id="代理和自定义管理器"><a href="#代理和自定义管理器" class="headerlink" title="代理和自定义管理器"></a>代理和自定义管理器</h3><p>管理器（Mnanager）：</p><ul><li>Manager是Django的模型进行数据库查询操作的接口</li><li>每个模型都拥有至少一个Manager</li><li>Django为每个模型添加一个名为objects的默认Manager</li></ul><p>在models中添加一个自定义管理器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span>(<span class="params">models.Manager</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 自定义管理器 &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top_user</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 返回最近创建的三个用户 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 直接调用现有方法，也可以使用cusor-sql方法查询</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">all</span>().order_by(<span class="string">&#x27;-pk&#x27;</span>)[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>然后在其他模型class中添加调用该自定义管理器，如下在WeiboUser创建实例<code>users=UserManager()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python console中操作</span></span><br><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser</span><br><span class="line"><span class="comment"># 然后就可以调用该自定义管理器中的方法</span></span><br><span class="line">WeiboUser.users.top_user()</span><br></pre></td></tr></table></figure><p>代理的使用在<strong>模型的元数据</strong>单元中，不再赘述</p><h3 id="调试及查询优化"><a href="#调试及查询优化" class="headerlink" title="调试及查询优化"></a>调试及查询优化</h3><p>首先要知道查询中最耗时的部分，就需要知道执行了那些SQL语句</p><ol><li><p>QuerySet.query属性查看执行的SQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> weibo.models <span class="keyword">import</span> WeiboUser <span class="keyword">as</span> User</span><br><span class="line">user_list = User.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># .query返回的是一个查询结果集对象,需要转化为字符串</span></span><br><span class="line"><span class="built_in">str</span>(user_list.query)</span><br><span class="line"><span class="comment"># SELECT XXX FROM XXX</span></span><br></pre></td></tr></table></figure></li><li><p>使用django-debug-toolbar</p><p>安装：<code>pip install django-debug-toolbar</code></p><p>参照<a href="https://django-debug-toolbar.readthedocs.io/en/latest">官方文档</a>进行相关配置：</p><p>项目settings中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;debug_toolbar&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="comment"># 这一项需要放在尽可能靠前的位置</span></span><br><span class="line">    <span class="string">&#x27;debug_toolbar.middleware.DebugToolbarMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">INTERNAL_IPS = [</span><br><span class="line">    <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>项目urls中添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">    <span class="keyword">import</span> debug_toolbar</span><br><span class="line">    urlpatterns += [</span><br><span class="line">        path(<span class="string">&#x27;__debug__/&#x27;</span>, include(debug_toolbar.urls)),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>当页面加载后可以在浏览器的侧边看到关于页面的很多信息，包括SQL查询：</p><p><img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200512153337721.png" alt="image-20200512153337721"></p></li></ol><h5 id="外键关联优化查询"><a href="#外键关联优化查询" class="headerlink" title="外键关联优化查询"></a>外键关联优化查询</h5><p><code>QuerySet.select_related()</code><br>将外键关联的对象查询合并到主查询，一次性查询结果，减少SQL执行的数量</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for comment in comment_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            评论内容：&#123;&#123; comment.content &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            用户：&#123;&#123; comment.user &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            关联微博：&#123;&#123; comment.weibo &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;# user和weibo是外键关联项 #&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql_opitimize</span>(<span class="params">request</span>):</span></span><br><span class="line">    comment_list = WeiboComment.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;sql_optimize.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;comment_list&#x27;</span>: comment_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>当加载页面时，会先一次性查询完WeiboComment表中的信息，再依次查询每条记录关联的表（如下图），这样每一条记录都需要查询一次关联表，造成了资源浪费，低效。</p><p><img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200512153911106.png" alt="image-20200512153911106"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sql_opitimize</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 将外键关联的对象查询合并到主查询，一次性查询结果，减少SQL执行的数量</span></span><br><span class="line">    comment_list = WeiboComment.objects.<span class="built_in">all</span>().select_related()</span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;sql_optimize.html&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;comment_list&#x27;</span>: comment_list</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>优化后：</p><p><img src="Django%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84-ORM/image-20200512154043413.png" alt="image-20200512154043413"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统（基础篇）</title>
      <link href="/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/04/15/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="导学"><a href="#导学" class="headerlink" title="导学"></a>导学</h2><p><strong>操作系统演进</strong>：</p><ol><li><p>无操作系统</p><p>人工操作，用户独占，CPU等待人工操作，资源利用率很低</p></li><li><p>批处理系统</p><p>无需等待人工操作，批量输入任务，资源利用率提升，多道程序设计</p></li><li><p>分时系统</p><p>人-机交互，多用户共享，及时调试程序，资源利用率提升</p></li></ol><p><strong>多道程序设计设计</strong>：</p><p>早起批处理系统只能一次处理一个任务，多道程序设计使得批处理系统可以一次处理多个任务。对多道程序的管理是操作系统的重要功能。</p><ul><li>多道程序设计是指在计算机内存中同时存放多个程序</li><li>多道程序在计算机的管理程序之下相互穿插运行</li></ul><p><strong>操作系统对多道程序的管理</strong>分为五大功能：进程管理、存储管理、作业管理、文件管理、设备管理</p><h2 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h2><h3 id="操作系统概念"><a href="#操作系统概念" class="headerlink" title="操作系统概念"></a>操作系统概念</h3><p>操作系统是管理计算机硬件和软件资源的计算机程序；管理配置内存、决定资源供需顺序、控制输入输出设备等；操作系统提供让用户和系统交互的操作界面。该定义不局限于计算机</p><h3 id="操作系统的基本功能"><a href="#操作系统的基本功能" class="headerlink" title="操作系统的基本功能"></a>操作系统的基本功能</h3><ul><li><p>处理器资源、存储器资源、IO设备资源、文件资源。操作系统统一管理这这些计算机资源。</p></li><li><p>用户无需面向硬件接口编程</p><p>IO设备管理软件，提供读写接口</p><p>文件管理软件，提供操作文件接口</p><p>实现了对计算机资源的抽象</p></li><li><p>提供了用户于计算机之间的接口</p><p>图像窗口形式、命令形式、系统调用形式</p></li></ul><h3 id="操作系统的相关概念"><a href="#操作系统的相关概念" class="headerlink" title="操作系统的相关概念"></a>操作系统的相关概念</h3><ul><li><p>并发性</p><p><font color='red'>并行是指两个或多个事件可以在同一个时刻发生，并发是指两个或多个事件可以在同一个时刻间隔发生。</font></p><p>对于单处理器来说，有两个程序交替运行，两个程序并发关系；对双处理器来说，两个程序可同一时刻运行，是并行关系，但是对于单个核心，依然是并发关系。</p></li><li><p>共享性</p><p>表现为操作系统中的资源可供多个并发的程序共同使用，这种共同使用的形式称之为资源共享。</p><p>资源共享根据属性可以分为两种方式：互斥共享形式、同时访问形式。<strong>互斥共享</strong>：当资源被程序或进程A占用时，只有A使用完之后，其他才可以使用（如打印机）；<strong>同时访问</strong>：某种资源在一段时间内并发地被多个程序访问</p></li><li><p>虚拟性</p><p>虚拟性表现为把一个物理实体转变为若干个逻辑实体，虚拟的技术主要有<strong>时分复用技术</strong>和<strong>空分复用技术</strong>。</p><p><strong>时分复用技术</strong>：资源在时间上进行复用，不同程序并发使用，多道程序分时使用计算机的硬件资源，提高资源的利用率。其中<strong>虚拟处理器技术</strong>是借用多道程序设计为每个程序建立进程，多个程序分时复用处理器；<strong>虚拟设备技术</strong>是物理设备虚拟为多个逻辑设备，每个程序占用一个逻辑设备，多个程序并发访问</p><p><strong>空分复用技术</strong>：用来实现虚拟磁盘、虚拟内存等，提高资源的利用率，提升编程效率。</p></li><li><p>异步性</p><p>表现为多道程序环境下，允许多个进程并发执行；进程在使用资源时可能需要等待或放弃；进程的执行并不是一气呵成的，而是以走走停停的形式推进</p></li></ul><h2 id="进程管理之进程实体"><a href="#进程管理之进程实体" class="headerlink" title="进程管理之进程实体"></a>进程管理之进程实体</h2><h3 id="为什么需要进程"><a href="#为什么需要进程" class="headerlink" title="为什么需要进程"></a>为什么需要进程</h3><ul><li>进程是系统进行资源分配和调度的基本单位</li><li>进程作为程序独立运行的载体保障程序正常执行</li><li>进程的存在使得操作系统的资源利用率大幅提升</li></ul><h3 id="进程的实体"><a href="#进程的实体" class="headerlink" title="进程的实体"></a>进程的实体</h3><ul><li><p>标识符，唯一标记一个进程，用于区别其他进程</p></li><li><p>状态，标记进程的进程状态，如：运行态</p></li><li><p>程序计数器，程序即将被执行的下一条指令的地址</p></li><li><p>内存指针，程序代码、进程数据相关指针</p></li><li><p>上下文数据，<font color=red>进程执行时处理器存储的数据</font></p></li><li><p>IO状态信息，被进程IO操作所占用的文件列表</p></li><li><p>记账信息，使用处理器时间、时钟数总和等</p></li></ul><p><strong>进程控制块（PCB）</strong>：</p><p>用于描述和控制进程运行的通用数据结构，记录进程当前状态和控制进程运行的全部信息。是使得进程能够独立运行的基本单位。</p><p>PCB是操作系统进行调度进程会被读取的信息，PCB是常驻内存的，存放在系统专门开辟的PCB区域内。</p><p><strong>进程（Process）与线程（Thread）</strong>：</p><p>一个进程可以有多个线程。线程是操作系统进行运行调度的最小单位，包含在进程之中，是进程中实际运行工作的单位。一个进程可以并发多个线程，每个线程执行不同的任务。</p><table><thead><tr><th></th><th>进程</th><th>线程</th></tr></thead><tbody><tr><td>资源</td><td>资源分配的基本单位</td><td>不拥有资源</td></tr><tr><td>调度</td><td>独立调度的基本单位</td><td>独立调度的最小单位</td></tr><tr><td>系统开销</td><td>进程系统开销大</td><td>线程系统开销小</td></tr><tr><td>通信</td><td>进程IPC</td><td>读写同一进程数据通信</td></tr></tbody></table><h2 id="进程管理之五状态模型"><a href="#进程管理之五状态模型" class="headerlink" title="进程管理之五状态模型"></a>进程管理之五状态模型</h2><p>就绪    阻塞    执行    创建    终止</p><h3 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h3><ul><li>当进程被分配到除CPU以外所有必要的资源后，只要再获得CPU的使用权，就可以立即运行</li><li>其他资源都准备好，只差CPU资源的状态为就绪状态</li><li>在一个系统中多个处于就绪状态的进程通常排成一个队列</li></ul><h3 id="执行状态"><a href="#执行状态" class="headerlink" title="执行状态"></a>执行状态</h3><ul><li>进程获得CPU，其程序正在执行称为执行状态</li><li>在单处理机中，在某个时刻只能有一个进程是处于执行状态</li></ul><h3 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h3><ul><li>进程因某种原因如：其他设备未就绪而无法继续执行，从而放弃CPU的状态称为阻塞状态</li></ul><h3 id="创建状态"><a href="#创建状态" class="headerlink" title="创建状态"></a>创建状态</h3><ul><li>创建进程时拥有PCB但其他资源尚未就绪的状态称为创建状态</li></ul><p>操作系统提供fork函数接口创建进程</p><h4 id="终止状态"><a href="#终止状态" class="headerlink" title="终止状态"></a>终止状态</h4><ul><li>进程结束由系统清理或者归还PCB的状态称为终止状态</li></ul><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200422171720968.png" alt="image-20200422171720968"></p><h2 id="进程管理之进程同步"><a href="#进程管理之进程同步" class="headerlink" title="进程管理之进程同步"></a>进程管理之进程同步</h2><p>需要同步的原因：实现进程彼此之间的同步，对竞争资源在多进程间进行使用次序的协调，使得并发执行的多个进程之间可以有效使用资源和相互合作。</p><h3 id="进程间同步的原则"><a href="#进程间同步的原则" class="headerlink" title="进程间同步的原则"></a>进程间同步的原则</h3><p><strong>临界资源</strong>：临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。当有进程在使用临界资源时，其他进程必须依据操作系统额同步机制等待占用进程释放该共享资源才可重新竞争使用资源。</p><p>为了对临界资源使用进行约束，有四个使用原则：</p><ul><li>空闲让进：资源无占用，允许使用</li><li>忙则等待：资源有占用，请求（其他）进程等待</li><li>有限等待：保证（其他进程）有限等待时间能够使用资源</li><li>让权等待：等待时，进程需要让出CPU（即进程由运行状态进入阻塞状态）</li></ul><p>同步方法：</p><p>消息队列    共享存储    信号量</p><p>（详见下文）</p><h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><p>进程内多线程也需要同步</p><p>线程同步的方法：</p><p>互斥量    读写锁    自旋锁    条件变量</p><p>（详见下文）</p><h2 id="Linux的进程管理"><a href="#Linux的进程管理" class="headerlink" title="Linux的进程管理"></a>Linux的进程管理</h2><h3 id="Linux进程相关概念"><a href="#Linux进程相关概念" class="headerlink" title="Linux进程相关概念"></a>Linux进程相关概念</h3><h4 id="进程的类型："><a href="#进程的类型：" class="headerlink" title="进程的类型："></a>进程的类型：</h4><p>前台进程    后台进程    守护进程</p><p><strong>前台进程</strong>：具有终端，可以和用户交互的进程</p><p><strong>后台进程</strong>：与前台进程相对，没有占用终端的就是后台进程；后台程序基本上不和用户交互，优先级比前台进程低，不影响前台进程。<font color='red'>将需要执行的命令以“&amp;”符号结束</font></p><p><strong>守护进程</strong>：守护(daemon)进程是特殊的后台进程；很多守护进程在系统引导的时候启动，一直运行知道系统关闭。crond    hhtpd    sshd    mysqld等</p><p>进程名字以‘d’结尾的一般都是守护进程</p><h4 id="进程的标记"><a href="#进程的标记" class="headerlink" title="进程的标记"></a>进程的标记</h4><ul><li><p>进程ID是进程的唯一标识，每个进程拥有不同的ID</p></li><li><p>进程ID表现为一个非负整数，最大值由操作系统限定</p></li></ul><p>top命令查看系统进程</p><p>ID为0的进程为idle进程，是系统创建的第一个进程</p><p>ID为1的进程是init进程，是0号进程的子进程，完成系统初始化</p><p>Init进程是所有用户进程的祖先进程</p><p><strong>进程的状态标记</strong></p><table><thead><tr><th>状态符号</th><th>状态说明</th></tr></thead><tbody><tr><td>R</td><td>(TASK_RUNNING)，进程正处于运行状态</td></tr><tr><td>S</td><td>(TASK_INTERRUPTIBLE)，进程正处于睡眠状态</td></tr><tr><td>D</td><td>(TASK_UNINTERRUPTIBLE)，进程正处于IO等待的睡眠状态</td></tr><tr><td>T</td><td>(TASK_STOPPED)，进程正处于暂停状态</td></tr><tr><td>Z</td><td>(TASK_DEAD or EXIT_ZOMBIE)，进程正处于退出状态，或僵尸进程</td></tr></tbody></table><p><code>man ps</code>命令显示进程相关的命令说明</p><p>后台运行一个python程序，打印该进程状态 S状态，处于睡眠状态</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200422205300367.png" alt="image-20200422205300367"></p><h4 id="操作Linux进程的相关命令"><a href="#操作Linux进程的相关命令" class="headerlink" title="操作Linux进程的相关命令"></a>操作Linux进程的相关命令</h4><p><strong>ps命令</strong>：</p><p><code>ps</code>列出当前的进程</p><p><code>ps aux</code> 打印进程详细信息</p><p><code>ps -u root</code> 查看root用户进程</p><p><code>ps -aux | grep &#39;pyhton3&#39;</code>查看python3进程</p><p><code>ps -ef --forest</code>可打印进程父子状态</p><p><code>ps -aux --sort=pcpu</code>按cpu频率查看进程 pmem 按内存排序</p><ul><li>ps命令产用于显示当前进程的状态</li><li>ps命令常配合aux参数或ef参数和grep命令检索特定进程</li></ul><p><strong>top命令</strong>：<br>查看进程的状态</p><p><strong>kill命令</strong>：</p><p>kill后台进程 -9表示无条件停止</p><h2 id="作业管理之进程调度"><a href="#作业管理之进程调度" class="headerlink" title="作业管理之进程调度"></a>作业管理之进程调度</h2><p><strong>进程调度</strong>是指计算机通过决策哪个就绪进程可以获得CPU使用权</p><ul><li>保留旧进程的运行信息，请出旧进程（收拾包袱）</li><li>选择新进程，准备运行环境并分配CPU（新进驻）</li></ul><p>进程调度的三种机制：</p><ol><li><p>就绪队列的排队机制</p><p>将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程</p></li><li><p>选择运行进程的委派机制</p><p>调度程序以一定的策略选择就绪进程，将CPU资源分配给它</p></li><li><p>新老进程的上下文切换机制</p><p>保存当前进程的上下文信息，装入被委派执行进程的运行上下文</p></li></ol><p>如果进程调度时候，老进程还没执行完，有两种调度方式：</p><ol><li><p>非抢占式的调度抢</p><p>处理器一旦分配给某个进程，就让该进程一直使用下去，调度程序不以任何原因抢占正在被使用的处理器，直到进程完成工作或因为IO阻塞才会让出处理器</p></li><li><p>抢占式的调度</p><p>允许调度程序以一定的策略暂停当前运行的进程，保存好进程的上下文信息，分配处理器给新进程</p></li></ol><table><thead><tr><th></th><th>抢占式调度</th><th>非抢占式调度</th></tr></thead><tbody><tr><td>系统开销</td><td>频繁切换、开销大</td><td>切换次数少、开销小</td></tr><tr><td>公平性</td><td>相对公平</td><td>不公平</td></tr><tr><td>应用</td><td>通用系统</td><td>专用系统</td></tr></tbody></table><h3 id="进程调度的算法"><a href="#进程调度的算法" class="headerlink" title="进程调度的算法"></a>进程调度的算法</h3><h4 id="先来先服务调度算法"><a href="#先来先服务调度算法" class="headerlink" title="先来先服务调度算法"></a>先来先服务调度算法</h4><p>优先取出队列前面的进程进行调度</p><h4 id="短进程优先调度算法"><a href="#短进程优先调度算法" class="headerlink" title="短进程优先调度算法"></a>短进程优先调度算法</h4><p>调度程序优先选择就绪队列中估计运行时间最短的进程，短进程优先调度算法不利于长作业进程的执行</p><h4 id="高优先权先调度算法"><a href="#高优先权先调度算法" class="headerlink" title="高优先权先调度算法"></a>高优先权先调度算法</h4><p>进程附带优先权，调度程序优先选择权重高的进程，高优先权优先调度算法使得紧迫的任务可以优先处理</p><h4 id="时间片轮转调度算法"><a href="#时间片轮转调度算法" class="headerlink" title="时间片轮转调度算法"></a>时间片轮转调度算法</h4><p>按先来先服务的原则排列就绪进程，每次从队列头部去除待执行进程，分配一个时间片执行，是相对公平的调度算法，但不能保证及时响应用户</p><h2 id="作业管理之死锁"><a href="#作业管理之死锁" class="headerlink" title="作业管理之死锁"></a>作业管理之死锁</h2><p><strong>死锁</strong>：死锁是指两个或两个以上的线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p><h3 id="死锁的产生"><a href="#死锁的产生" class="headerlink" title="死锁的产生"></a>死锁的产生</h3><ol><li><p>竞争资源：共享资源数量不满足各个进程的需求，各个进程之间发生资源进程导致死锁</p></li><li><p>调用顺序不当</p></li></ol><p>死锁产生的四个必要条件：</p><ol><li><p>互斥条件</p><p>进程对资源的使用时排他性的使用，某资源只能由一个进程使用，其他进程需要使用只能等待</p></li><li><p>请求保持条件</p><p>进程至少保持一个资源，又提出新的资源请求，新资源被占用，被阻塞的进程不释放自己保持的资源</p></li><li><p>不可剥夺条件</p><p>进程获得的资源在未完成使用前不能被剥夺，获得的资源只能由进程自身释放</p></li><li><p>环路等待条件</p><p>发生死锁时，必然存在进程-资源环形链</p></li></ol><h3 id="死锁的处理"><a href="#死锁的处理" class="headerlink" title="死锁的处理"></a>死锁的处理</h3><h4 id="预防死锁的方法"><a href="#预防死锁的方法" class="headerlink" title="预防死锁的方法"></a>预防死锁的方法</h4><p>破坏四个必要条件之一</p><ol><li><p>摒弃请求保持条件</p><p>系统规定进程运行之前，一次性申请所有需要的资源，进程在运行期间不会提出资源请求，从而摒弃请求保持条件</p></li><li><p>摒弃不可剥夺条件</p><p>当一个进程请求新的资源得不到满足时，必须释放占有的资源，进程运行时占有的资源可以被释放，意味着可以被剥夺</p></li><li><p>摒弃环路等待条件</p><p>可用资源线性排序，申请必须按照需要递增申请，线性申请不再形成环路，从而摒弃了环路等待条件</p></li></ol><h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><p>策略原理：客户申请的贷款是有限的，每次申请需要申请最大资金量，银行家在能够满足贷款时，都应该给用户贷款，客户在使用贷款后，能够及时归还贷款</p><h2 id="存储管理之内存分配与回收"><a href="#存储管理之内存分配与回收" class="headerlink" title="存储管理之内存分配与回收"></a>存储管理之内存分配与回收</h2><p>早期计算机编程并不需要过多的存储管理，随着计算机和程序越来越复杂，存储管理成为必要。</p><p>存储管理的作用：</p><ul><li>确保计算机有足够的内存 处理数据</li><li>确保程序可以从可用内存中获取一部分内存使用</li><li>确保程序可以归还使用后的内存以供其他程序使用</li></ul><h3 id="内存分配的过程"><a href="#内存分配的过程" class="headerlink" title="内存分配的过程"></a>内存分配的过程</h3><p>单一连续分配是最简单的内存分配方式，只能在单用户、单进程的操作系统中使用</p><p>固定分区分配：支持多道程序的最简单存储分配方式，内存空间被划分为若干固定大小的区域，每个分区只提供给一个程序使用，互不干扰。</p><p><strong>动态分区分配</strong>：根据进程实际需要，动态分配内存空间，涉及相关数据结构、分配算法</p><p>​    动态分区空闲表数据结构：将内存分为若干个分区，用一张表来表示分区使用情况：</p><p>​    <img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429141319922.png" alt="image-20200429141319922"></p><p>​    0表示没有被占用，1表示被占用</p><p>​    动态分区空闲链数据结构：通过链把未被使用的分区以节点的形式连接起来，同时相邻的分区节点可以进行合并，节点需记录可存储容量</p><p>​    <img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429141649750.png" alt="image-20200429141649750"></p><p><strong>动态分区分配算法</strong>：</p><p>首次适应算法（FF算法）：分配内存时从开始顺序查找适合内存区，若没有合适的空闲区，则该次分配失败。每次从头部开始，使得头部空间不断被划分。</p><p>最佳适应算法（BF算法）：最佳适应算法要求空闲链表按照容量大小排序，遍历空闲区链表找到最佳合适空闲区。</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429142352694.png" alt="image-20200429142352694" title="先将上表按容量大小排列成下表"></p><p>快速适应算法（QF算法）：快速适应算法要求有多个空闲区链表，每个空闲区链表存储一种容量的空闲区。</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429142832340.png" alt="image-20200429142832340"></p><h3 id="内存回收的过程"><a href="#内存回收的过程" class="headerlink" title="内存回收的过程"></a>内存回收的过程</h3><table><thead><tr><th></th><th>情况1</th><th>情况2</th><th>情况3</th><th>情况4</th></tr></thead><tbody><tr><td></td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td></td><td>空闲区1</td><td><font color='red'>回收区</font></td><td>空闲区1</td><td>…</td></tr><tr><td></td><td><font color='red'>回收区</font></td><td>空闲区1</td><td><font color='red'>回收区</font></td><td>回收区</td></tr><tr><td></td><td>…</td><td>…</td><td>空闲区2</td><td>…</td></tr><tr><td></td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>解决方案</td><td>不需要新建空闲链表节点，只需要把空闲区1的容量增大为空闲区即可</td><td>将回收区与空闲区合并，新的空闲区使用回收区的地址</td><td>将空闲区1、空闲区2和回收区合并，新的空闲区使用空闲区1的地址</td><td>为回收区创建新的空闲节点，插入到相应的空闲区链表中去</td></tr></tbody></table><h2 id="存储管理之段页式存储管理"><a href="#存储管理之段页式存储管理" class="headerlink" title="存储管理之段页式存储管理"></a>存储管理之段页式存储管理</h2><h3 id="页式存储管理"><a href="#页式存储管理" class="headerlink" title="页式存储管理"></a>页式存储管理</h3><p>页面和字块都是大小一样的一块内存，<strong>字块</strong>是相对物理设备的定义，<strong>页面</strong>则是相对逻辑空间的定义</p><p>概念：将进程逻辑空间等分成若干大小的页面，相应的把物理内存空间分成与页面大小的物理块，以页面为单位把进程空间装进物理内存中分散的物理块。</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429144545117.png" alt="image-20200429144545117"></p><p>页面大小应该适用，过大难以分配，过小内存碎片过多，页面大小通常是512B~8K</p><p><strong>页表</strong>：记录进程逻辑空间与物理空间的映射</p><p><em>在现代计算机系统中，可以支持非常大的逻辑地址空间（2<sup>32</sup>~2<sup>64</sup>），这样，页表就变得非常大，要占用非常大的内存空间，如，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程中的页表项可达1M（2<sup>20</sup>）个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间。</em>    32位系统进程的寻址空间是4G，4G/4KB=2<sup>20</sup></p><ul><li>将进程逻辑空间等分成若干大小的页面</li><li>相应的把物理内存空间分成与页面大小的物理块</li><li>以页面为单位把进程空间装进物理内存中分散的物理块</li></ul><p>但是如果有一段连续的逻辑分布在多个页面中，将大大降低执行效率</p><h3 id="段式存储管理"><a href="#段式存储管理" class="headerlink" title="段式存储管理"></a>段式存储管理</h3><p>将进程逻辑空间划分成若干段（非等分），段的长度由连续逻辑的长度决定，主函数MAIN、子程序段X、子函数Y等。</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429171843469.png" alt="image-20200429171843469"></p><p>段表相比页表多了段长，用来记录逻辑长度。</p><p><strong>对比</strong>：</p><p>段氏存储和页式存储都离散地管理了进程的逻辑空间</p><ul><li>页是物理单位，段是逻辑单位</li><li>分页是为了合理利用空间，分段是满足用户要求</li><li>页大小由硬件固定，段长度可动态变化</li><li>页表信息是一维的，段表信息是二维的</li></ul><h3 id="段页式存储管理"><a href="#段页式存储管理" class="headerlink" title="段页式存储管理"></a>段页式存储管理</h3><p>分页可以有效提高内存利用率（虽然说存在页内碎片），分段可以更好满足用户需求，两者结合，形成段页式存储管理</p><p>先将逻辑空间按段式管理分成若干段，再把段内空间按页式管理等分成若干页</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200429193849286.png" alt="image-20200429193849286"></p><h2 id="存储管理之虚拟内存"><a href="#存储管理之虚拟内存" class="headerlink" title="存储管理之虚拟内存"></a>存储管理之虚拟内存</h2><ul><li>有些进程实际需要的内存很大，超过物理内存的容量</li><li>多道程序设计，使得每个进程可用物理内存更加稀缺</li><li>不可能无限增加物理内存，物理内存总有不够用的时候</li></ul><p><strong>虚拟内存</strong>是操作系统内存管理的关键技术，使得多道程序运行和大程序运行成为现实，把程序使用内存划分，将不封暂时不使用的内存放置在辅存</p><p><strong>程序的局部性原理</strong>指的是CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</p><p>程序运行时，无需全部装入内存，装载部分即可，如果访问页不在内存，则发出缺页中断，发起页面置换、从用户层面看，程序拥有很大的空间，即是虚拟内存。</p><p>虚拟内存实际是对物理内存的补充，速度接近于内存，成本接近于辅存</p><p><strong>虚拟内存的置换算法</strong>：先进先出算法（FIFO）、最不经常使用算法（LFU）、最近最少使用算法（LRU）。主存和辅存的替换</p><p>在计算机组成原理中有提到这些算法，应用于高速缓存与主存的替换。在这里将着重对比两种替换而不是算法。</p><ul><li>替换策略发生在Cache-主存层次，主存-辅存层次</li><li>Cache-主存层次的替换策略主要是为了解决<font color='red'>速度问题</font></li><li>主存-辅存层次主要是为了解决<font color='red'>容量问题</font></li></ul><h2 id="Linux的存储管理"><a href="#Linux的存储管理" class="headerlink" title="Linux的存储管理"></a>Linux的存储管理</h2><h3 id="Buddy内存管理算法"><a href="#Buddy内存管理算法" class="headerlink" title="Buddy内存管理算法"></a>Buddy内存管理算法</h3><p>Buddy算法是经典的内存管理算法，算法基于计算机处理二进制的优势具有极高的效率，算法主要是为了解决<font color='red'>内存外碎片</font>的问题，实际上是将内存外碎片问题转移为了内存内碎片的问题</p><p><strong>页内碎片</strong>是已经被分配出去（能明确指出属于哪个进程）的内存空间大于请求所需的内存空间，不能被利用的内存空间就是内部碎片。</p><p><strong>页外碎片</strong>是指还没有分配出去（不属于任何进程），但是由于太小而无法分配给申请内幕才能空间的新进程的内存空间块。</p><p>该算法努力让内存分配与相邻内幕才能合并能快速进行，内存分配原则：</p><ul><li>向上取整为2的幂大小 70k→128k    129k→256k</li></ul><p><strong>伙伴系统</strong>：‘伙伴’指的是内存的‘伙伴’，一片连续内存的‘伙伴’是相邻的另一片大小一样的连续内存。</p><p>假设存储空间有1M大小，来分配100k的内存：</p><p>1.100k向上取2的幂；2. 查询是否有128k的空闲内存块；3.没有！查询是否有256k空闲内存块；4.没有！查询是否有512k空闲内存块；5.没有！查询是否有1M的空闲内存块；6. 有，摘下1M空闲内存块，分配出去；7. 拆下512k放在512k的空闲链表，其余的分配出去；8. 拆下256k放在256k的空闲链表，其余的分配出去；9. 拆下128k的空闲链表，其余的分配出去；10. 分配完毕</p><p>回收刚才分配的内存：</p><p>1.判断刚才分配的内存伙伴在空闲链表上吗？2. 在！移除伙伴，合并为256k空闲内存，判断3. 在！移除伙伴，合并为512k空闲内存，判断；4. 在！移除伙伴，合并为1M空闲内存；5. 插入1M空闲链表，回收完成</p><h3 id="Linux交换空间"><a href="#Linux交换空间" class="headerlink" title="Linux交换空间"></a>Linux交换空间</h3><p>交换空间（Swap）是磁盘的一个分区，Linux物理内存满时，会把一些内存交换至Swap空间，Swap空间是初始化系统时配置的。top命令可以查询到</p><ul><li>冷启动内存依赖</li><li>系统睡眠依赖</li><li>大进程空间依赖</li></ul><p>交换空间与虚拟内存对比：</p><ul><li>Swap空间存在于磁盘，虚拟内存也存在于磁盘</li><li>Swap空间与主存发生置换 ，虚拟内存也是与主存发生置换</li><li>Swap空间是操作系统概念，虚拟内存是进程概念</li><li>Swap空间解决系统物理内存不足的问题，虚拟内存解决物理内存不足的问题</li></ul><h2 id="操作系统的文件管理"><a href="#操作系统的文件管理" class="headerlink" title="操作系统的文件管理"></a>操作系统的文件管理</h2><h3 id="文件的逻辑结构"><a href="#文件的逻辑结构" class="headerlink" title="文件的逻辑结构"></a>文件的逻辑结构</h3><div class="mermaid">graph TD;A[逻辑结构的文件类型]--&gt;B[有结构文件]A--&gt;C[无结构文件]C--&gt;D[二进制文件]C--&gt;E[链接库]B--&gt;F[文本文件]B--&gt;G[文档]B--&gt;H[媒体文件]</div><p>有结构文件：有结构内容由定长记录和可变长记录组成，定长记录存储格式、文件描述等结构化数据项，可变长记录存储文件具体内容</p><p>比如png图片文件，分为png文件标记、png数据块和文件结束标记。定长记录存储文件格式、文件描述等结构化数据项，如png文件标记和文件结束标记。可变长记录存储文件具体内容。</p><p>无结构文件：也称为流式文件，文件内容长度以字节为单位，比如exe，dll，so文件等</p><p>顺序文件：顺序文件是指按顺序存放在存储介质中的文件，磁带的存储特征使得磁带文件只能存储顺序文件，顺序文件是所有逻辑文件当中存储效率最高的。</p><p>索引文件：可变长文件不适合使用顺序文件格式存储，索引文件是为了解决可变长文件存储而发明的一种文件格式，索引文件需要配合索引表完成存储的操作。</p><h3 id="辅存的存储空间分配"><a href="#辅存的存储空间分配" class="headerlink" title="辅存的存储空间分配"></a>辅存的存储空间分配</h3><h4 id="辅存的分配方式"><a href="#辅存的分配方式" class="headerlink" title="辅存的分配方式"></a>辅存的分配方式</h4><div class="mermaid">graph TD;A[辅存的分配方式]--&gt;B[连续分配]A--&gt;C[链接分配]A--&gt;D[索引分配]C--&gt;E[隐式连接]C--&gt;F[显式链接]</div><p>连续分配：顺序读取文件内容非常容易，速度很快，对存储要求高，要求满足容量的连续存储空间</p><p>链接分配：链接分配可以将分拣存储在离散的盘块中，需要额外的存储空间存储文件的盘块链接顺序。其中<strong>隐式链接分配</strong>的下一个链接指向存储在当前盘块内，适合顺序访问，随机访问效率很低，可靠性差，任何一个链接出问题都影响整个文件；<strong>显式链接分配</strong>通过FAT（File Allocation Table）表存储相关链接。不支持高校的直接存储（FAT记录项多），检索FAT表时占用较大的存储空间（需要将整个FAT表加载到内存）</p><p>索引分配：把文件的所有盘块集中存储（索引），读取某个文件时，将文件索引读取进内存即可。每个文件拥有一个索引块，记录所有盘块信息，索引分配方式支持直接访问盘块，文件较大时，索引分配方式具有明显优势</p><h4 id="辅存的存储空间管理"><a href="#辅存的存储空间管理" class="headerlink" title="辅存的存储空间管理"></a>辅存的存储空间管理</h4><div class="mermaid">graph TD;A[存储空间管理]--&gt;B[空闲表]A--&gt;C[空闲链表]A--&gt;D[位示图]</div><p>空闲表：空闲盘区分分配与内存分配类似，首次适应算法、循环适应算法等，回收过程也与内存回收类似</p><p>空闲链表：空闲链表法把所有空闲盘区组成一个空闲链表，每个链表节点存储空闲盘块和空闲的数目</p><p>位示图：每个盘块有0/1比特位表示是否被占用。位示图维护成本低，位示图可以非常容易找到空闲盘块，位示图使用0/1比特位，占用空间很小。该方法在辅存中最为常用</p><h4 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h4><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511150223807.png" alt="image-20200511150223807"></p><p>任何文件或目录都只有唯一路径 例如 A/D/M</p><h2 id="Linux文件基本操作"><a href="#Linux文件基本操作" class="headerlink" title="Linux文件基本操作"></a>Linux文件基本操作</h2><h3 id="Linux目录"><a href="#Linux目录" class="headerlink" title="Linux目录"></a>Linux目录</h3><p>Linux一切皆是文件</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511151640541.png" alt="image-20200511151640541"></p><p>绝对路径    相对路径</p><h3 id="Linux文件常用操作"><a href="#Linux文件常用操作" class="headerlink" title="Linux文件常用操作"></a>Linux文件常用操作</h3><p>创建文件 <code>touch 文件名</code>    创建并修改文件 <code>vim 文件名</code>    查看文件<code>vim</code> 也可以使用<code>cat 文件名</code>    删除文件 <code>rm 文件名</code>    创建文件夹 <code>mkdir名字</code>     删除文件夹 <code>rm -r 名字</code></p><h3 id="Linux文件类型"><a href="#Linux文件类型" class="headerlink" title="Linux文件类型"></a>Linux文件类型</h3><p>Linux有这些文件类型：套接字(s)、普通文件(-)、目录文件(d)、符号链接(l)、设备文件(b、c)、FIFO(p)</p><p>通过<code>ls -al</code>可以查看文件属性，首字母表示文件类型。其中b和c分别表示块设备、字符设备</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511153038687.png" alt="image-20200511153038687"></p><h2 id="Linux的文件系统"><a href="#Linux的文件系统" class="headerlink" title="Linux的文件系统"></a>Linux的文件系统</h2><h3 id="文件系统概览"><a href="#文件系统概览" class="headerlink" title="文件系统概览"></a>文件系统概览</h3><p>FAT、NTFS、EXT2/3/4</p><p>FAT(File Allocation Table)，分为FAT16、FAT32等，微软Dos/Windows使用的文件系统，使用一张表来保存盘块的信息</p><p>NTFS(New Technology File System)，WindowsNT环境的文件系统，NTFS对FAT进行了改进，取代了旧的文件系统。Windows、Linux、MacOS均可识别。</p><p>EXT(Extended file system)，扩展文件系统。Linux的文件系统。数字表示第几代。Window不能识别</p><h3 id="Ext文件系统"><a href="#Ext文件系统" class="headerlink" title="Ext文件系统"></a>Ext文件系统</h3><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511154155934.png" alt="image-20200511154155934"></p><p>Boot Sector：启动扇区，安装开机管理程序。Block Group：块组，存储数据的实际位置。</p><p>每一个Block Group有这些信息：</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511154341005.png" alt="image-20200511154341005"></p><p>Inode Table：存放文件Inode的地方，每一个文件（目录）都有一个Inode，是每一个文件（目录）的<font color='red'>索引节点</font>，也是该文件唯一标记。Inode存放了文件类型、文件权限、文件物理地址、文件长度、文件连接计数、文件存取时间、文件状态、索引节点编号、访问计数、链接指针等等。</p><p><font color='yellow'>需要注意的是文件名不是存放在Inode节点上的，而是存放在目录的Inode节点，目的在于列出目录文件的时候无需加载文件的Inode</font></p><p>Inode bitmap，Inode的位示图，记录已分配的Inode和未分配的Inode</p><p>Data block，存放文件内容的地方，每个block都有唯一的编号，文件的block记录在文件的Inode上</p><p>Block bitmap，功能与Inode bitmap类似，记录Data block的使用情况</p><p>Superblock，记录整个文件系统相关信息的地方，Block和Inode的使用情况，时间信息、控制信息等</p><p><code>df -T</code> 查看系统挂载的磁盘信息 <code>dumpe2fs 设备名</code> 查看其中的文件系统信息</p><p><code>stat 文件名</code>查看具体的文件信息</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511165943368.png" alt="image-20200511165943368"></p><h2 id="操作系统的设备管理"><a href="#操作系统的设备管理" class="headerlink" title="操作系统的设备管理"></a>操作系统的设备管理</h2><h3 id="广义的IO设备"><a href="#广义的IO设备" class="headerlink" title="广义的IO设备"></a>广义的IO设备</h3><p>对CPU而言，凡是对CPU进行数据输入的都是输入设备，对CPU而言，凡是CPU进行数据输出的都是输出设备。</p><p>可以分别按使用特性分类、按设备的共享属性分类、按信息交换的单位分类、按传输速率分类</p><p>使用特性分类：存储设备（内存、硬盘等）、交互IO设备（键盘、显示器等）</p><p>信息交换单位分配：块设备（磁盘、SD卡）、字符设备（打印机、shell终端）</p><p>共享属性分类：共享设备、独占设备、虚拟设备</p><p>传输速率分类：低速设备、中速、高速</p><h3 id="IO设备缓冲区"><a href="#IO设备缓冲区" class="headerlink" title="IO设备缓冲区"></a>IO设备缓冲区</h3><p>CPU与IO设备的速率不匹配问题，所以有个各个存储器的层次结构。而缓冲区也是为了解决这个问题，它可以减少CPU处理IO请求的频率，提高CPU与IO设备之间的并行性</p><p>可以把需要多次交互的请求放入一个缓冲区，将多个请求写入缓冲区，减少交互次数。</p><p>缓冲池：专用缓冲区只适用于特定的IO进程，当这样的IO进程比较多时，对内存的消耗也很大，操作系统划出可供多个进程使用的公共缓冲区，称之为缓冲池。</p><h3 id="SPOOLing技术"><a href="#SPOOLing技术" class="headerlink" title="SPOOLing技术"></a>SPOOLing技术</h3><p>是一种慢速字符设备如何与计算机主机交换信息的一种技术，利用高速共享设备将低俗的独享设备模拟为高速的共享设备。逻辑上，系统为每一个用户都分配了一台独立的高速独享设备，所以这是一种虚拟设备技术。</p><p><img src="%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20200511172733715.png" alt="image-20200511172733715"></p><p><em>假设有三个进程要使用打印机，同步调用的效率会比较低。从磁盘中划出一部分空间叫输出井，各个进程将调用请求放入输出井，由SPOOLing技术来完成输出井到打印机的交互</em></p><p><font color='red'>SPOOLing技术把同步调用的低速设备改为异步调用</font></p><p>总结起来该技术就是:</p><ul><li>在输入、输出之间增加了派对转存储环节（输入井、输出井）</li><li>SPOOLing负责输入（出）井与低速设备之间的调用</li><li>逻辑上，进程直接与高速设备交互，减少了进程等待时间</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架入门</title>
      <link href="/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
      <url>/2020/04/09/Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>本文章是<a href="www.imooc.com">慕课网</a>相关课程的学习笔记</p><h2 id="初始Django框架"><a href="#初始Django框架" class="headerlink" title="初始Django框架"></a>初始Django框架</h2><h3 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h3><h4 id="Django发展历程"><a href="#Django发展历程" class="headerlink" title="Django发展历程"></a>Django发展历程</h4><blockquote><p>2003年 劳伦斯出版集团需要开发几个以新闻内容为主的网站，即是CMS（内容管理系统）软件，要快速响应，快速迭代开发。world online的三位工程师使用Python开发了Django。2005年开源，2008年发布1.0版本。</p></blockquote><h4 id="Django介绍"><a href="#Django介绍" class="headerlink" title="Django介绍"></a>Django介绍</h4><p><strong>开源免费</strong>的Python高级<strong>web框架</strong>，<strong>内置电池</strong>，用于<strong>快速开发</strong>可靠、安全、可扩展的web应用。</p><p>Django文档 <a href="https://docs.djangoproject.com/">https://docs.djangoproject.com</a></p><p>MVT模型：Django开发的三个部分，模型（Model）视图（View）模板（Template）</p><p>Django不断迭代更新，LTS（long-term support releases）支持</p><h4 id="网站开发流程"><a href="#网站开发流程" class="headerlink" title="网站开发流程"></a>网站开发流程</h4><ol><li>选择合适的版本</li><li>安装及配置</li><li>生成项目结构</li><li>内容开发</li><li>迭代、上线、维护</li></ol><h3 id="环境参数及配置安装"><a href="#环境参数及配置安装" class="headerlink" title="环境参数及配置安装"></a>环境参数及配置安装</h3><p>Windows 10    MySQL8.0    Django2.2.12    pyhton3.7</p><p>安装Django2.2.12版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.2.12</span><br></pre></td></tr></table></figure><p>创建Django虚拟环境</p><p>如果没有安装virtualenv 需要先安装一下。下载速度太慢的话可以切换国内镜像源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple virtualenv</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple virtualenvwrapper-win</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv django2.2//创建虚拟环境</span><br><span class="line">pip install django==2.2.12//安装特定版本</span><br><span class="line">workon 虚拟环境名//切换虚拟环境</span><br><span class="line">deactivate//退出虚拟环境</span><br></pre></td></tr></table></figure><h4 id="生成目录结构"><a href="#生成目录结构" class="headerlink" title="生成目录结构"></a>生成目录结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">django-admin.py startproject my_project//命令行生成模板</span><br><span class="line">cd my_project//进入项目目录</span><br><span class="line">python manage.py runserver//启动服务器</span><br><span class="line">//ctrl+c结束服务</span><br></pre></td></tr></table></figure><h4 id="Django项目结构"><a href="#Django项目结构" class="headerlink" title="Django项目结构"></a>Django项目结构</h4><p><img src="Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200409211058293.png" alt="image-20200409211058293"></p><h3 id="网页开发流程"><a href="#网页开发流程" class="headerlink" title="网页开发流程"></a>网页开发流程</h3><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><ol><li><p>Django-amdin.py 命令行创建项目</p></li><li><p>PyCharm创建项目</p></li></ol><h4 id="创建accounts模块"><a href="#创建accounts模块" class="headerlink" title="创建accounts模块"></a>创建accounts模块</h4><p>在项目目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp accounts</span><br></pre></td></tr></table></figure><h3 id="URL介绍"><a href="#URL介绍" class="headerlink" title="URL介绍"></a>URL介绍</h3><p>URL是统一资源定位符，对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL</p><p>基本URL包含模式（或称协议）、服务器名称（或IP地址）、路径和文件名。如下：</p><p><font color=red>scheme（协议）://host[:port#]/path/../[;url-params][?query-string][#anchor]</font></p><p>**URL协议(Scheme)**：<br>http—超文本传输协议资源<br>https—用安全套接字层传送的超文本传输协议（在http基础上进行一层安全的包装）<br>ftp—文件传输协议</p><h4 id="常见http请求方式"><a href="#常见http请求方式" class="headerlink" title="常见http请求方式"></a>常见http请求方式</h4><p><strong>GET请求</strong>：</p><ol><li>可以用浏览器直接访问</li><li>请求可以携带参数，但是有长度限制</li><li>请求参数直接放在URL后面</li></ol><p><strong>POST请求</strong>：</p><ol><li>不能使用浏览器直接访问</li><li>对请求参数的长度没有限制</li><li>可以用来上传文件等需求</li></ol><p><strong>不同HTTP响应状态码有什么含义</strong>：<br>2xx 请求成功<br>3xx 重定向<br>4xx 请求错误<br>5xx 服务器错误</p><p><a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">百度百科HTTP状态码</a></p><h3 id="URL配置及参数传递"><a href="#URL配置及参数传递" class="headerlink" title="URL配置及参数传递"></a>URL配置及参数传递</h3><p>使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include,path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&#x27;</span>,views.month_archive),</span><br><span class="line">    path(<span class="string">&#x27;index/&#x27;</span>, views.index, name=<span class="string">&#x27;main-view&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;bio/&lt;username&gt;/&#x27;</span>, views.bio, name=<span class="string">&#x27;bio&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;articles/&lt;slug:title&gt;/&#x27;</span>, views.article, name=<span class="string">&#x27;article-detail&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;articles/&lt;slug:title&gt;/&lt;int:section&gt;/&#x27;</span>, views.section, name=<span class="string">&#x27;article-section →&#x27;</span>),</span><br><span class="line">path(<span class="string">&#x27;weblog/&#x27;</span>, include(<span class="string">&#x27;blog.urls&#x27;</span>)),</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>比如对于匹配的 article/2020/4 的请求，会调用函数views.month_archive(request, year=2020, month=3)。</p><p>另一种url配置方法，用正则表达式法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, re_path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">re_path(<span class="string">r&#x27;^index/$&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">re_path(<span class="string">r&#x27;^bio/(?P&lt;username&gt;\w+)/$&#x27;</span>, views.bio, name=<span class="string">&#x27;bio&#x27;</span>),</span><br><span class="line">re_path(<span class="string">r&#x27;^weblog/&#x27;</span>, include(<span class="string">&#x27;blog.urls&#x27;</span>)),</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这两种方法都可以使用include包含其他模块的URL，即<strong>URL的嵌套</strong></p><p>上面的re_path中可以嵌套blog模块中的urls。urls中代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns=[</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/&#x27;</span>, views.index)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>假设该blog模块中view视图有如下index方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request, year</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;wdnmd,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(year))</span><br></pre></td></tr></table></figure><p>访问<a href="https://127.0.0.1:8000/articles/2020/">https://127.0.0.1:8000/articles/2020/</a></p><p>页面会显示<code>wdnmd，2020</code></p><h4 id="设计优雅的URL"><a href="#设计优雅的URL" class="headerlink" title="设计优雅的URL"></a>设计优雅的URL</h4><ul><li><p>使用简介的URL</p></li><li><p>给URL指定命名空间namespace</p><p>举例：两种不同的角色访问不同的URL，但是结果相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include,re_path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">r&#x27;^author-polls/&#x27;</span>, include((<span class="string">&#x27;polls.urls&#x27;</span>,<span class="string">&#x27;polls&#x27;</span>), namespace=<span class="string">&#x27;author-polls&#x27;</span>)),</span><br><span class="line">    re_path(<span class="string">r&#x27;^publisher-polls/&#x27;</span>,include((<span class="string">&#x27;polls.urls&#x27;</span>,<span class="string">&#x27;polls&#x27;</span>), namespace=<span class="string">&#x27;publisher-polls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>给URL指定名称name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r&#x27;article/2020/$&#x27;</span>,views.article,name=<span class="string">&#x27;article_detail&#x27;</span>)</span><br></pre></td></tr></table></figure><p>作用：可以通过reverse逆向解析URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reverse(<span class="string">&#x27;article_detail&#x27;</span>)</span><br><span class="line">reverse(<span class="string">&#x27;author-polls:index&#x27;</span>)</span><br><span class="line">reverse(<span class="string">&#x27;current_app=self.request.resolve_match.namespace&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><p>Django_proj/views</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span>(<span class="params">request,year</span>):</span></span><br><span class="line">    url=reverse(<span class="string">&#x27;archive&#x27;</span>,args=(year,))</span><br><span class="line">    <span class="comment"># 通过namespace逆向解析(namespace:模块中views的方法，【参数】)</span></span><br><span class="line">    url2=reverse(<span class="string">&#x27;oauth_detail:index&#x27;</span>,kwargs=&#123;<span class="string">&#x27;year&#x27;</span>:year&#125;)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;wdnmd, &#123;&#125; url:&#123;&#125;url2:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(year,url,url2))</span><br></pre></td></tr></table></figure><p>Django_proj/urls</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path, include</span><br><span class="line"><span class="keyword">from</span> Django_proj <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    re_path(<span class="string">r&#x27;^index/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.archive, name=<span class="string">&#x27;archive&#x27;</span>),</span><br><span class="line">    <span class="comment"># include(模块.urls,模块名称)，与Django1.1不同</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^auth/&#x27;</span>, include((<span class="string">&#x27;oauth.urls&#x27;</span>, <span class="string">&#x27;oauth&#x27;</span>), namespace=<span class="string">&#x27;oauth_detail&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>oauth/urls</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> re_path</span><br><span class="line"><span class="keyword">from</span> oauth <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns=[</span><br><span class="line">    re_path(<span class="string">r&#x27;^article/(?P&lt;year&gt;[0-9]&#123;4&#125;)/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>oauth/views</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request, year</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;wdnmd,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(year))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时输入</p><p><a href="http://127.0.0.1:8000/index/2021/">http://127.0.0.1:8000/index/2021/</a></p><p>返回如下结果</p><p><img src="Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200412130127080.png" alt="image-20200412130127080"></p><h4 id="积分商城项目搭建"><a href="#积分商城项目搭建" class="headerlink" title="积分商城项目搭建"></a>积分商城项目搭建</h4><p>积分商城项目结构</p><p><img src="Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200412172605560.png" alt="image-20200412172605560"></p><p>搭建积分商城项目，先建立模块system accounts mall mine，再新建utils，static包。</p><p>将前端文件等放入static和templates中，新建首页path：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;index/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure><p>views:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>setting中添加静态文件路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="视图定义及实战添加视图内容"><a href="#视图定义及实战添加视图内容" class="headerlink" title="视图定义及实战添加视图内容"></a>视图定义及实战添加视图内容</h2><h3 id="视图的定义"><a href="#视图的定义" class="headerlink" title="视图的定义"></a>视图的定义</h3><ul><li><p>视图是一个视图函数，简称视图，是一个简单的Python函数</p></li><li><p>作用是，接受一个请求后，返回一个响应。</p></li><li><p>响应可以是HTML内容、文本、图像，甚至是404、重定向等</p></li></ul><p>def view_name()定义视图</p><h4 id="视图中获取URL参数"><a href="#视图中获取URL参数" class="headerlink" title="视图中获取URL参数"></a>视图中获取URL参数</h4><ol><li><p>通过正则表达式获取URL参数</p><p>urls:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re_path(<span class="string">r&#x27;^article/(?P&lt;year&gt;[0-9]&#123;4&#125;)/&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure><p>views:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时在地址栏中输入的xxx/article/2020/,就得到了参数year=202</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request, year</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;wdnmd,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(year))</span><br></pre></td></tr></table></figure></li><li><p>获取URL中的请求(GET/POST等)参数</p><p>GET请求参数直接在后面URL后面添加?参数名=xx，携带多个参数&amp;连接，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx/aricle/?year=2020&amp;month=3&amp;day=6</span><br></pre></td></tr></table></figure><p>在views中可以得到参数，然后可进行下一步处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    year=request.GET.get(<span class="string">&#x27;year&#x27;</span>,<span class="literal">None</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;year:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(year))</span><br></pre></td></tr></table></figure></li></ol><h3 id="视图快捷方式"><a href="#视图快捷方式" class="headerlink" title="视图快捷方式"></a>视图快捷方式</h3><h4 id="视图加载HTML"><a href="#视图加载HTML" class="headerlink" title="视图加载HTML"></a>视图加载HTML</h4><p>首先在模板中准备一个html文件。加载html的方法有很多，最原始的是with open打开文件，然后通过HttpResposne返回html。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;不建议使用该方法，仅作为展示&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    file = os.path.join(settings.BASE_DIR, <span class="string">&#x27;templates/index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file) <span class="keyword">as</span> f:</span><br><span class="line">        html = f.read()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html)</span><br></pre></td></tr></table></figure><p>通过loader.get_template获取html，然后通过HttpResposne返回html</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    html = loader.get_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(html.template.source)</span><br></pre></td></tr></table></figure><p>直接使用render()或者render_to_response()，<font color=red>最为常用</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_to_response(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>当需要替换html中内容时候，可以在html中需要替换的部分加上双大括号<code>&#123;&#123;now&#125;&#125;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">now=datetime.now()</span><br><span class="line"><span class="keyword">return</span> render(request,<span class="string">&#x27;index.html&#x27;</span>,&#123;<span class="string">&#x27;now&#x27;</span>:now&#125;)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">return</span> render_to_response(<span class="string">&#x27;index.html&#x27;</span>，&#123;<span class="string">&#x27;now&#x27;</span>:now&#125;)</span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>重定向就是url重新定向到其他的html</p><p>使用HttpResponseRedirect(‘url’)重定向，可以配合reverse获得url再使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重定向到url为/index/的页面</span></span><br><span class="line"><span class="keyword">return</span> HttpResponseRedirect(<span class="string">&#x27;/index/&#x27;</span>)</span><br></pre></td></tr></table></figure><p>**redirect(name)**，可以通过url的名称进行跳转，最为简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数为url的name</span></span><br><span class="line"><span class="keyword">return</span> redirect(<span class="string">&#x27;index&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="内置视图及重写"><a href="#内置视图及重写" class="headerlink" title="内置视图及重写"></a>内置视图及重写</h3><h4 id="内置的错误处理视图及重写"><a href="#内置的错误处理视图及重写" class="headerlink" title="内置的错误处理视图及重写"></a>内置的错误处理视图及重写</h4><ul><li>400 Bad Request    403 Forbidden    404 Not Found    500 Server Error</li></ul><p>将500代码提示重写：</p><p>比如要让 <code>http://127.0.0.1:8000/index/</code> 提示500错误，1. 先在views方法中改写index路径对应的方法，添加<code>raise ValueError</code>，2. 退出debug模式（进入生产模式），在settings中修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line"><span class="comment"># ALLOWED_HOSTS是为了限定请求中的host值，以防止黑客构造包来发送请求。只有在列表中的host才能访问。*表示不设置访问限制</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br></pre></td></tr></table></figure><p>此时访问 <a href="http://127.0.0.1:8000/index/">http://127.0.0.1:8000/index/</a> 就会出现 500 server error提示</p><ol start="3"><li><p>改写500错误提示，在urls添加<code>project_name.views.views_name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler500 = <span class="string">&#x27;untitled.views.page_500&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>views中定义page_500方法（改写500错误提示的方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_500</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;服务器无响应&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><p>500错误提示就被改写为’服务器无响应’提示</p><p>同理 <code>handlerxxx=&#39;&#39;</code>可以改写错误处理视图，403异常对应 <code>raise PermissionDenied</code></p><h4 id="static-server处理静态文件"><a href="#static-server处理静态文件" class="headerlink" title="static.server处理静态文件"></a>static.server处理静态文件</h4><p>常用场景：本地测试时，用户上传头像等各种文件存放。用于本地测试的时候临时存放</p><p>在项目settings.py中添加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定用户上传文件的地址</span></span><br><span class="line">MEDIA_URL = <span class="string">&#x27;/media/&#x27;</span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR,<span class="string">&#x27;media&#x27;</span>)</span><br></pre></td></tr></table></figure><p>项目urls中添加配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.static <span class="keyword">import</span> serve</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    re_path(<span class="string">r&#x27;^media/(?P&lt;path&gt;.*)$&#x27;</span>,serve,&#123;</span><br><span class="line">        <span class="string">&#x27;document_root&#x27;</span>:settings.MEDIA_ROOT,</span><br><span class="line">    &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时可通过<code>http://xxx/media/xxx</code>访问项目中的临时静态文件，说明设置成功</p><h3 id="请求响应对象（request对象）"><a href="#请求响应对象（request对象）" class="headerlink" title="请求响应对象（request对象）"></a>请求响应对象（request对象）</h3><h4 id="请求对象HttpRequest"><a href="#请求对象HttpRequest" class="headerlink" title="请求对象HttpRequest"></a>请求对象HttpRequest</h4><ol><li><p>请求方式method（POST/GET/…）</p></li><li><p>请求头信息META<br>REMOTE_ADDR——请求的IP地址<br>HTTP_USER_AGENT——用户请求终端信息（以什么设备请求，pc端浏览器，浏览器是什么型号的，火狐或者谷歌等）</p></li><li><p>获取请求传递参数<br>GET——GET请求参数<br>POST——POST请求参数<br>COOKIES——cookie信息</p><blockquote><p>Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息</p></blockquote><p>FILES——文件信息</p></li></ol><p>现在来演示一下查看request的头信息META：</p><p>项目urls.py中添加url地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">urlpatterns =[</span><br><span class="line">    path(<span class="string">&#x27;request/&#x27;</span>,views.print_request,name=<span class="string">&#x27;print_request&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>项目views.py中添加方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_request</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(request)</span><br><span class="line">    <span class="comment"># 打印请求ip的地址</span></span><br><span class="line">    <span class="built_in">print</span>(request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])</span><br><span class="line">    <span class="comment"># 打印用户终端信息</span></span><br><span class="line">    <span class="built_in">print</span>(request.META[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>])</span><br><span class="line">    <span class="comment"># 打印request的其他属性</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(request))</span><br><span class="line">    <span class="keyword">return</span> HttpResponse()</span><br></pre></td></tr></table></figure><h4 id="响应-Response"><a href="#响应-Response" class="headerlink" title="响应 Response"></a>响应 Response</h4><p>常见的响应内容Content-Type</p><ul><li><p>text/html    超文本标记语言文本（HTML）</p></li><li><p>text/plain    普通文本</p></li><li><p>text/xml       XML文档</p></li><li><p>image/jpg等    图片/图形</p></li><li><p>application/json   json数据类型</p><blockquote><p>JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote></li></ul><p>演示指定响应内容：<br>项目urls.py =&gt; urlpatterns添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;response/json&#x27;</span>,views.print_json,name=<span class="string">&#x27;print_json&#x27;</span>),</span><br></pre></td></tr></table></figure><p>项目views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_json</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_info=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;gan&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">24</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    user_info=json.dumps(user_info)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(user_info,content_type=<span class="string">&#x27;application/json&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时页面会出现json格式的内容<code>&#123;&quot;username&quot;: &quot;gan&quot;, &quot;age&quot;: 24&#125;</code></p><p><strong>响应对象</strong>：HttpResponse    HttpResponseRedirect    JsonResponse(响应json)    FileResponse(响应文件)</p><p>上面json响应可以简化为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_json</span>(<span class="params">request</span>):</span></span><br><span class="line">    user_info=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;gan&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:<span class="number">24</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> JsonResponse(user_info)</span><br></pre></td></tr></table></figure><p><img src="Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200415121136242.png" alt="image-20200415121136242"></p><p>浏览器调试中可以查看响应类型</p><h4 id="响应对象之间的关系"><a href="#响应对象之间的关系" class="headerlink" title="响应对象之间的关系"></a>响应对象之间的关系</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">E[other] --&gt; A[HttpResponse]</span><br><span class="line">B[FileResponse] --&gt; E</span><br><span class="line">C[JsonResponse] --&gt; E</span><br><span class="line">D[HttpResponseBadRequest] --&gt; E</span><br><span class="line">F[HttpResponseRedirectBase] --&gt;A</span><br><span class="line">G[HttpResponseRedirect] --&gt;F</span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/markdown/md-advance.html">ps: markdown高级技巧</a></p><p><strong>HttpResponse重要知识点</strong></p><ol><li><p>status查看HTTP响应状态码</p></li><li><p>status_code查看HTTP响应状态码</p><p>通过HttpResponse传入参数修改状态码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&#x27;打印响应对象&#x27;</span>,status=<span class="number">404</span>)</span><br></pre></td></tr></table></figure><p>或者直接通过status_code指定状态码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resp=HttpResponse(<span class="string">&#x27;打印响应对象&#x27;</span>)</span><br><span class="line">resp.status_code=<span class="number">404</span></span><br><span class="line"><span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure></li><li><p>content_type设置响应类型</p><p>上面已有演示</p></li><li><p>write()写入响应内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resp=HttpResponse(<span class="string">&#x27;打印响应对象&#x27;</span>)</span><br><span class="line">resp.write(<span class="string">&#x27;2020&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure><p>write的内容将被直接添加到‘打印响应对象’最后</p></li></ol><p><strong>FileResponse</strong></p><p>举例：添加url后设置views方法，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> FileResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_img</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        file_name = os.path.join(settings.MEDIA_ROOT, <span class="string">&#x27;rain.jpg&#x27;</span>)</span><br><span class="line">        f = <span class="built_in">open</span>(file_name,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="keyword">return</span> FileResponse(f, content_type=<span class="string">&#x27;image/jpeg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>加载excel 文件同理 <code>content_type=&#39;application/vnd.ms-excel&#39;</code>，会直接弹出下载</p><h3 id="基于类的视图"><a href="#基于类的视图" class="headerlink" title="基于类的视图"></a>基于类的视图</h3><p>视图是一个可调用对象，可以接收一个请求然后返回一个请求，基于类的视图可以结构化你的视图。基于类的视图可以利用继承和混合重用代码，内置的视图拿来即用，代码更简洁。</p><h4 id="举例：使用TemplateView"><a href="#举例：使用TemplateView" class="headerlink" title="举例：使用TemplateView"></a>举例：使用TemplateView</h4><p>步骤一：继承视图</p><p>django.views.generic.TemplateView</p><p>步骤二：配置模板地址</p><p>项目views.py中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowClassView</span>(<span class="params">TemplateView</span>):</span></span><br><span class="line">    template_name = <span class="string">&#x27;index.html&#x27;</span></span><br></pre></td></tr></table></figure><p>步骤三：配置URL</p><p>项目urls.py中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用类来改写视图</span></span><br><span class="line"> path(<span class="string">&#x27;class/view&#x27;</span>, views.ShowClassView.as_view(), name=<span class="string">&#x27;show_class&#x27;</span>),</span><br></pre></td></tr></table></figure><p>TemplateView应用在模块中则需要配置模板地址。使用TemplateView使得工程具有模块化</p><p>新建app oauth，在模块中添加templates/index1.html，首先在项目urls.py中通过include<strong>嵌套oauth模块</strong>，在oauth.urls中添加路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用类来改写视图</span></span><br><span class="line">path(<span class="string">&#x27;class/view&#x27;</span>, views.ShowClassView.as_view(), name=<span class="string">&#x27;show_class&#x27;</span>),</span><br></pre></td></tr></table></figure><p>oauth.views中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> TemplateView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowClassView</span>(<span class="params">TemplateView</span>):</span></span><br><span class="line">    template_name = <span class="string">&#x27;index1.html&#x27;</span></span><br></pre></td></tr></table></figure><p>最后在项目settings.INSTALLED_APPS添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 激活该模块</span><br><span class="line">&#x27;oauth.apps.OauthConfig&#x27;,</span><br></pre></td></tr></table></figure><h4 id="TemplateView原理解析"><a href="#TemplateView原理解析" class="headerlink" title="TemplateView原理解析"></a>TemplateView原理解析</h4><ol><li><p>先从项目主目录寻找模板文件</p></li><li><p>然后从app的模板目录寻找模板文件</p><p>需要保证项目settings.TEMPLATES中<code>&#39;APP_DIRS&#39;: True,</code>，才会寻找模块中的template</p></li></ol><h4 id="Django内置通用视图"><a href="#Django内置通用视图" class="headerlink" title="Django内置通用视图"></a>Django内置通用视图</h4><p>django.views.generic.ListView：列表类数据的封装，如：商品列表支持分页</p><p>django.views.generic.DetailView：详情类数据的封装，如：商品详情</p><p><strong>类视图的本质</strong></p><p>class ListView(MultipleObjectTemplateResponseMixin, BaseListView)</p><div class="mermaid">graph RLA[object]B[View] --&gt; AC[ContextMixin] --&gt; AD[***View] --&gt; BE[***Mixin] --&gt; C</div><h3 id="积分商城添加视图内容"><a href="#积分商城添加视图内容" class="headerlink" title="积分商城添加视图内容"></a>积分商城添加视图内容</h3><p>任务目标：</p><ol><li><p>搭建项目的基本框架</p><p>添加各个模块 accounts    mine    system    mall</p></li><li><p>编写视图，从HTML加载页面</p><p>嵌套模块，模块中添加url view    </p></li><li><p>处理请求参数，走通基本的流程</p><p>使用render to response()方法</p></li></ol><h2 id="Django模板语法"><a href="#Django模板语法" class="headerlink" title="Django模板语法"></a>Django模板语法</h2><h3 id="templates介绍"><a href="#templates介绍" class="headerlink" title="templates介绍"></a>templates介绍</h3><p><strong>模板和模板引擎</strong></p><p>模板具有一定的格式或骨架，可以动态生成HTML</p><p>模板引擎决定以何种方式组织代码</p><p>一个项目可以有一个或多个模板引擎，如DTL和jinja2</p><p><strong>DTL(Django Template Language)</strong> 是Django原生模板系统，知道Django1.8唯一的模板引擎支持</p><p><strong>Jinja2</strong>速度更快，Python的功能齐全的开源模板引擎</p><p><a href="http://docs.jinkan.org/docs/jinja2">jinja2官方文档</a></p><p>pip install jinja2</p><p><strong>渲染机制</strong></p><p>如果没有模板引擎怎样在浏览器展示HTML：</p><ol><li>从磁盘读取html字符串</li><li>将满足特定规则的内容进行替换</li><li>发送给浏览器展示</li></ol><p>模板存在的情况：</p><ol><li>从磁盘读取模板文件（get_template）</li><li>选择合适的模板引擎（select_tmeplate）</li><li>将定制的内容对模板进行渲染（render）</li><li>发送给浏览器显示</li></ol><h3 id="templates相关配置"><a href="#templates相关配置" class="headerlink" title="templates相关配置"></a>templates相关配置</h3><p>配置示例：</p><p>在项目根目录settings中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="comment"># 其他配置</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置选项：</p><p>BACKEND——模板引擎配置<br>django.template.backends.django.DjangoTemplates<br>django.template.backends.jinja2.Jinja2</p><p>DIRS——模板引擎按列表顺序搜素这些目录以查找模板源文件<br>APP_DIRS——决定模板引擎是否应该进入每个已安装的应用中查找模板。每种模板引擎后端都定义了一个惯用的名称作为应用内部存放模板的子目录名称，‘templates’一般默认存放DTL模板，‘jinja2’默认存放jinja2模板。</p><p>同时配置了DTL和jinja2模板后的查找顺序：先DTL，后jinja2，然后找app里的。</p><h3 id="模板变量的使用"><a href="#模板变量的使用" class="headerlink" title="模板变量的使用"></a>模板变量的使用</h3><p>渲染Python中的变量：</p><ol><li>语法<br><code>&#123;&#123; variable &#125;&#125;</code> （用双大括号，变量和大括号之间有空格）</li><li>当模板引擎遇到一个变量，它将计算这个变量，然后用结果替换掉她本身</li><li>变量名称中不能有空格或标点符号(点号留给字典变量使用)</li></ol><p>渲染静态图片：</p><ol><li><p>图片地址的变量</p></li><li><p>模板文件中渲染</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; img_url &#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;not found&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img_url=<span class="string">&#x27;/meida/rain.jpg&#x27;</span></span><br><span class="line">render_to_response(template_name=<span class="string">&#x27;xxx.html&#x27;</span>,context=&#123;</span><br><span class="line">    <span class="string">&#x27;img_url&#x27;</span>:img_url,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>注意url使用的是相对路径</em></p><p>字典类型的渲染：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>name:&#123;&#123; stu.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>age:&#123;&#123; stu.age &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stu = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;gan&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">23</span>,</span><br><span class="line">&#125;</span><br><span class="line">render(request,template_name=<span class="string">&#x27;xxx.html&#x27;</span>,context=&#123;</span><br><span class="line">    <span class="string">&#x27;stu&#x27;</span>:stu,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表/元组类型的渲染：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">city = [<span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;Yichun&#x27;</span>, <span class="string">&#x27;Changsha&#x27;</span>]</span><br><span class="line">goods = [</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;jelly&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dried strawberry&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="number">50</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;durian&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;70&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">return</span> render_to_response(template_name=<span class="string">&#x27;vari.html&#x27;</span>, context=&#123;</span><br><span class="line">    <span class="string">&#x27;img_url&#x27;</span>: img_url,</span><br><span class="line">    <span class="string">&#x27;stu&#x27;</span>: stu,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span>: city,</span><br><span class="line">    <span class="string">&#x27;goods&#x27;</span>: goods</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; city.0 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; city.1 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; city.2 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; goods.0.name &#125;&#125;:&#123;&#123; goods.0.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; goods.1.name &#125;&#125;:&#123;&#123; goods.1.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; goods.2.name &#125;&#125;:&#123;&#123; goods.2.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上仅作为替换格式的介绍，对于字典、列表的替换可以用下面的模板标签的写法</p><h3 id="模板标签的使用"><a href="#模板标签的使用" class="headerlink" title="模板标签的使用"></a>模板标签的使用</h3><p><strong>模板标签的语法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tag %&#125;</span><br></pre></td></tr></table></figure><p>循环控制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in data_list %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;`#结束标签</span><br><span class="line">&#123;% for k,v in data_dic.items %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; k &#125;&#125;:&#123;&#123; v &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;`#结束标签</span><br></pre></td></tr></table></figure><p>for 循环 排序 reversed 逆序 forloop.counter</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for item in data_list reversed %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123; forloop.counter &#125;&#125;:</span><br><span class="line">    内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;`#结束标签</span><br></pre></td></tr></table></figure><p>条件控制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if condition_a %&#125;</span><br><span class="line">满足了A条件</span><br><span class="line">&#123;% elif condition_b %&#125;</span><br><span class="line">满足了B条件</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">都不满足</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>其他逻辑控制：</p><ul><li>and,or</li><li>==,!=</li><li>&gt;,&lt;</li><li>=,&lt;=</li><li>in,not in</li><li>is</li></ul><p>添加注释：<code>&#123;# 注释内容 #&#125;</code>(这种注释在浏览器网页中看不到)</p><p>与HTML注释的区别：</p><p><code>&lt;!-- 注释 --&gt;</code></p><p>举例（将上面的html改写）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for item in city %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for item in goods %&#125;</span><br><span class="line">        &#123;% if item.price &gt;= 20 %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.name &#125;&#125;==&gt;&gt;&#123;&#123; item.price &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;% empty %&#125;# 在for循环中如果列表为空的情况</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>没有<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>循环的分行显示，row1和row2是class名称分别代表奇数行和偶数行，可以通过css样式进行调整</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for k,v in stu.items %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;&#123;% cycle &#x27;row1&#x27; &#x27;row2&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; k &#125;&#125;==&gt;&#123;&#123; v &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>url标签，可以通过name找到指定该url标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;# target=&quot;_blank&quot;在一个新的页面打开 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;print_request&#x27; %&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&#x27;_blank&#x27;</span>&gt;</span>url标签测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带参数url标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;article&#x27; 2020 %&#125;?month=4&quot;</span> <span class="attr">target</span>=<span class="string">&#x27;_blank&#x27;</span>&gt;</span>url标签测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带匿名空间url标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;# oauth是namespace名称 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;oauth:show_class&#x27; %&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>url标签测试（带命名空间）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前时间显示，now显示当前时间日期</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">It is &#123;% now &quot;jS F Y H:i&quot; %&#125;</span><br><span class="line">&#123;# o和f是用反斜杠转译的，可直接显示 #&#125;</span><br><span class="line">It is the &#123;% now &quot;jS \o\f F&quot; %&#125;</span><br></pre></td></tr></table></figure><p>输出结果<code>It is 21st April 2020 04:35 It is the 21st of April</code></p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>如何对变量进行特殊处理后再渲染。举例：将英语单词的首字母大写</p><p>model =&gt; Model</p><p>view =&gt; View</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|filter_name: params &#125;&#125;</span><br></pre></td></tr></table></figure><p>先在views中传入相关参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 首字母大写 转换大写 时间格式化等模板过滤器 #&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>filter capfirst<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">&#123;% for i in city_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; i|capfirst &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>filter upper<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">&#123;% for i in city_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; i|upper &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>filter date<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">&#123;&#123; now|date:&#x27;D d M Y&#x27; &#125;&#125;</span><br><span class="line">&#123;&#123; now|date:&#x27;W \o\f y&#x27; &#125;&#125;</span><br></pre></td></tr></table></figure><p>默认值显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;# False或者空值则显示nothing #&#125;</span><br><span class="line">&#123;&#123; value|default:&quot;nothing&quot; &#125;&#125;</span><br><span class="line">&#123;# None则显示nothing #&#125;</span><br><span class="line">&#123;&#123; value|default_if_none:&quot;nothing&quot; &#125;&#125;</span><br></pre></td></tr></table></figure><p>数字四舍五入显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|floatformat:3 &#125;&#125;</span><br></pre></td></tr></table></figure><p>富文本内容转义显示（渲染html格式）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|safe &#125;&#125;</span><br></pre></td></tr></table></figure><p>字符串截取：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|truncatechars:9 &#125;&#125; #截取前9个字符串</span><br><span class="line">&#123;&#123; value|truncatechars_html:9 &#125;&#125; #截取前9个字符串，不含html标记</span><br><span class="line">&#123;&#123; value|truncatewords:2 &#125;&#125;</span><br></pre></td></tr></table></figure><p>举例：对于<code>html=&#39;&lt;h3&gt;truncate filter&lt;/h3&gt;&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; html|safe &#125;&#125;</span><br><span class="line">&#123;&#123; html|truncatechars:6 &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">&#123;&#123; html|truncatechars_html:6 &#125;&#125;</span><br><span class="line">&#123;&#123; html|truncatewords:6|safe &#125;&#125;</span><br></pre></td></tr></table></figure><p>显示结果为：</p><p><img src="Django%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/image-20200421162420549.png" alt="image-20200421162420549"></p><p><font color='red'>其他内置过滤器参考文档的<strong>Built-in filter reference</strong></font></p><h4 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h4><ol><li><p>在app目录下新建包templatetags，把定义过滤器的py文件放在这里面(假设app名为oauth)（这个app一定是要在settings文件中的INSTALLED_APPS注册过的，’oauth.apps.OauthConfig’）</p></li><li><p>实现过滤器oauth_extras.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xxx</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"># 注册过滤器</span></span><br><span class="line"><span class="function"><span class="title">register</span>.<span class="title">filter</span>(<span class="params"><span class="string">&#x27;filter_name&#x27;</span>,xxx</span>)</span></span><br></pre></td></tr></table></figure></li><li><p>在模板中使用过滤器<br>在templ_filter_mine.html开头引入</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load oauth_extras %&#125;</span><br></pre></td></tr></table></figure><p>   使用过滤器</p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value|filter_name &#125;&#125;</span><br></pre></td></tr></table></figure><p>   切记：添加自定义过滤器后记得重启开发服务器</p><p>举例：使用自定义过滤器进行数字格式化</p><p>模块templatetags里面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_format</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">if</span> value:</span><br><span class="line">        <span class="comment"># 将数字格式化为xxx，xxx.00的格式</span></span><br><span class="line">        value = <span class="built_in">format</span>(<span class="built_in">int</span>(value), <span class="string">&#x27;,&#x27;</span>) + <span class="string">&#x27;.00&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">register.<span class="built_in">filter</span>(<span class="string">&#x27;num_format&#x27;</span>, num_format)</span><br></pre></td></tr></table></figure><p>分别在项目url中添加路径，然后再views添加方法，引用的html模板中首行加入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% load oauth_extras %&#125;</span><br></pre></td></tr></table></figure><p>，再使用过滤器</p><h3 id="模板的抽象与继承"><a href="#模板的抽象与继承" class="headerlink" title="模板的抽象与继承"></a>模板的抽象与继承</h3><p>模板继承首先需要找出整个网站的共性部分，集成到一个网页当中个，将个性部分用一个叫做的标签包围起来</p><p>注意：1.block包围的部分是可以被继承修改的部分；2.通常block包围的地方为空，里面的内容删去，如果保留下来就相当于默认值</p><ol><li><p>将可变的部分圈出来（base.html）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line"><span class="comment">&lt;!--菜单栏的内容--&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承父模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br></pre></td></tr></table></figure></li><li><p>填充新的内容（index.html）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line"><span class="comment">&lt;!--新的菜单栏的内容--&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>复用父模板的内容（可选）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% extends &quot;base.html&quot; %&#125;</span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">&#123;&#123; supper &#125;&#125;</span><br><span class="line"><span class="comment">&lt;!--新的菜单栏的内容--&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在模板中添加公共的部分：</p><ol><li><p>将可变的部分拆出来（footer.html）</p></li><li><p>将拆出来的部分包进来（index.html）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 包含底部的html的模块 #&#125;</span><br><span class="line">&#123;% include &#x27;footer.html&#x27; %&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS静态网页案例及知识点补充(含Flex布局)</title>
      <link href="/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/"/>
      <url>/2020/04/06/HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是完成<a href="www.imooc.com">慕课网</a>网页项目的知识点总结</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p><img src="HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408173846717.png" alt="image-20200408173846717"></p><p>项目最终的完成图如上，基本达到了项目的要求。</p><p> 网页内容居中显示。每个区域宽度相对于浏览器100%显示。</p><p>顶部 导航、Logo区有链接效果，无下划线；鼠标经过相应导航时，背景颜色变为黑色。</p><p>banner区 图片上要有半透明的遮罩， 表单内容显示在图像的最上面，且表单要水平居中。表单项有：姓名、邮件、具体内容、提交按钮。表单项设置用户提示信息。   鼠标滑过表单各项时，表单项的边框颜色变成#07cbc9。鼠标滑过提交按钮时，按钮没有边框，背景颜色变成#07cbc9。提示：用于遮罩的div可以设置背景颜色为黑色，透明度属性opacity为0.4</p><p>about区 分为上中下三部分，上部分为标题与文字。中间部分从左至右为文字、图片、文字三部分，要求中间部分居中显示。下部分为文字与图片交错显示，要求下部分水平方向平铺浏览器窗口。中间部分左侧的EXPLORE按钮，鼠标移入时背景变为透明的，但是有黑色的边框。鼠标划过下部分的文字区域片中的按钮时，按钮的背景颜色为透明色，边框为黑色提示：图片上方文字所在的div有透明效果，可以设置该div的背景色为：rgba(255, 255, 255, 0.4);</p><p>gallery区 上部分为文字描述，下部分为图片展示，图片之间有一定距离，文字的颜色和大小适当设置。</p><p>项目确实有点难度，在家边摸鱼边学习摸索，花了三天才完成。主要难点集中在几个方面：1. 各种元素的居中，尤其是about的中间区域的效果（多元素同一行居中）。2. 不规则图形的绘制，如about区下半部分的矩形加箭头的蓝色框。3. position:left和float切换的问题。4.css代码精简。</p><p>下面通过项目来解决这几部分问题</p><h2 id="元素居中的几种方法"><a href="#元素居中的几种方法" class="headerlink" title="元素居中的几种方法"></a>元素居中的几种方法</h2><h3 id="margin-auto-属性"><a href="#margin-auto-属性" class="headerlink" title="margin: auto;属性"></a>margin: auto;属性</h3><p>这种方法可以使得容器（div）在页面中居中，但是不能使容器中的文字等居中。使用时需要规定容器div的宽度，比如页面中的这两个部分</p><p><img src="HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408185432589.png" alt="image-20200408185432589"></p><p><img src="HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408185452917.png" alt="image-20200408185452917"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>ABOUT<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;h2_desc&#x27;</span>&gt;</span>Lorem Ipsum is simplely dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>GALLERY<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;h2_desc&#x27;</span>&gt;</span>Lorem Ipsum is simplely dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>html页面中about区和gallery区定义了相同的class名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main_title</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定about和gallery的上部分div*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一设定了宽度后，通过margin: 50px auto; 设定了左右居中属性，这样div就处于页面最中央了，但是文字部分还没有实现居中。需要text-align属性进行文本居中。</p><p><img src="HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408222650160.png" alt="image-20200408222650160"></p><h3 id="text-align-center-属性"><a href="#text-align-center-属性" class="headerlink" title="text-align: center; 属性"></a>text-align: center; 属性</h3><p>text-align属性指定元素文本的水平对齐方式。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>right</td><td>把文本排列到右边。</td></tr><tr><td>center</td><td>把文本排列到中间。</td></tr><tr><td>justify</td><td>实现两端对齐文本效果。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 text-align 属性的值。</td></tr><tr><td>left</td><td>把文本排列到左边。默认值：由浏览器决定。</td></tr></tbody></table><p>text-align:center;可以使得子元素p、h1-h6、img、form、input等元素快速居中对齐，但如果子元素是div，则不能直接使该div居中。</p><p>在上面的代码中添加text-align: center;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main_title</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定about和gallery的上部分div*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样页面文本也实现了居中效果</p><p><img src="HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408223008257.png" alt="image-20200408223008257"></p><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p><img src="HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408224732450.png" alt="image-20200408224732450"></p><p>需要实现红色方框中的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about_other&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about_us&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>A WORD<span class="tag">&lt;<span class="name">br</span>&gt;</span>ABOUT US<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>Praesent dignissim viverra est, sed bibendum ligula congue con. Sed ac nisl et felis gravida commodo? Suspendisse eget ullamcorper ipsum. Suspendisse diam amet<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EXPLORE&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about_img&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/bb3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about_num&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;stu_num&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>70000<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Students<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fac_num&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>600<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Faculty<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要实现三个div同行显示，最中间图片居中且div元素有重叠。此时前两种方法会将三个div竖向居中，如果使用绝对定位实现重叠效果时候，此时又不能同时实现图片居中。此时需要引进flex布局。</p><h4 id="flex的诞生"><a href="#flex的诞生" class="headerlink" title="flex的诞生"></a>flex的诞生</h4><blockquote><p>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p><p>2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</strong></p><h4 id="flex概念"><a href="#flex概念" class="headerlink" title="flex概念"></a>flex概念</h4><blockquote><p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p></blockquote><h4 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h4><p>flex-direction    flex-wrap    flex-flow    justify-content    align-items    align-content</p><p>具体各个容器属性的介绍及用法参见<a href="https://www.runoob.com/w3cnote/flex-grammar.html">菜鸟教程网</a></p><p>flex-direction属性决定项目的排列方向</p><p><img src="HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/0cbe5f8268121114e87d0546e53cda6e.png" alt="img"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>justify-content属性定义了项目在主轴上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中justif-content: center; 可以实现该容器内的项目实现同一行居中对齐</p><p><strong>让我们回到正题</strong>，要实现红色方框内的效果则需要将父级div变成flex布局并设置居中对齐，然后容器中要重叠的项目（子div）设置绝对定位即可。(重点看代码中的flex和position属性)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span>&#123;</span><br><span class="line"><span class="comment">/*父元素定义flex属性得div元素在横向上排列*/</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">360px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: normal;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span> <span class="selector-class">.info</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#A4A4A4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">margin-left</span>:<span class="number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="comment">/*同时设置两个师生数量div*/</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">33px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="css不规则图形"><a href="#css不规则图形" class="headerlink" title="css不规则图形"></a>css不规则图形</h2><p><img src="HTML-CSS%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%A1%88%E4%BE%8B%E5%8F%8A%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85/image-20200408232028282.png" alt="image-20200408232028282"></p><p>在青色div最后加上::after{}。在内容之后插入新的内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-class">.r_img</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="comment">/*在div最后添加一个三角形区域*/</span></span><br><span class="line"><span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="comment">/*显示一个三角形区域并上色*/</span></span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">280px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS代码精简及补充"><a href="#CSS代码精简及补充" class="headerlink" title="CSS代码精简及补充"></a>CSS代码精简及补充</h2><table><thead><tr><th></th><th>选择器</th><th>作用</th></tr></thead><tbody><tr><td>1</td><td>id，*</td><td>选择指定元素中被用户选中的内容</td></tr><tr><td>2</td><td>逗号选择器</td><td>联合选择器</td></tr><tr><td>3</td><td>空格选择器</td><td>子孙（后代）选择器</td></tr><tr><td>4</td><td>&gt;选择器</td><td>子选择器</td></tr><tr><td>5</td><td>+选择器</td><td>相邻兄弟选择器</td></tr><tr><td>6</td><td>[]</td><td>属性选择器</td></tr></tbody></table><p>灵活应用以上选择器，精简css代码</p><h3 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h3><table><thead><tr><th></th><th>选择器</th></tr></thead><tbody><tr><td>1</td><td>!important</td></tr><tr><td>2</td><td>行内样式</td></tr><tr><td>3</td><td>ID选择器</td></tr><tr><td>4</td><td>类选择器</td></tr><tr><td>5</td><td>标签</td></tr><tr><td>6</td><td>通配符</td></tr><tr><td>7</td><td>浏览器默认属性</td></tr></tbody></table><p>伪元素选择器：::selection    ::before    ::after    ::first-line    ::first-letter等等</p><p>伪类选择器：a:link    a:visited    a:hover    a:active    :focus等等</p><h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Career Builder<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/common.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/logo.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;###&#x27;</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;###&#x27;</span>&gt;</span>ABOUT<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;###&#x27;</span>&gt;</span>GALLERY<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;###&#x27;</span>&gt;</span>FACULTY<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;###&#x27;</span>&gt;</span>EVENTS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;###&#x27;</span>&gt;</span>CONTACT<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner_img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/banner3.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;cap&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- placeholder属性设置默认显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;basic_input&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&#x27;your Name&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;basic_input&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;your Phone&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">class</span>=<span class="string">&#x27;basic_input&#x27;</span> <span class="attr">placeholder</span>=<span class="string">&quot;your Email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Write Your Comment Here&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;send_btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SEND MESSAGE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;send_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>ABOUT<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;h2_desc&#x27;</span>&gt;</span>Lorem Ipsum is simplely dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about_other&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about_us&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>A WORD<span class="tag">&lt;<span class="name">br</span>&gt;</span>ABOUT US<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>Praesent dignissim viverra est, sed bibendum ligula congue con. Sed ac nisl et felis gravida commodo? Suspendisse eget ullamcorper ipsum. Suspendisse diam amet<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EXPLORE&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about_img&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/bb3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about_num&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;stu_num&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>70000<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Students<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fac_num&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>600<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Faculty<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/b1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_desc r_img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p1&quot;</span>&gt;</span>Library<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>lorem Ipsum is simplely dummy text of the printing and typesetting industry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p3&quot;</span>&gt;</span>Lorem Ipsum has been the industry&#x27;s standard dummy tet ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lib_btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EXPLORE&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/b2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_desc r_img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p1&quot;</span>&gt;</span>Computer Lab<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>lorem Ipsum is simplely dummy text of the printing and typesetting industry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p3&quot;</span>&gt;</span>Lorem Ipsum has been the industry&#x27;s standard dummy tet ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;com_btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EXPLORE&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_desc l_img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p1&quot;</span>&gt;</span>Conference Hall<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>lorem Ipsum is simplely dummy text of the printing and typesetting industry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p3&quot;</span>&gt;</span>Lorem Ipsum has been the industry&#x27;s standard dummy tet ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;con_btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EXPLORE&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/b3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_desc l_img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p1&quot;</span>&gt;</span>Play Ground<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>lorem Ipsum is simplely dummy text of the printing and typesetting industry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p3&quot;</span>&gt;</span>Lorem Ipsum has been the industry&#x27;s standard dummy tet ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lib_btn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;EXPLORE&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/b4.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main_title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>GALLERY<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;h2_desc&#x27;</span>&gt;</span>Lorem Ipsum is simplely dummy text of the printing and typesetting industry.Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery_img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/03-01.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>SCIENCELAB<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/03-02.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>INDOOR STADIUM<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/03-03.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>TRANSPORTATION<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/03-04.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>KIDS ROOM<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/03-05.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>MEDITATION CLASSES<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/03-06.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc_p2&quot;</span>&gt;</span>KIDS PLAY GROUND<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>©2020 imooc.com 京ICP备0000000号<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">font-family</span>: Microsoft YaHei UI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="comment">/*浏览器100%显示*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="comment">/*将页面左右居中*/</span></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="comment">/*取消超链接颜色样式*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定二级标题字样*/</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定小短线*/</span></span><br><span class="line"><span class="comment">/*用label制造出小短线区域 并使其显示*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">15px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h2_desc</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定二级标题下的文字*/</span></span><br><span class="line"><span class="attribute">color</span>:<span class="number">#A4A4A4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main_title</span>&#123;</span><br><span class="line"><span class="comment">/*统一设定about和gallery的上部分div*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*统一设置文本*/</span></span><br><span class="line"><span class="selector-class">.desc_p1</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">33px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.desc_p2</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.desc_p3</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#A4A4A4</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.logo</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">margin-left</span>:<span class="number">100px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">70px</span>;</span><br><span class="line"><span class="comment">/*先将列表整体设置为右浮动，然后再将单个列表设置为左浮动*/</span></span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">22px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-class">.cap</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line"><span class="attribute">background-color</span>: black;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">form</span>&#123;</span><br><span class="line"><span class="comment">/*将宽度设置为100% 然后使用*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">30</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>&#123;</span><br><span class="line"><span class="comment">/*设置input框为透明*/</span></span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line"><span class="comment">/*设置边框为实线*/</span></span><br><span class="line"><span class="attribute">border-style</span>: solid;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#A4A4A4</span>;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#A4A4A4</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">6px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">textarea</span>&#123;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">140px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span>,<span class="selector-tag">textarea</span><span class="selector-pseudo">::placeholder</span>&#123;</span><br><span class="line"><span class="comment">/*修改默认input默认显示的字体 颜色 样式*/</span></span><br><span class="line"><span class="attribute">color</span>: <span class="number">#A4A4A4</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-class">.basic_input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;button&#x27;</span>]</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;button&#x27;</span>]</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.banner_img</span> <span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">textarea</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">border-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">850px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span>&#123;</span><br><span class="line"><span class="comment">/*父元素定义flex属性得div元素在横向上排列*/</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">360px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: normal;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_us</span> <span class="selector-class">.info</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">40px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#A4A4A4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-tag">input</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">margin-left</span>:<span class="number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="comment">/*同时设置两个师生数量div*/</span></span><br><span class="line"><span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">33px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.about_other</span> <span class="selector-class">.about_num</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1600px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-tag">img</span>,<span class="selector-class">.detail</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-class">.img_desc</span>&#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">30px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-class">.r_img</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="comment">/*在div最后添加一个三角形区域*/</span></span><br><span class="line"><span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="comment">/*显示一个三角形区域并上色*/</span></span><br><span class="line"><span class="attribute">border-right-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: -<span class="number">280px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.about</span> <span class="selector-class">.detail</span> <span class="selector-class">.l_img</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="comment">/*在div最后添加一个三角形区域*/</span></span><br><span class="line"><span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="comment">/*显示一个三角形区域并上色*/</span></span><br><span class="line"><span class="attribute">border-left-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">140px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span> <span class="selector-class">.gallery_img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">670px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span> <span class="selector-class">.gallery_img</span>&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">290px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gallery</span> <span class="selector-class">.gallery_img</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>: -<span class="number">5px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line"><span class="attribute">text-indent</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">80px</span> auto;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#07cbc9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML name id class的区别</title>
      <link href="/2020/04/03/HTML-name-id-class%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/04/03/HTML-name-id-class%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p>name：指定标签的名称。</p></li><li><p>id：指定标签的唯一标识。</p></li><li><p>class：指定标签的类名。</p></li></ol><h2 id="name"><a href="#name" class="headerlink" title="name"></a>name</h2><p>指定标签格式</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;username&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li><blockquote><p>主要是用于获取提交表单的某表单域信息， 作为可与服务器交互数据的HTML元素的服务器端的标示，比如input、select、textarea、框架元素(iframe、frame、 window的名字，用于在其他frame或window指定target )和button等，这些元素都与表单(框架元素作用于form的target)提交有关，浏览器会根据name来设定发送到服务器的request， 在表单的接收页面只接收有name的元素,  所以赋ID的元素通过表单是接收不到值的。 我们可以在服务器端根据其Name通过Request.Params取得元素提交的值。在form里面，如果不指定name，就不会发送到服务器端。</p></blockquote></li><li><p>input type=’radio’单选标签：把几个单选标签的 name设为一个相同值时，将会进行单选操作。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;sex&#x27;</span>/&gt;</span>male</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;sex&#x27;</span>/&gt;</span>female</span><br></pre></td></tr></table></figure></li><li><p>在HTML DOM对象树中，可以通过document.getElementsByName()来获取有相同name标的标签，然后进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change_bgcolor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sex=<span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;sex&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;sex.length;i++)&#123;</span><br><span class="line">        <span class="comment">/*遍历sex数组，改变背景颜色*/</span></span><br><span class="line">        sex[i].style.backgroundColor=<span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他特点"><a href="#其他特点" class="headerlink" title="其他特点"></a>其他特点</h3><p>name属性的值，在当前page页不具有唯一性</p><h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>指定标签的唯一标识</p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;password&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;psd&#x27;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol><li><p>根据提供的唯一id号，快速获取标签对象。如：document.getElementById()</p></li><li><p>用于充当label标签for属性的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&#x27;userid&#x27;</span>&gt;</span>male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;userid&#x27;</span>/&gt;</span></span><br><span class="line">// 表示单击此label标签时，id为userid的标签获得焦点，此时单选框也被选中了。</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他特点-1"><a href="#其他特点-1" class="headerlink" title="其他特点"></a>其他特点</h3><p>id属性的值，在当前的page页面是唯一的</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>指定标签的类名</p><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><p>CSS操作，把一些特定样式放到一个class类中，通过class修改找到特定的标签来设置CSS</p><h3 id="其他特点-2"><a href="#其他特点-2" class="headerlink" title="其他特点"></a>其他特点</h3><p>一个标签可以有多个class属性，设置时必须用空格隔开；class=‘btn submit’</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端油画商城案例（静态页面实现）</title>
      <link href="/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/03/31/%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该案例为慕课网    <a href="www.imooc.com">imooc</a>    JavaScript课程的学习笔记</p><h3 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h3><ol><li>学以致用，综合运用之前所学的知识</li><li>掌握页面布局的方法，独立完成商品展示页的开发</li><li>具有构思、规划页面布局的方法和思路</li><li>数量掌握div+css+js的相关用法</li></ol><h4 id="页面展示"><a href="#页面展示" class="headerlink" title="页面展示"></a>页面展示</h4><p><strong>页眉、banner区</strong></p><p><img src="%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200331103446658.png" alt="image-20200331103446658"></p><p><strong>正文区</strong></p><p><img src="%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200331103531373.png" alt="image-20200331103531373"></p><p><strong>页脚区</strong></p><p><img src="%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200331103613607.png" alt="image-20200331103613607"></p><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p>开发工具及版本：Sublime 3</p><p>开发使用的技术：CSS+DIV+JS</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>新建项目文件夹，新建index.html</p><p>文件夹内新建css、js文件夹，分别添加css和js文件</p><p>html内链接js，css文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&#x27;stylesheet&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text/css&#x27;</span> <span class="attr">href</span>=<span class="string">&#x27;css/common.css&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;js/js1.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="logo和menu区域设计"><a href="#logo和menu区域设计" class="headerlink" title="logo和menu区域设计"></a>logo和menu区域设计</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ol><li>制作左上方的logo，注意上边距、左边距的距离</li><li>制作菜单：注意菜单的位置、间距、打开效果</li><li>右侧的用户交互区：注意右边距的位置、水平位置</li><li>页眉区的尺寸和距离，注意要和下方 banner区域的大小、位置相应一致</li></ol><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mata</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>商城<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/common.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/js1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/logo.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu_title&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;display_list()&quot;</span> <span class="attr">onmouseleave</span>=<span class="string">&quot;hide_list()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span>内容分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&#x27;menu_list&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>现实主义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>抽象主义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;auth&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1300px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.logo</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-class">.menu_title</span>&#123;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="comment">/*取消超链接的装饰*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="comment">/*去掉列表小圆点*/</span></span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">23px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="literal">true</span>; <span class="comment">//设置全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display_list</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;menu_list&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="comment">// 元素呈现为块级元素</span></span><br><span class="line">ul.style.display=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ul.style.display=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide_list</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;menu_list&#x27;</span>);</span><br><span class="line">ul.style.display=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200403104911306.png" alt="image-20200403104911306"></p><h3 id="重点及难点"><a href="#重点及难点" class="headerlink" title="重点及难点"></a>重点及难点</h3><ul><li>菜单的制作，要注意菜单的位置、利用js实现的弹出效果、菜单的外观样式。</li><li>位置、对齐方式等细节设置</li></ul><h3 id="经验技巧总结"><a href="#经验技巧总结" class="headerlink" title="经验技巧总结"></a>经验技巧总结</h3><ol><li>可以在设置页面区域的同时，将banner图进行设置，方便进行位置参照</li><li>div逐层设置，仔细观察样式所选择的对象以及实现的效果</li><li>js菜单效果设置</li><li>css中加上层级关系，方便后期维护</li></ol><h2 id="商品展示区制作"><a href="#商品展示区制作" class="headerlink" title="商品展示区制作"></a>商品展示区制作</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>实现banner，保持对齐。内容列表重叠在banner上（absolute定位）</li><li>用列表实现商品展示页</li><li>实现商品翻页目录显示（不实现翻页）</li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>css选择器**’&gt;’和空格**区别：&gt;是选直系元素，空格选内部所有的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*如果content中直接包含menu 效果一样*/</span></span><br><span class="line"><span class="selector-class">.content</span>&gt;<span class="selector-class">.menu</span>&gt;<span class="selector-tag">ul</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>box-shadow</strong>属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br><span class="line"><span class="comment">/*浏览器兼容性支持*/</span></span><br><span class="line">-webkit-<span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;<span class="comment">/*谷歌浏览器支持*/</span></span><br><span class="line">-moz-<span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;<span class="comment">/*火狐浏览器支持*/</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需的。水平阴影的位置。允许负值</td></tr><tr><td>v-shadow</td><td>必需的。垂直阴影的位置。允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离</td></tr><tr><td>spread</td><td>可选。阴影大小</td></tr><tr><td>color</td><td>可选。颜色</td></tr><tr><td>inset</td><td>（关键字）可选。从外层的阴影（开始时）改变阴影内侧阴影</td></tr></tbody></table><p><strong>span div 对比</strong>：span级别比div小一点。div块级元素，span行级元素。</p><p><strong>font-weight属性</strong>： normal bold bolder lighter等可选。设置字体粗细</p><p><strong>line-height属性</strong>：指定行高</p><p><strong>overflow属性</strong>：指定如果内容溢出一个元素的框，会发生什么。（overflow:hidden还可以起到清除浮动效果，见下文项目总结）</p><table><thead><tr><th align="left">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">visible</td><td align="center">默认值。内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td align="left">hidden</td><td align="center">内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td align="left">scroll</td><td align="center">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td align="left">auto</td><td align="center">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td align="left">inherit</td><td align="center">规定应该从父元素继承 overflow 属性的值。</td></tr></tbody></table><h3 id="重点及难点-1"><a href="#重点及难点-1" class="headerlink" title="重点及难点"></a>重点及难点</h3><ul><li>商品展示区两行三列排列方式</li><li>商品展示区两端对齐</li><li>正文区三部分布局的统一：banner区、商品展示区、页码区</li></ul><h3 id="经验技巧总结-1"><a href="#经验技巧总结-1" class="headerlink" title="经验技巧总结"></a>经验技巧总结</h3><ul><li>位置：在进行页面布局时，位置和对齐，是最重要的基础工作。</li><li>什么时候添加div：有改变即添加div（包括后期可能要改动的）。</li></ul><h2 id="页脚区"><a href="#页脚区" class="headerlink" title="页脚区"></a>页脚区</h2><p>页脚太简单了 不说了</p><p>完成所有部分的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mata</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>商城<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/common.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/js1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/logo.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu_title&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;display_list()&quot;</span> <span class="attr">onmouseleave</span>=<span class="string">&quot;hide_list()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span>内容分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&#x27;menu_list&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>现实主义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>抽象主义<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;auth&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">&#x27;#&#x27;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/welcome.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_content&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/wumingnvlang.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/cart.svg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/wumingnvlang.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/cart.svg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/wumingnvlang.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/cart.svg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/wumingnvlang.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/cart.svg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/wumingnvlang.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/cart.svg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/wumingnvlang.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>无名女郎<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 学以致用，综合运用之前所学的知识2. 掌握页面布局的方法，独立完成商品展示页的开发3. 具有构思、规划页面布局的方法和思路4. 数量掌握div+css+js的相关用法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>￥9999<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/cart.svg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img_nav&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>…<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>98<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span> <span class="attr">class</span>=<span class="string">&quot;page_num&quot;</span>&gt;</span>99<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;###&quot;</span>&gt;</span>尾页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>M-GALLERY<span class="tag">&lt;/<span class="name">span</span>&gt;</span>©2020 POWERED BY WDNMD<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">font-family</span>: 宋体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#F2F2F2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.logo</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">25px</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-class">.menu_title</span>&#123;</span><br><span class="line"><span class="attribute">border-bottom</span>: <span class="number">1px</span> solid black;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line"><span class="comment">/*取消超链接的装饰*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>: none;</span><br><span class="line"><span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="comment">/*去掉列表小圆点*/</span></span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line"><span class="comment">/*是的内容分类列表和banner重叠*/</span></span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-class">.auth</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.banner</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1260px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">520px</span>;</span><br><span class="line"><span class="attribute">margin-top</span>:<span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-right</span>: <span class="number">60px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="comment">/*增加阴影*/</span></span><br><span class="line"><span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">background-color</span>: white;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.info</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.info</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">13px</span>；</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.img_btn</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.img_btn</span> <span class="selector-class">.price</span>&#123;</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">23px</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.img_btn</span> <span class="selector-class">.btn</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: red;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_content</span> <span class="selector-class">.img_btn</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_nav</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="comment">/*需要设置宽度，不然默认占用content宽度，实现不了居中*/</span></span><br><span class="line"><span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="comment">/*???*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_nav</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.img_nav</span> <span class="selector-tag">ul</span> <span class="selector-class">.page_num</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="comment">/*用padding将内部边距撑起来，增大阴影*/</span></span><br><span class="line"><span class="attribute">padding</span>:<span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">80px</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="literal">true</span>; <span class="comment">//设置全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display_list</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;menu_list&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="comment">// 元素呈现为块级元素</span></span><br><span class="line">ul.style.display=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">flag=<span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ul.style.display=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hide_list</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;menu_list&#x27;</span>);</span><br><span class="line">ul.style.display=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200403203115643.png" alt="image-20200403203115643"></p><h2 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h2><ul><li>整体布局时，各个对象的位置、对齐方式、间距等设置要注意细节，<strong>要通过计算的方式获取相互位置的对应关系</strong></li><li>ul和li的使用频率较高，<strong>非常适合于规律性显示</strong>的页面效果，例如案例中，多次使用到ul和li的场景</li><li>overflow:hidden、height、float直接的关系（下图蓝色是父div，红色是子div，右边这种情况就是起到了清除浮动的效果）</li></ul><p><img src="%E5%89%8D%E7%AB%AF%E6%B2%B9%E7%94%BB%E5%95%86%E5%9F%8E%E6%A1%88%E4%BE%8B/image-20200403212918533.png" alt="image-20200403212918533"></p><ul><li>实现水平居中、垂直居中的方法<ul><li>水平居中：margin: 25px <strong>auto</strong>;</li><li>垂直居中：line-height: 60px; height:60px;（height、line-height保持一致）</li></ul></li><li>找准层级关系，活用div。为了后期维护方便，给未来需要修改的内容添加div。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 实战案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>米糠拌饭の碎碎念/2019总结</title>
      <link href="/2020/03/29/%E7%B1%B3%E7%B3%A0%E6%8B%8C%E9%A5%AD%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2020/03/29/%E7%B1%B3%E7%B3%A0%E6%8B%8C%E9%A5%AD%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>​        这个假期真的很长很长，长到等来了我的24岁生日，我想在今天记录一些东西，保存在我刚搭建好的这个网站上。国内疫情的影响到现在已经逐渐消解，家乡的街巷已经恢复了往日的繁忙，但是地大的开学时间依旧处于待定状态，我还能继续在家待上一段时间。诚恳的说我一点也不急着开学，这个假期给了我难得的闲暇时间，让我可以安心做着自己喜欢的事，而且有了很多时间陪陪父母，这是去年初搬家以来，在家待的最长时间。在这期间我的厨艺也有了长足的进步，前段时间还和叔叔一家一起爬了武功山，了了我登顶武功山的心愿(￣▽￣)／。小小的总结一下过去的一年（含这个长假）。</p><p>​        <strong>生活上</strong>，我比以前更加焦虑了，“不干地质了我还能做什么”这个问题对我来说很棘手，我应该无法把我的爱好发展成职业，我急于寻找我可以学好且有前景的职业，做一些转行的准备。9月到现在很长一段时间，我都把业余精力放在了python web后端以及相关计算机知识的学习上，目前学习效果并不太显著，但是我还有时间，至少距离21年6月份毕业还有很长的一段时间，我不会停下脚步。不少业内人士告诉我python并不是一门优秀且广泛的web后端语言，工作中可能并不适用。我想过如果以后我成了程序员，python只是我的启蒙语言，不会是我唯一要掌握的语言，语言这种东西也是触类旁通吧，我可以继续学，这个时候靠什么语言入行程序员似乎不是那么重要。</p><p>​        过去一年，我还是喜欢拿着小相机到处拍拍，假期这段时间更是如此。截止目前快门数达到了8468，绝不让它吃灰。我的摄影和调色水平似乎有了些许提升，调色脱离了疯狂拉升饱和度、对比度的初级阶段。以后我还是会经常拿起相机的，出门闲逛怕拍照确实是很好的解压方式。过去一年，英语水平好像没有进步，依旧都会每天打开扇贝看原著、练口语或者背单词，原著里面越来越多不认识的单词了，GRE单词也背不下去了，很多时候都是匆匆打卡，敷衍了事，学英语确实需要一个目标，以前是为了六级，现在我暂时缺少了明确的目标，希望以后能找到新的学英语的动力。过去一年，是缺乏身体锻炼的一年，在学校偶尔会打打羽毛球，也就一两周一次，打球水平没有进步，依旧菜鸡。开学后希望能多上球场，提升球技。</p><p><img src="%E7%B1%B3%E7%B3%A0%E6%8B%8C%E9%A5%AD%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/%E6%9C%AA%E6%A0%87%E9%A2%98-1.jpg" alt="未标题-1" title="近期拍摄作品"></p><p>​        <strong>学习上</strong>，我确实对地质没多少兴趣了，很多时候学到的东西感觉太虚无缥缈，很难想象这些对真正的地质生产有多少帮助。在地科院我花了很多时间在处理老师的各种合同和各种账单，而文献什么的看的太少，各种实验也太多太杂，大量的数据都没处理。我对毕业论文有点担心，我还是说服不了导师给我一个简单点的毕业论文课题，现在定的论文题目太棘手了，假期还剩下点时间，我需要抓紧点了。毕竟首要目标是毕业，毕业后我才有选择，打气精神来，奥利给！</p><p>​        （省略若干字，不便展示）</p><p>​        <strong>写在最后</strong>：近期看了一部电影让我印象深刻，《本杰明巴顿奇事》讲的是布拉德·皮特饰演的男主从一出生便是老年人，逆龄生长，最终回到婴儿形态离世。我顺便把扇贝上的同名原著看完了，在我看来电影远比原著好看的多，除了逆龄生长的设定以外，简直是和原著完全不同的故事。电影似乎在诉说，人生倒着过或者正着过没有什么不同，即便时光倒流，遗憾的事也无法改变，不顺心的时候，除了破口大骂，最后还是得放手。向前看吧，所有的基于现在的改变都不会太晚，勇敢做决定，重新开始！</p><blockquote><p>For what it’s worth, it’s never too late, or in my case, too early, to be whoever you want to be.<br>There’s no time limit, start whenever you want.<br>You can change or stay the same. There’s no rules to this thing.<br>We can make the best or the worst of it. I hope you make the best of it.<br>I hope you see things that startle you. I hope you feel things you never felt before. I hope you meet people with a different point of view. I hope you live a life you’re proud of.<br>If you find that you are not, I hope you have the strength to start all over again.</p></blockquote><p>2020年3月29日（三月初六）</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微量元素数据解释处理</title>
      <link href="/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/"/>
      <url>/2020/03/25/%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="微量元素数据处理与解释（REE）"><a href="#微量元素数据处理与解释（REE）" class="headerlink" title="微量元素数据处理与解释（REE）"></a>微量元素数据处理与解释（REE）</h2><h3 id="控制微量元素行为的地球化学规律"><a href="#控制微量元素行为的地球化学规律" class="headerlink" title="控制微量元素行为的地球化学规律"></a>控制微量元素行为的地球化学规律</h3><p><strong>微量元素</strong>（trace elements) 岩石中含量&lt;0.1%的，用ppm（μg/g，10<sup>-6</sup>）或者ppb（ng/g，10<sup>-9</sup>）表示</p><p>微观规律——地球化学亲和性、类质同象法则、晶体场理论（对过渡金属），归纳为：化学和晶体化学因素，包括原子（离子）的半径、配位数、原子和离子极化、最紧密堆积等。</p><p>宏观规律——体系性质和热力学规律的影响，如体系的化学组成、温度、压力、氧化还原电位等。</p><ol><li><p>地球化学过程的演化实质是元素在共存各相（液—固，固—固）之间的分配过程。</p></li><li><p>自然过程趋向局域平衡，元素在相互共存各相间的平衡分配取决于元素及矿物的晶体化学性质及热力学条件。</p></li><li><p>在自然过程中主量元素和微量元素在各相间分配的行为是不同的。主量元素——能形成自己的独立矿物，其在各相中分配受相律控制。</p><p>自由度 F = 组分数C - 相数φ + 2</p><p>橄榄石两相体系相图C=2 (硅酸镁和硅酸铁两种组分)</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200325093409597.png" alt="image-20200325093409597"></p><p>微量元素——常不能形成独立相，它们在固熔体、溶体和溶液中浓度很低，因此微量元素的分配不受相律的限制，而服从稀溶液定律（亨利定律），即在分配达平衡时在各相间的化学势相等。<br>$$<br>D=\frac{C_{固相}}{C_{液相}}<br>$$<br><strong>相容元素</strong>：——D&gt;&gt;1, 优先进入矿物相，或残留相。例如： Ni, Co, V, Cr</p><p><strong>不相容元素</strong>：——D&lt;&lt;1，优先进入熔体相，D&lt;0.1为强不相容元素，</p><p>不相容元素又可进一步划分：<strong>小原子半径、高电荷的高场强元素（HFSE, high field strength elements）</strong>——REE, Th, U, Ce, Pb4+, Zr, Hf, Ti, Nb, Ta    </p><p>元素的电荷(Z)与其半径(r )比值称为场强，相当于电离势，</p><pre><code>如果Z/r&gt;3.0 (2.0), 称为高场强元素如果Z/r &lt;3.0，称为低场强元素。</code></pre><p>A. 离子电价较高、半径较小、具有较高场强, 其离子电位π&gt;3;<br>B. 难溶于水，典型代表为Nb、Ta、Zr、Hf、P、Ti、Sn;<br>C. 地球化学性质一般较稳定，不易受变质、蚀变和风化作用等的影响，因此常用来恢复遭后期变化岩石的原岩性质。</p><p><strong>低场强大离子亲石元素（ LIL, large ion lithophile）</strong>——它们极为活动，尤其是有流体存在，K, Rb, Cs, Ba, Pb2+, Sr, Eu2+</p></li></ol><p>**岩石中元素的分配系数（Di）  **用于研究微量元素在矿物集合体（岩石）及与之平衡的熔体之间的分配关系，常用岩石中所有矿物的分配系数与岩石中各矿物含量乘积之和表达 。<br>$$<br>D_i=\sum{W_A}{D_i}<br>$$<br>W<sub>A</sub> = 岩石中矿物重量含量<br>D<sub>i</sub>   = 元素i在矿物A中的分配系数</p><p>元素分配系数测定方法，目前应用最广泛的是<u>斑晶-基质法</u>：火山岩中斑晶矿物代表熔体结晶过程中固相，基质或淬火熔体代表熔体相（岩浆）。两相中微量元素比值即为该元素的分配系数。 </p><h4 id="岩浆演化中的元素分配模型"><a href="#岩浆演化中的元素分配模型" class="headerlink" title="岩浆演化中的元素分配模型"></a>岩浆演化中的元素分配模型</h4><p>发生熔融的2种情况：</p><ol><li><p>平衡部分熔融（或称为<strong>批式熔融，batch partial melting</strong> ）：微量元素在固相和熔体之间一直保持平衡，直到聚集到从熔体中迁移出去。</p></li><li><p><strong>分离熔融（fractional partial melting）</strong>：发生部分熔融过程中，形成的熔体连续地移出固相</p><p>实际应用中最常见的是第一种</p></li></ol><p><strong>批式熔融模型</strong>：<br>$$<br>\frac{C_L}{C_O}=\frac{1}{\overline{D_i}(1-F)+F}<br>$$<br>C<sub>L</sub> = 某元素在<strong>熔体</strong>中的含量（ppm）<br>C<sub>o</sub>=某元素在未熔融前<strong>原始岩石</strong>中的含量（ppm）<br>F = 熔融重量比例 ＝ 熔体/(熔体＋残余岩石)<br>D<sub>i</sub> = 总分配系数（各矿物相中该元素分配系数和）</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326163950954.png" alt="image-20200326163950954"></p><p>D<sub>i</sub>=1.0    随着F变化 C<sub>L</sub>/C<sub>o</sub>=1不变</p><p>D<sub>i</sub>&gt;&gt;1.0    相容元素    A.  部分熔融的熔体中发生贫化，特别是低度部分熔融 (例如F&lt;0.1)<br>B. 贫化的速度随F的增大呈现出变缓的特征。</p><p>D<sub>i</sub>&lt;&lt;1.0    不相容元素    A. 极大量富集在初始产生的极少量熔体中。B. 随着F增加，富集程度减弱。C.其最大的富集浓度不能超出D=0的曲线，当D=0，C<sup>i</sup><sub>L</sub>/C<sup>i</sup><sub>O</sub> =1/F</p><p>对于强不相容元素D<sub>i</sub>趋近于0，</p><p>C<sub>L</sub>/C<sub>o</sub>=1/F     <strong>应用意义：如果我们知道一个强烈不相容元素在岩浆和源岩中含量， 我们就可以估算部分熔融程度F。强不相容元素高度集中在初始产生的极少量熔体中，随着F增高而被稀释</strong>。</p><p>熔融程度F趋近于0时，C<sup>i</sup><sub>L</sub>/C<sup>i</sup><sub>O</sub> =1/D<sub>i</sub>即微量元素在所形成的熔体中的富集或贫化程度最大。随着F的增大，熔体中微量元素的富集和贫化程度逐渐减少。<strong>应用意义：如果我们知道C<sub>L</sub> 和岩浆起源于一个低度部分熔融过程，有D<sub>i</sub>我们就可以估算此元素在源区 (C<sub>o</sub>)中的含量</strong>。</p><p>F趋近于1，C<sup>i</sup><sub>L</sub>/C<sup>i</sup><sub>O</sub> =1。岩石全熔，即熔体中所有元素的浓度与母岩中该元素的浓度趋于一致。没有分配的意义。</p><h4 id="批式熔融计算实例："><a href="#批式熔融计算实例：" class="headerlink" title="批式熔融计算实例："></a>批式熔融计算实例：</h4><p>计算Rb和Sr在玄武岩部分熔融过程中含量</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326171056460.png" alt="image-20200326171056460"></p><ol><li>把矿物含量(Mode)换算为矿物重量比例(Wol、Wcpx等)。</li><li>应用Di =WA Di（上面的分配系数公式），计算Rb和Sr的总分配系数。</li></ol><p>查表获得元素在矿物中的分配系数Di</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326171658590.png" alt="image-20200326171658590"></p><p>橄榄玄武岩 = 18% Ol＋37% Cpx＋45% Pl   (wt%)</p><p>D<sub>Rb</sub> = 0.045<br>D<sub>Sr</sub> = 0.848</p><ol start="3"><li><p>用公式计算C<sub>L</sub>/C<sub>o</sub>，用公式计算不同部分熔融程度（F＝0~1)的Rb和Sr含量比值</p></li><li><p>投图</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326172847404.png" alt="image-20200326172847404"></p></li><li><p>解释：在玄武岩批式熔融产生岩浆中，Rb显示强烈的不相容性；Sr则弱不相容。</p></li></ol><h4 id="元素分配模型的实际意义"><a href="#元素分配模型的实际意义" class="headerlink" title="元素分配模型的实际意义"></a>元素分配模型的实际意义</h4><p>研究岩石成因和演化过程</p><ol><li><p>揭示源岩成分特征</p></li><li><p>揭示岩浆作用过程，利用已有的各种模型，揭示部分熔融、岩浆混合、分离结晶、同化混染等。</p></li></ol><h3 id="稀土元素处理"><a href="#稀土元素处理" class="headerlink" title="稀土元素处理"></a>稀土元素处理</h3><p>57-71号：15个元素+Y=16个元素<br>La,Ce,Pr,Nd, Pm, Sm, Eu, Gd,Tb, Dy, Ho, Er, Tm, Yb, Lu＋Y</p><p><strong>共性：</strong></p><ol><li><p>它们的原子结构相似；</p></li><li><p>离子半径相近(REE3＋ 离子半径1.06Å ～0.84 Å，Y3＋为0.89 Å）；</p></li><li><p>它们在自然界密切共生。</p></li></ol><p><strong>分组：</strong></p><p>轻稀土LREE：La,Ce,Pr,Nd, Pm, Sm, Eu,  </p><p>重稀土HREE：Gd,Tb, Dy, Ho, Er, Tm, Yb, Lu＋Y</p><p><strong>Oddo-Harkins效应</strong>（太阳系和地球都有此规律）</p><ul><li>原子序数为偶数的元素的丰度大大高于相邻原子序数为奇数的元素。</li><li>具有偶数质子数（A）或偶数中子数（N）的核素丰度总是高于具有奇数A或N的核素。</li><li>这一规律称为奥多一哈根斯法则，亦即奇偶规律。</li></ul><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326173844786.png" alt="image-20200326173844786"></p><p>Oddo-Harkins效应产生原因</p><ol><li>受原子核结构控制，当质子与中子数比例适当，原子核稳定，元素分布就广。例如16O，24Mg，28Si等，最稳定，元素丰度高。</li><li>随着原子序数增大，中子数增加比质子数快，原子核趋于不稳定，元素在自然界丰度低。</li></ol><p><strong>稀土元素标准化</strong>：某一参照物质作为标准化数据, 例如, 用原始地幔、MORB等，能够清楚地显示不同矿物间REE的分异程度。  </p><p>稀土组成图具体做法：</p><ol><li><p>将样品含量(ppm)分别除以球粒陨石(或者其他数据，如MORB)，得到标准化后数据</p></li><li><p>14个元素按照原子序数排列作为横坐标（注意没有Pm和Y含量，也可以留有Pm的位置、数据为空）</p></li><li><p> 纵坐标以对数表示</p></li></ol><p><strong>为什么用球粒陨石?</strong></p><p>球粒陨石的非挥发性成分=原始太阳星云的平均化学成分 = 地球整体成分</p><p><strong>为什么需要标准化？</strong></p><ol><li>消除奇偶效应，曲线平滑,</li><li>利于对比,可以直观鉴别岩石样品相对于球粒陨石的分异程度.</li><li>有利于直观展示岩石的类型和成因.</li></ol><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326174530294.png" alt="image-20200326174530294" title="西藏钾质超钾质岩石稀土元素组成球粒陨石标准化图，标准化数据根据Boynton（1984）"></p><p>原子序数增大，相容性增强，不相容性减弱</p><h4 id="REE标准化后的重要参数"><a href="#REE标准化后的重要参数" class="headerlink" title="REE标准化后的重要参数"></a>REE标准化后的重要参数</h4><ol><li><p>稀土元素总含量∑REE能反映出<strong>各类岩石的特征</strong>。因此ΣREE对于判断岩石的源岩特征和区分岩石类型有意义。</p><p>1）一般在超基性岩、基性岩中ΣREE较低，在酸性岩和碱性岩中ΣREE较高；<br>2）沉积岩中砂岩和页岩的ΣREE较高，碳酸盐岩的ΣREE较低。</p></li><li><p>轻、重稀土元素的比值    比值=LREE/HREE或=ΣCe/ΣY</p><p>这一参数能较好地反映REE的<strong>分异程度</strong>和指示<strong>部分熔融残留体或岩浆早期结晶矿物的特征</strong>。</p><p> ΣCe碱性较ΣY强，随岩浆作用的演化，ΣCe/ΣY比值逐渐增大，即ΣCe在岩浆作用晚期富集。 </p></li></ol><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326175619187.png" alt="image-20200326175619187" title="原始岩浆成分演化过程中REE的分馏特征 "></p><ol start="3"><li><p>稀土元素之间的比值</p><ol><li><p>(La/Yb)<sub>N</sub>、(La/Lu)<sub>N</sub>、(Ce/Yb)<sub>N</sub>  (下标N表示为标准化后的比值)</p><p>反映REE球粒陨石标准化图解中曲线总体斜率，表征LREE和HREE的分异程度。</p></li><li><p> (La/Sm)<sub>N</sub>、(Gd/Lu)<sub>N</sub></p></li></ol><p>   表示分馏程度， 例如： (La/Sm)<sub>N</sub>比值越大反映LREE越富集<br>   孙贤鉥等据此将洋中脊玄武岩划分为三种类型：<br>   (La/Sm)<sub>N</sub>＞1 为P型，即富集型，即地幔热柱或异常型；<br>   (La/Sm)<sub>N</sub>≈1为T型，即过渡型；<br>   (La/Sm)<sub>N</sub>＜1为N型，即正常型，对应的REE分布型式为亏损型。</p></li><li><p>Eu异常</p><p>斜长石的结晶——不同矿物具有不同的REE分配系数，斜长石对Eu的分配系数远远大于其它REE，在各类岩浆岩中Eu异常的产生常与斜长石的分离结晶有关<br>例如：<br>1.在岩浆分离结晶过程中，斜长石的大量晶出将导致残余熔体中形成明显负异常。<br>2.在部分熔融中，斜长石的熔融导致熔体中Eu正异常。</p><p>Eu<sub>2+</sub>  可以与Ca和Sr类质同象，倾向于进入斜长石晶格</p><p><strong>月岩的Eu异常特征</strong></p><p>原始月球玄武岩岩浆，先发生了斜长石堆晶岩石(月球高地)，剩余的演化后形成了月球玄武岩。堆晶和演化的充分互补。</p></li></ol><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326202147929.png" alt="image-20200326202147929"></p><ol start="5"><li><p>不用矿物相对REE模式的控制</p><p>主要依据REE在这些元素中的分配系数，有的导致REE分异，有的不导致REE分异</p><p>玄武岩和安山岩中矿物/熔体间REE的分配系数（据Shnetzler和Philpotts,1970）</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326202718333.png" alt="image-20200326202718333"></p></li></ol><p>玄武岩和安山岩中矿物/熔体间REE的分配系数（据Shnetzler和Philpotts,1970）</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326202902011.png" alt="image-20200326202902011"></p><p>​    英安岩和流纹岩中矿物/熔体间REE的分配系数（据Hanson,1978）</p><ol start="6"><li>特殊的REE模式——四组分效应<img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326204020382.png" alt="image-20200326204020382"></li></ol><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200326204036854.png" alt="image-20200326204036854"></p><h2 id="微量元素数据处理与解释（微量）"><a href="#微量元素数据处理与解释（微量）" class="headerlink" title="微量元素数据处理与解释（微量）"></a>微量元素数据处理与解释（微量）</h2><h3 id="微量元素处理方法"><a href="#微量元素处理方法" class="headerlink" title="微量元素处理方法"></a>微量元素处理方法</h3><h4 id="多元素标准化图解"><a href="#多元素标准化图解" class="headerlink" title="多元素标准化图解"></a>多元素标准化图解</h4><p>属于REE标准化图解的扩展和普及化，最早用于玄武岩，现在可以用于所有岩石（岩浆岩和沉积岩）类型。 </p><p>标准化数值——原始地幔、球粒陨石，或者MORB。</p><p>作图的意图——比较样品与标准化数据之间的偏离程度</p><p>目前常用作标准化的原始地幔顺序和成分（primitive/primordial mantle）</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417165119864.png" alt="image-20200417165119864"></p><p>不相容性  强 —-&gt; 弱</p><p>蜘蛛图元素组成：</p><ol><li>都是不相容元素，从左到右，不相容性逐渐减弱</li><li>包括大离子亲石元素（LILs）、高场强元素（HFSE）、REE</li></ol><p>目前常用顺序：</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417170327615.png" alt="image-20200417170327615"></p><p><strong>作图方法</strong>：</p><p>同REE相似，分别除以标准化数值，再作图。注意主量元素，需要从wt.%换算到ppm, 再除以标准化值<br>K=K<sub>2</sub>O*10000*0.83013/250<br>Ti=TiO<sub>2</sub>*10000*0.5995/1300<br>P=P<sub>2</sub>O<sub>5</sub>*10000*0.43646/95</p><p>这里K<sub>2</sub>O、 TiO<sub>2</sub>、 P<sub>2</sub>O<sub>5</sub> 均代入主量元素（wt.%）结果</p><p><strong>为什么岛弧火山岩出现Nb、Ta的负异常？</strong></p><p>正常岛弧火山岩由源自俯冲板片脱水产生的流体交代地幔楔发生部分熔融而形成，这种富水的流体亏损高场强元素（HFSE），如Nb(Ta)、Ti、P等元素，这些元素的流体/岩石分配系数很小（&lt;&lt;1)，因此，在流体交代地幔楔形成的正常岛弧火山岩中出现显著的Nb（Ta）、Ti负异常</p><p><strong>岛弧火山岩成因</strong></p><ol><li>俯冲板片相变释放的流体加入到上覆的地幔楔；</li><li>流体携带了俯冲板片析出的活动元素 (K, Rb, Sr, Th等元素）；【溶于水的】</li><li>导致地幔楔熔融的岛弧岩浆富集上述元素。</li><li> 同时, HFSEs相对亏损。</li><li>富集LILEs的地幔楔再部分熔融，高含量+不相容 </li></ol><p><strong>岩浆岩出现Nb、Ta、Ti、P负异常引申含义</strong></p><p>具有大陆地壳物质的参与，参与的物质由交代流体带来，流体是富集K, Rb, Sr, Th，亏损 Nb、Ta、Ti和P。</p><h4 id="元素或者元素比值投点图"><a href="#元素或者元素比值投点图" class="headerlink" title="元素或者元素比值投点图"></a>元素或者元素比值投点图</h4><p>二元图</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417174429120.png" alt="image-20200417174429120"></p><p>元素比值图</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417174527378.png" alt="image-20200417174527378"></p><p>三角图</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417174541862.png" alt="image-20200417174541862"></p><h3 id="微量元素图解研究用途"><a href="#微量元素图解研究用途" class="headerlink" title="微量元素图解研究用途"></a>微量元素图解研究用途</h3><h4 id="岩石分类"><a href="#岩石分类" class="headerlink" title="岩石分类"></a>岩石分类</h4><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417174740771.png" alt="image-20200417174740771"></p><p><em>横坐标代表全碱，纵坐标代表Si</em></p><h4 id="岩石成因"><a href="#岩石成因" class="headerlink" title="岩石成因"></a>岩石成因</h4><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417195008894.png" alt="image-20200417195008894"></p><p><strong>讨论岩石成因与演化过程</strong></p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417233527967.png" alt="image-20200417233527967"></p><p>Xu et al，2001，Geology</p><p><strong>探讨岩石源区成分和成因</strong></p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417233620122.png" alt="image-20200417233620122"></p><p>Zhao et al，2009，Lithos</p><p><strong>判断岩石成因与演化过程</strong></p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417233820423.png" alt="image-20200417233820423"></p><p>Zhao et al，2009，Lithos</p><h4 id="鉴别岩石形成的构造环境"><a href="#鉴别岩石形成的构造环境" class="headerlink" title="鉴别岩石形成的构造环境"></a>鉴别岩石形成的构造环境</h4><p>花岗岩相关的Pearce构造环境判别图</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417234829803.png" alt="image-20200417234829803"></p><p>与玄武岩相关的</p><p><img src="%E5%BE%AE%E9%87%8F%E5%85%83%E7%B4%A0/image-20200417234923185.png" alt="image-20200417234923185"></p><p>元素的构造环境鉴别小结：</p><ol><li>图解是形象的鉴别方法：<br>——是基于归纳总结不同的、已知构造环境的岩石之地球化学特征，进行统计制作的；<br>——简便、直观、可操作性强；<br>——但不要绝对化。</li><li>元素地球化学应用本质：<br>——元素成分决定于矿物相-熔体成分；<br>——元素成分决定于体系的成分与过程<br>——体系成分是第一性，构造环境是进一步推知的</li></ol>]]></content>
      
      
      <categories>
          
          <category> 地球化学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地球化学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript仿计算器案例</title>
      <link href="/2020/03/25/JavaScript%E4%BB%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/03/25/JavaScript%E4%BB%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>名称：仿windows计算器</p><p>功能：</p><ol><li>实现单击按钮录入数字</li><li>实现基础四则运算功能，并添加必要的异常处理，例如，除数为零</li><li>实现小数点功能并添加异常处理：小数点只能出现一次</li><li>实现正负号功能</li><li>实现退位功能，已经是最后一位时，显示框显示为零</li><li>清屏功能</li></ol><p>使用的知识点：</p><ol><li>利用大量的自定义函数实现业务逻辑</li><li>灵活运用事件及事件处理</li><li>培养异常处理的编程方法</li><li>培养并实践利用不同思路实现编程</li></ol><p>综合练习的目的：</p><ol><li>将css、html和js有效的进行技术组合，实现业务功能</li><li>锻炼和培养编程思想，解决问题的能力和方法</li><li>锻炼和培养利用多种编程思路，完成预先设定的目标</li></ol><h2 id="页面实现"><a href="#页面实现" class="headerlink" title="页面实现"></a>页面实现</h2><p>首先将计算器基本HTML框架建立，并设置css样式、写入js。实现数字输入与显示。</p><p>为了使代码更集中，此处将css和js写入html内部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>calculator<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        *&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">611px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">            <span class="attribute">left</span>: <span class="number">33%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">top</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="comment">/*标签选择器中选中button的写法*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;button&#x27;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-right</span>: <span class="number">49px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">560px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">cal_1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取输入框控件，默认为0，并将其定义为键盘不可输入状态</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;text_o&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        num.value=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        num.disabled=<span class="string">&#x27;disabled&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 通过标签获取所有的input，包括button按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oButton=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;oButton.length; i++)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 定义按钮单击的函数</span></span></span><br><span class="line"><span class="javascript">            oButton[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="built_in">this</span>.value))&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 若判断为单击数字按钮则显示数字</span></span></span><br><span class="line"><span class="javascript">                    num.value=(num.value+<span class="built_in">this</span>.value)*<span class="number">1</span>; <span class="comment">//使用了隐式转换，避免输入框第一个数字是0</span></span></span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">switch</span>(<span class="built_in">this</span>.value)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;←&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;+/-&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;cal_1()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div2&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;text_o&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div3&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;C&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;←&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;+/-&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;×&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;8&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;9&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;+&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;=&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;M&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="JavaScript%E4%BB%BF%E8%AE%A1%E7%AE%97%E5%99%A8%E6%A1%88%E4%BE%8B/image-20200324162255682.png" alt="image-20200324162255682" title="效果图"></p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>对javascript代码添加各项功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cal_1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 获取输入框控件，默认为0，并将其定义为键盘不可输入状态</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;text_o&#x27;</span>);</span><br><span class="line">num.value=<span class="number">0</span>;</span><br><span class="line">num.disabled=<span class="string">&#x27;disabled&#x27;</span>;</span><br><span class="line"><span class="comment">// 通过标签获取所有的input，包括button按钮</span></span><br><span class="line"><span class="keyword">var</span> oButton=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num_temp;</span><br><span class="line"><span class="keyword">var</span> symbol;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;oButton.length; i++)&#123;</span><br><span class="line">        <span class="comment">// 定义按钮单击的函数</span></span><br><span class="line">oButton[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="built_in">this</span>.value))&#123;</span><br><span class="line">                <span class="comment">// 若判断为单击数字按钮则显示数字</span></span><br><span class="line">num.value=(num.value+<span class="built_in">this</span>.value)*<span class="number">1</span>; <span class="comment">// 隐式转换</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 其他按钮的显示</span></span><br><span class="line"><span class="keyword">switch</span>(<span class="built_in">this</span>.value)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">num.value=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;←&#x27;</span>:</span><br><span class="line">                        <span class="comment">// 回退，通过substr去掉最后一个字符</span></span><br><span class="line">num.value=num.value.substr(<span class="number">0</span>,num.value.length-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(num.value.length==<span class="number">0</span>)&#123;</span><br><span class="line">num.value=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+/-&#x27;</span>:</span><br><span class="line">                        <span class="comment">// 正负号添加</span></span><br><span class="line">num.value=num.value*(-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">num_temp=num.value;</span><br><span class="line">num.value=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">symbol=<span class="built_in">this</span>.value;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">num_temp=num.value;</span><br><span class="line">num.value=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">symbol=<span class="built_in">this</span>.value;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">num_temp=num.value;</span><br><span class="line">num.value=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">symbol=<span class="built_in">this</span>.value;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:</span><br><span class="line">num_temp=num.value;</span><br><span class="line">num.value=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">symbol=<span class="built_in">this</span>.value;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line"><span class="keyword">switch</span>(symbol)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">num.value=<span class="built_in">Number</span>(num_temp)/<span class="built_in">Number</span>(num.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">num.value=<span class="built_in">Number</span>(num_temp)+<span class="built_in">Number</span>(num.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">num.value=<span class="built_in">Number</span>(num_temp)-<span class="built_in">Number</span>(num.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;×&#x27;</span>:</span><br><span class="line">num.value=<span class="built_in">Number</span>(num_temp)*<span class="built_in">Number</span>(num.value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                        <span class="comment">// 判断是否存在小数点，如果不存在才添加</span></span><br><span class="line"><span class="keyword">if</span>(!num.value.indexOf(<span class="string">&#x27;.&#x27;</span>))&#123;</span><br><span class="line">num.value=num.value+<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                        <span class="comment">// window.location获取当前页面 href跳转页面</span></span><br><span class="line"><span class="built_in">window</span>.location.href=<span class="string">&#x27;https://www.rice-and-bran.site&#x27;</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完善细节"><a href="#完善细节" class="headerlink" title="完善细节"></a>完善细节</h3><p>给鼠标悬浮在按键上添加背景色改变的效果，并将输入框字符向右缩进一点点。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;button&#x27;</span>]</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#a8a8a8</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">560px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: right;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX数学公式输入</title>
      <link href="/2020/03/25/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/"/>
      <url>/2020/03/25/LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LaTeX（音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由TeX所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。</p></blockquote><p><em><a href="https://baike.baidu.com/item/LaTeX/1212106?fr=aladdin">摘自百度百科LaTeX</a></em></p><p>Typora支持LaTeX格式输入数学公式，一起来试试吧！</p><p><img src="LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/2018041621294865.png" alt="2018041621294865"></p><p><img src="LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/20180416213036844.png" alt="20180416213036844"></p><p><img src="LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/20180416213119987.png" alt="20180416213119987"></p><p><img src="LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E8%BE%93%E5%85%A5/20180416213126857.png" alt="20180416213126857"></p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请SSL证书并安装到Nginx服务器上</title>
      <link href="/2020/03/16/%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6%E5%B9%B6%E5%AE%89%E8%A3%85%E5%88%B0Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>/2020/03/16/%E7%94%B3%E8%AF%B7SSL%E8%AF%81%E4%B9%A6%E5%B9%B6%E5%AE%89%E8%A3%85%E5%88%B0Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<p>数据加密传输，是HTTP和HTTPS之间的本质性区别。当你使用Chrome浏览器访问一个HTTP网站的时候，你会发现浏览器会对该HTTP网站显示“不安全”的安全警告，提示用户当前所访问的网站可能会存在风险。为了让自己的网站加上使用https协议，你需要这样做：</p><h2 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h2><p>登录阿里云，搜索SSL证书，选择免费型DV SSL，下单，填写信息，进行审核。审核通过后将证书下载到本地。</p><h2 id="将SSL证书安装到Nginx服务器上"><a href="#将SSL证书安装到Nginx服务器上" class="headerlink" title="将SSL证书安装到Nginx服务器上"></a>将SSL证书安装到Nginx服务器上</h2><p>以CentOS 7为例。</p><p>下载的证书包含.pem的证书文件和.key的证书密钥文件</p><p><code>ssh root@aliyun</code>登录到阿里云服务器（如何设置ssh免密登录可以查看hexo搭建到云服务器上的博文），在Nginx安装目录（默认Nginx安装目录为/usr/local/nginx/conf）下<strong>创建cert目录</strong>，并将下载的证书文件和密钥文件拷贝到cert目录中。</p><p>这里通过本地scp<strong>上传证书</strong>文件(自行替换本地文件路径和服务器名称)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp 本地文件路径/xxx.key root@aliyun:/usr/local/nginx/conf/cert</span><br><span class="line">scp 本地文件路径/xxx.pem root@aliyun:/usr/local/nginx/conf/cert</span><br></pre></td></tr></table></figure><p><strong>修改Nginx安装目录/conf/nginx.conf文件</strong></p><p>找到以下配置信息并修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">#</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    server_name  www.rice-and-bran.site; //添加域名</span><br><span class="line">    ssl_certificate      cert/3606559_www.rice-and-bran.site.pem; //添加证书文件路径</span><br><span class="line">    ssl_certificate_key  cert/3606559_www.rice-and-bran.site.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; //修改ssl_ciphers</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; //修改protocols，若没有则添加</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html; //若搭建好博客则输入博客路径</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存nginx.conf文件后退出</p><p>执行以下命令<strong>重启Nginx服务器</strong></p><p>若没有<strong>将nginx添加在Linux环境变量中</strong>，可以执行以下代码先</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><p>记得在阿里云服务器中找到安全组管理，添加443端口</p><p>over，此时输入通过https协议访问服务器，不用担心安全警告了！</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> SSL证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理笔记</title>
      <link href="/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="计算机层次与编程语言"><a href="#计算机层次与编程语言" class="headerlink" title="计算机层次与编程语言"></a>计算机层次与编程语言</h3><h4 id="程序翻译与程序解释"><a href="#程序翻译与程序解释" class="headerlink" title="程序翻译与程序解释"></a>程序翻译与程序解释</h4><p>第一种程序语言执行过程：将较为高级的计算机语言l1转化为较为低级的计算机语言l0（计算机实际执行的语言），这一转化过程称为程序翻译，翻译的工具称为编译器。然后交给计算机执行。</p><p>第二种程序语言执行过程：先用较为低级的计算机语言l0实现一个程序（解释器），将高级语言l1作为输入，通过该程序转化为较为低级的计算机语言l0。这一过程称为程序解释。</p><ul><li>计算机执行的指令都是l0</li><li>翻译过程生成新的l0程序，解释过程不生成新的l0程序</li><li>解释过程由l0编写的解释器去解释l1程序</li></ul><p>翻译型语言：C/C++、Object-C、Golang等</p><p>解释型语言：Python、Php、Javascript等</p><p>Java、C#属于翻译+解释型语言，例如Java程序会先编译成JVM字节码，然后再解释成机器码执行。</p><h4 id="计算机的层次"><a href="#计算机的层次" class="headerlink" title="计算机的层次"></a>计算机的层次</h4><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200313214215583.png" alt="image-20200313214215583"></p><p><strong>硬件逻辑层</strong></p><p>由门、触发器等逻辑电路组成</p><p><strong>微程序机器层</strong></p><p>编程语言是微指令集，微指令所组成的微程序直接交由硬件执行</p><p><strong>传统机器层</strong></p><p>编程语言是CPU指令集（机器指令），和硬件直接相关，不同架构CPU使用不同的CPU指令集</p><p><em>一条机器指令对应一个微程序，一个微程序对应一组微指令</em></p><p><strong>操作系统</strong></p><p>向上提供了简易的操作界面，向下对接了指令系统，管理硬件资源，操作系统是位于软件和硬件中的适配层</p><p><strong>汇编语言层</strong></p><p>编程语言是汇编语言，汇编语言可以翻译成可直接执行的机器语言，完成翻译的过程的程序就是汇编器</p><p><strong>高级语言层</strong></p><p>编程语言为广大程序员所接受的高级语言，高级语言的类别非常多，有几百种</p><p><strong>应用层</strong></p><p>满足计算机针对某种用途而专门设计，各种应用程序</p><h3 id="计算机的计算单位"><a href="#计算机的计算单位" class="headerlink" title="计算机的计算单位"></a>计算机的计算单位</h3><p><strong>容量单位</strong></p><p>在物理层面，高低电平记录信息，0/1表示bit（比特位）。</p><p>1Byte=8bits KB MB GB TB PB…</p><p><strong>网络速度</strong></p><p>Mbps=Million bits per second</p><p><strong>CPU速度</strong></p><p>CPU的速度一般体现为CPU的时钟频率，CPU的时钟频率单位一般是Hz（每秒钟周期变动重复次数的计量）</p><h3 id="计算机的字符与编码集"><a href="#计算机的字符与编码集" class="headerlink" title="计算机的字符与编码集"></a>计算机的字符与编码集</h3><h4 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h4><ul><li>使用7个bits就可以完全表示ASCII码</li><li>包括95个可打印字符</li><li>33个不可打印字符（包括控制字符）</li></ul><p><em>33+95=128=2<sup>7</sup></em></p><p>但是很多符号无法表示，所以诞生了<strong>Extended ASCII码</strong>，包括常见数学运算符，带音标的欧洲字符，表格符等其他常用符等。</p><h4 id="字符编码集的国际化"><a href="#字符编码集的国际化" class="headerlink" title="字符编码集的国际化"></a>字符编码集的国际化</h4><p>未解决语言多样性，体系不同，不以有限字符组合等问题，中日韩语言最为复杂</p><p><strong>中文编码集</strong></p><p>GB2312（《信息交换用汉字编码字符集——基本集》），一共收录了7445个字符，包括6763个汉字和682个其他符号。</p><p>1995年，GBK(《汉字内码扩展规范》)，向下兼容GB2312，向上支持国际ISO标准，收录了21003个汉字，支持全部中日韩汉字。</p><p>Unicode，兼容全球的字符集，定义了世界通用的符号集，UTF-*实现了编码，<strong>UTF-8</strong>以字节为单位对Unicode进行编码。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p><strong>冯诺依曼机</strong>组成包括：存储器、运算器、控制器和I\O设备</p><h3 id="计算机的总线"><a href="#计算机的总线" class="headerlink" title="计算机的总线"></a>计算机的总线</h3><p><strong>总线</strong> 为了解决不同设备之间的通信问题，有usb、PCI总线、ISA总线等等</p><p>总线 分为<strong>片内总线</strong>和<strong>系统总线</strong>，片内总线就是芯片内部的总线，寄存器与运算器、控制器之间连接；系统总线是连接计算机外部各种设备的总线，又可分为数据总线、地址总线、控制总线。</p><p><strong>数据总线</strong>：双向传输各个部件的数据信息；数据总线的位数（总线宽度）是数据总线的重要参数，位数一般与CPU位数相同（32位、64位）。</p><p><strong>地址总线</strong>：指定源数据或目的数据在内存中的地址；地址总线的位数与存储单元有关。地址总线位数=n，寻址范围：0~2<sup>n</sup>。</p><p><strong>控制总线</strong>：控制总线是用来发出各种控制信号的传输线；控制信号经由控制总线从一个组件发给另一个组件；控制总线可以监视不同组件之间的状态（就绪/未就绪）。</p><h4 id="总线的仲裁"><a href="#总线的仲裁" class="headerlink" title="总线的仲裁"></a>总线的仲裁</h4><p>用来决定不同设备使用总线的优先顺序，解决总线使用权的冲突问题</p><p><strong>仲裁方法</strong>：链式查询、计数器定时查询、独立请求</p><p><strong>链式查询</strong>：各个设备通过串联电路连接，通过连接顺序决定使用总线的优先级。好处：电路复杂度低、仲裁方式简单；坏处：优先级低的设备难以获得总线使用权，对电路故障敏感。</p><p><strong>计时器定时查询</strong>：仲裁控制器对设备编号并使用计数器累计计数，接收到仲裁信号后，往所有设备发出计数值，计数值与设备编号一致则获得总线使用权。</p><p><strong>独立请求</strong>：每个设备均有总线独立连接仲裁器，设备可单独向仲裁器发送请求和接收请求，当同时收到多个请求信号，仲裁器有权按优先级分配使用权。好处：响应速度快、优先顺序可动态改变；坏处：设备连线多，总线控制复杂。</p><h3 id="计算机的输入输出设备"><a href="#计算机的输入输出设备" class="headerlink" title="计算机的输入输出设备"></a>计算机的输入输出设备</h3><h4 id="常见的输入输出设备"><a href="#常见的输入输出设备" class="headerlink" title="常见的输入输出设备"></a>常见的输入输出设备</h4><p>字符输入设备：键盘 ；图形输入设备：鼠标、数位板、扫描仪等</p><p>图像输出设备：显示器、打印机、投影仪</p><h4 id="输入输出接口的通用设计"><a href="#输入输出接口的通用设计" class="headerlink" title="输入输出接口的通用设计"></a>输入输出接口的通用设计</h4><p>需要包含数据线、状态线、命令线、设备选择线。</p><p><strong>数据线</strong>：是I/O设备与主机之间进行数据交换的传递线，分为单线传输和双向传输</p><p><strong>状态线</strong>：I/O设备状态向主机报告的信号线，查询设备是否已经正常连接并就绪，查询设备是否已经被占用</p><p><strong>命令线</strong>：CPU向设备发送命令的信号线，发送读写信号，发送启动停止信号</p><p><strong>设备选择线</strong>：主机选择I/O设备进行操作的信号线，对连在总线上的设备进行选择</p><h4 id="CPU与I-O设备的通信"><a href="#CPU与I-O设备的通信" class="headerlink" title="CPU与I/O设备的通信"></a>CPU与I/O设备的通信</h4><p>分为程序中断、DMA（直接存储器访问）</p><p><strong>程序中断</strong>：当外围I/O设备就绪时，向CPU发出中断信号，CPU有专门的电路响应中断信号。简图</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200320150931915.png" alt="image-20200320151023181"></p><p>提供低速设备通知CPU的一种异步的方式，CPU可以在高速运转同时兼顾低速设备的响应。但是频繁中断，CPU使用效率低</p><p><strong>DMA（直接存储器访问）</strong>：DMA直接连接主存与I/O设备，DMA工作时不需要CPU参与</p><p>当主存与I/O设备交换信息时，不需要中断CPU，可以提高CPU的效率</p><h3 id="计算机存储器概览"><a href="#计算机存储器概览" class="headerlink" title="计算机存储器概览"></a>计算机存储器概览</h3><h4 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h4><p>按存储介质分为：半导体存储器和磁存储器</p><p>按存取方式分类：随机存储器（RAM）、串行存储器、只读存储器（ROM）</p><h4 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h4><p>缓存、主存、辅存</p><p><strong>缓存-主存层次</strong>：</p><ul><li>原理：局部性原理</li><li>实现：在CPU于主存之间增加一层速度快（容量小）的Cache</li><li>目的：解决主存速度不足的问题</li></ul><blockquote><p>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</p></blockquote><p><strong>主存-辅存层次</strong>：</p><ul><li>原理：局部性原理</li><li>实现：主存之外增加辅助存储器（磁盘、SD卡、U盘等）</li><li>目的：解决主存容量不足的问题</li></ul><h3 id="计算机的主存储器与辅助存储器"><a href="#计算机的主存储器与辅助存储器" class="headerlink" title="计算机的主存储器与辅助存储器"></a>计算机的主存储器与辅助存储器</h3><h4 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h4><p>RAM(随机读取存储器：Random Access Memory)，通过电容存储数据，必须隔一段时间刷新一次，如果掉电，那么一段时间后将丢失所有数据</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200320154612678.png" alt="主存与计算机交互的结构" title="主存与计算机交互的结构"></p><p>32位系统地址总线只有32位，所以寻址范围只有2<sup>32</sup>，最大支持内存只有4GB</p><p>32位系统    2<sup>32</sup>=4 x 2<sup>30</sup>=4GB</p><p>64位系统    2<sup>64</sup>= 2<sup>34</sup> x 2<sup>30</sup>= 2<sup>34</sup> GB</p><h4 id="辅助存储器"><a href="#辅助存储器" class="headerlink" title="辅助存储器"></a>辅助存储器</h4><p>磁盘：表面是可磁化的硬磁特性材料，移动磁头径向运动读取磁道信息</p><h3 id="计算机的高速缓存"><a href="#计算机的高速缓存" class="headerlink" title="计算机的高速缓存"></a>计算机的高速缓存</h3><h4 id="高速缓存的工作原理"><a href="#高速缓存的工作原理" class="headerlink" title="高速缓存的工作原理"></a>高速缓存的工作原理</h4><p><strong>字</strong>：是指存放在一个存储单元中的二进制代码组合</p><p><strong>字块</strong>：存储在连续的存储单元中而被看作是一个单元的一组字</p><p>假设一个字有32位，一个字块共B个字，主存共M个字块，B x M = 主存总字数</p><p>B x M x 32 = 主存总容量（bits）</p><p>字的地址包含两个部分，前m位指定字块的地址，后b位指定字在字块中的地址</p><p>2<sup>m</sup>=M, 2<sup>b</sup>=B</p><p><em>例子</em>：假设主存用户容量空间为4G，字块大小为4M，字长为32位，则对于字地址中的块地址m和块内地址b的位数，至少应该是多少？</p><p>4G=4096M</p><p>字块数：4096÷4=1024</p><p>字块地址m：log<sub>2</sub>1024=10</p><p>块内字数：4M÷32bit=1048576</p><p>块内地址b：log<sub>2</sub>1048576=20</p><p><strong>命中率</strong>是衡量缓存的重要性能指标。理论上CPU每次都能从高速缓存存取数据的时候，命中率为1。</p><p>访问主存的次数：N<sub>m</sub>; 访问Cache次数：N<sub>c</sub></p><p>命中率h：<br>$$<br>h=\frac{N_c}{N_c+N_m}<br>$$<br><strong>访问效率</strong>也能衡量缓存的性能</p><p>访问效率：e；访问主存时间：t<sub>m</sub>；访问缓存的时间：t<sub>c</sub>；访问Cache-主存系统平均时间：</p><p>t<sub>a</sub>=ht<sub>c</sub>+(1-h)t<sub>m</sub></p><p>访问效率e：<br>$$<br>e=\frac{t_c}{t_a}=\frac{t_c}{ht_c+(1-h)t_m}<br>$$</p><h4 id="高速缓存的替换策略（具体可跳转至原理实践章节）"><a href="#高速缓存的替换策略（具体可跳转至原理实践章节）" class="headerlink" title="高速缓存的替换策略（具体可跳转至原理实践章节）"></a>高速缓存的替换策略（具体可跳转至原理实践章节）</h4><p>当CPU所需数据不在高速缓存中，需要从主存载入所需数据</p><p>替换算法：随机算法，先进先出算法（FIFO）、最不经常使用算法（LFU）、最近最少使用算法（LRU）</p><p><strong>先进先出算法（FIFO）</strong>：把高速缓存看作是一个先进先出的队列，优先替换最先进入队列的字块</p><p><strong>最不经常使用算法（LFU）</strong>：优先淘汰最不经常使用的字块，需要额外的空间记录字块的使用频率</p><p><strong>最近最少使用算法（LRU）</strong>：优先淘汰一段时间内没有使用的字块。有多种实现方法，一般使用双向链表，把当前访问节点置于链表前面（保证链表头部节点是最近使用的）</p><h3 id="计算机的指令系统"><a href="#计算机的指令系统" class="headerlink" title="计算机的指令系统"></a>计算机的指令系统</h3><h4 id="机器指令的形式"><a href="#机器指令的形式" class="headerlink" title="机器指令的形式"></a>机器指令的形式</h4><p>机器指令主要由两个部分组成：操作码和地址码字段。操作码指明指令所要完成的操作，操作码位数反映了机器操作种类，如2<sup>8</sup>=256种操作；地址码直接给出操作数或者操作数的地址，分三地址指令（地址码字段有三个地址）、二地址指令和一地址指令。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200327095100477.png" alt="image-20200327095100477"></p><p>比如加法运算，第1,2个地址指向两个加数，第3个地址指向结果存放处。</p><p>二地址指令就是(addr1)OP(addr2)→(addr1)或(addr2)</p><p><strong>零地址指令</strong>：在机器指令中无地址码，一般是空操作、停机操作、中断返回操作等</p><h4 id="机器指令的操作类型"><a href="#机器指令的操作类型" class="headerlink" title="机器指令的操作类型"></a>机器指令的操作类型</h4><p>数据传输类型：</p><ul><li>寄存器之间、寄存器与存储单元、存储单元之间传送</li><li>数据读取、交换地址数据、清零置一等操作</li></ul><p>算术逻辑类型：</p><ul><li>操作数之间的加减乘除运算</li><li>操作数的与或非等逻辑位运算</li></ul><p>移位操作：</p><ul><li>数据左移（乘2）、数据右移（除2）</li><li>完成数据在算术逻辑单元的必要操作</li></ul><p>控制指令：</p><ul><li>等待指令、停机指令、空操作指令、中断指令等</li></ul><h4 id="机器指令的寻址方式"><a href="#机器指令的寻址方式" class="headerlink" title="机器指令的寻址方式"></a>机器指令的寻址方式</h4><p>对于<strong>指令寻址</strong>可分为顺序寻址和跳跃寻址</p><p>对于<strong>数据寻址</strong>，分为立即寻址、直接寻址、间接寻址</p><p><strong>立即寻址</strong>：指令直接获得操作数，无需访问存储器</p><p><strong>直接寻址</strong>：直接给出操作数在主存的地址，寻找操作数简单，无需计算数据地址</p><p><strong>间接寻址</strong>：指令地址码给出的是操作数地址的地址，需要一次或多次主存来获取操作数</p><table><thead><tr><th align="center">寻址方式</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">立即寻址</td><td align="center">速度快</td><td align="center">地址码位数限制操作数表示范围</td></tr><tr><td align="center">直接寻址</td><td align="center">寻找操作数简单</td><td align="center">地址码位数限制操作数寻址范围</td></tr><tr><td align="center">间接寻址</td><td align="center">操作数寻址范围大</td><td align="center">速度较慢</td></tr></tbody></table><h3 id="计算机的控制器"><a href="#计算机的控制器" class="headerlink" title="计算机的控制器"></a>计算机的控制器</h3><p>控制器是协调和控制计算机运行的。</p><p>控制器包含程序计数器、时序发生器、指令译码器、各种寄存器、总线。其中寄存器又分为指令寄存器、主存地址寄存器、主存数据寄存器、通用寄存器</p><p><strong>程序计数器</strong>：用来存储下一条指令的地址，循环从程序计数器中拿出指令，当指令被拿出时，指向下一条指令。当指令被拿出时，指向下一条指令。</p><p><strong>实习发生器</strong>：用于发送时序脉冲，CPU依据不同的时序脉冲有节奏的进行工作</p><p><strong>指令译码器</strong>：是控制器的主要部件之一，计算机指令由操作码和地址码组成，翻译操作码对应的操作以及控制传输地址码对应的数据</p><p><strong>指令寄存器</strong>：控制器主要部件之一，从主存或高速缓存取计算机指令</p><p><strong>主存地址寄存器</strong>：保存当前CPU正要访问的内存单元的地址</p><p><strong>主存数据寄存器</strong>：保存当前CPU正要读或写的主存数据</p><p><strong>通用寄存器</strong>：暂时存放或传送数据或指令，可保存ALU的运算中间结果，容量比一般专用寄存器要大</p><h3 id="计算机的运算器"><a href="#计算机的运算器" class="headerlink" title="计算机的运算器"></a>计算机的运算器</h3><p>运算器是用来进行数据运算加工的</p><p>运算器包括数据缓冲器、ALU、通用寄存器、状态字寄存器、总线</p><p><strong>数据缓冲器</strong>：分为输入缓冲和输出缓冲，输入缓冲暂时存放外设送过来的数据、输出缓冲暂时存放送往外设的数据</p><p><strong>ALU（算术逻辑单击）</strong>：运算器的主要组成，常见的位运算（左右移、与或非等），算术运算（加减乘除等）</p><p><strong>状态字寄存器</strong>：存放运算状态（条件码、进位、溢出、结果正负等），存放运算控制信息（调试跟踪标记位、允许中断位等）</p><p><strong>通用寄存器</strong>：用于暂时存放或传送数据或指令，可保存ALU的运算中间结果，容量比一般专用寄存器要大</p><h3 id="计算机指令的执行过程"><a href="#计算机指令的执行过程" class="headerlink" title="计算机指令的执行过程"></a>计算机指令的执行过程</h3><h4 id="指令执行过程"><a href="#指令执行过程" class="headerlink" title="指令执行过程"></a>指令执行过程</h4><p>取指令（从缓存取指令，送到指令寄存器）    分析指令（指令译码器译码，发出控制信号，程序计数器+1）    执行指令（装载数据到寄存器，ALU处理数据，记录运算状态，送出运算结果）</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200327231511179.png" alt="image-20200327231511179" title="指令执行过程"></p><h4 id="CPU的流水线设计"><a href="#CPU的流水线设计" class="headerlink" title="CPU的流水线设计"></a>CPU的流水线设计</h4><p>优化指令执行过程，大大提升CPU运算效率</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><h3 id="进制运算的基础"><a href="#进制运算的基础" class="headerlink" title="进制运算的基础"></a>进制运算的基础</h3><h4 id="进制概述"><a href="#进制概述" class="headerlink" title="进制概述"></a>进制概述</h4><p>进位制是一种记数方式，亦称进位计数法或位值计数法，有限种数字符号来表示无限的数值，使用的数字符号的数目称为之中进位制的基数或底数</p><p>计算机内使用八进制和十六进制能大大减少数据长度，比如：</p><p>1024=0b1000000000    1024=0o2000    1024=ox400</p><p>分别表示二进制（0b）、八进制（0o）、十六进制（0x）的1024</p><h4 id="二进制运算的基础"><a href="#二进制运算的基础" class="headerlink" title="二进制运算的基础"></a>二进制运算的基础</h4><p>整数二级制十进制转换不展开讲了，重复相除和拆分展开</p><p>十进制小数转换二进制，重复相乘法。</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328100422573.png" alt="image-20200328100422573"></p><h3 id="有符号数和无符号数"><a href="#有符号数和无符号数" class="headerlink" title="有符号数和无符号数"></a>有符号数和无符号数</h3><p>数值第一位就是符号位，使用0表示正数，使用1表示负数 即<strong>原码表示法</strong></p><p>但是用原码进行运算非常复杂，特别是两个操作数符号不同的时候。首先判断两个操作数绝对值大小，使用绝对值大的数减去绝对值小的数，对于符号值，以绝对值大的为准</p><h3 id="二进制的补码表示法"><a href="#二进制的补码表示法" class="headerlink" title="二进制的补码表示法"></a>二进制的补码表示法</h3><p>减法运算复杂，希望能找到使用正数替代复试的方法，使用加法代替减法操作，从而消除减法，但是在计算补码过程中，还是使用了减法</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328104156873.png" alt="image-20200328104156873"></p><p>其中n表示x的位数</p><p>例1：n=4，x=13，计算x的二进制原码和补码</p><p>原码：0,1101</p><p>补码：0,1101</p><p>例2：n=4 x=-13，计算x的二进制原码和补码</p><p>原码：1,1101</p><p>补码：2<sup>n+1</sup>+x=2<sup>4+1</sup>-13=100000-1101=10011</p><p>第一位是符号位  x=1,0011</p><h3 id="二进制反码表示法"><a href="#二进制反码表示法" class="headerlink" title="二进制反码表示法"></a>二进制反码表示法</h3><p>反码的目的是找出原码与补码之间的规律，消除转换过程中的减法</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328110453247.png" alt="image-20200328110453247"></p><p>例1：n=4 x=-13，计算x的二进制原码和反码</p><p>原码：x=1,1101</p><p>反码：(2<sup>n+1</sup>+x)+x=(2<sup>4+1</sup>-1)-13=11111-1101=10010</p><p>反码：x=1,0010</p><p><strong>正数的原码、补码、反码都是相同的</strong></p><p><strong>负数的反码等于原码除符号位外按位取反，负数的补码等于反码加1</strong></p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328111934601.png" alt="image-20200328111934601"></p><p>例2：n=4 x=-9 计算x的二进制原码 反码 补码</p><p>原码：1,1001    反码：1,0110    补码：1,0111</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328113723245.png" alt="image-20200328113723245"></p><p>这样，通过先求反码再求补码的方式就可以消除减法</p><h3 id="小数的补码"><a href="#小数的补码" class="headerlink" title="小数的补码"></a>小数的补码</h3><p>小数部分也与前面的规律相同</p><p>例1：x=9/16，计算x的二进制原码 反码和补码</p><p>用重复相乘法求原码：0,0.1001 所以反码=补码=0,0.1001</p><p>例2：x=-11/32，计算x的二进制原码 反码和补码</p><p>原码1,0.01011 反码：1,1.10100 补码：1,1.10101</p><h3 id="定点数与浮点数"><a href="#定点数与浮点数" class="headerlink" title="定点数与浮点数"></a>定点数与浮点数</h3><h4 id="定点数的表示方法"><a href="#定点数的表示方法" class="headerlink" title="定点数的表示方法"></a>定点数的表示方法</h4><p>小数点固定在某个位置的数称之为定点数</p><p>若不是0.1011或者1011这样的纯小数或者纯整数，需要乘以比例因子以满足定点数保存格式</p><h4 id="浮点数的表示方法"><a href="#浮点数的表示方法" class="headerlink" title="浮点数的表示方法"></a>浮点数的表示方法</h4><p>计算机处理的很大程度上不是纯小数或纯整数；数据范围很大，定点数难以表达。因此需要浮点数表示方法</p><h5 id="浮点数的表示格式"><a href="#浮点数的表示格式" class="headerlink" title="浮点数的表示格式"></a>浮点数的表示格式</h5><p>N=S×r<sup>j</sup></p><p>S：尾数    r：基数    j：阶码</p><p>尾数必须使用纯小数</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328155237200.png" alt="image-20200328155237200"></p><h5 id="浮点数的表示范围"><a href="#浮点数的表示范围" class="headerlink" title="浮点数的表示范围"></a>浮点数的表示范围</h5><p>假设阶码数值取m位，尾数数值取n位。</p><p>阶码能够表达的最大值：2<sup>m</sup>-1</p><p>阶码表示范围：[-(2<sup>m</sup>-1), 2<sup>m</sup>-1]</p><p>尾数能够表达的最大值：1-2<sup>-n</sup>，最小值2<sup>-n</sup></p><p>尾数表示范围：负数[-(1-2<sup>-n</sup>), -(2<sup>-n</sup>)]    正数[2<sup>-n</sup>, 1-2<sup>-n</sup>]</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328161505201.png" alt="image-20200328161505201"></p><p>单精度浮点数：使用4字节、32位来表达浮点数（float）</p><p>双精度浮点数：使用8字节、64位来表达浮点数（double）</p><h5 id="浮点数的规格化"><a href="#浮点数的规格化" class="headerlink" title="浮点数的规格化"></a>浮点数的规格化</h5><p>尾数必须用纯小数，最高位必须是1</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328231643732.png" alt="image-20200328231643732"></p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200328232756330.png" alt="image-20200328232756330"></p><p><strong>例题必须理解</strong></p><h4 id="定点数与浮点数的对比"><a href="#定点数与浮点数的对比" class="headerlink" title="定点数与浮点数的对比"></a>定点数与浮点数的对比</h4><ul><li>当定点数与浮点数位数相同时，浮点数表示的范围更大</li><li>当浮点数尾数为规格化数时，浮点数的精度更高</li><li>浮点数运算包含阶码和尾数，浮点数的运算更为复杂</li></ul><p>浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数</p><h3 id="定点数的加减法运算"><a href="#定点数的加减法运算" class="headerlink" title="定点数的加减法运算"></a>定点数的加减法运算</h3><h4 id="定点数的加法"><a href="#定点数的加法" class="headerlink" title="定点数的加法"></a>定点数的加法</h4><p>整数加法：<br>$$<br>A[补]+B[补]=[A+B]<a href="mod2%5E%7Bn+1%7D">补</a><br>$$<br>小数加法：<br>$$<br>A[补]+B[补]=[A+B]<a href="mod2">补</a><br>$$<br><strong>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</strong></p><p><strong>例1</strong>：A=-110010,B=001101，求A+B</p><p>A[补]=1,001110    B[补]=B[原]=0,001101</p><p>A[补]+B[补]=1,011011</p><p>A+B=1,011011[补]=-100101</p><p><strong>例2</strong>：A=-0.1010010，B=0.0110100，求A+B</p><p>A[补]=1,1.0101110    B[补]=B[原]=0,0.0110100</p><p>A[补]+B[补]=1,1.1100010</p><p>A+B=1,1.1100010[补]=-0.0011110</p><p><strong>例3</strong>：A=-10010000，B=-01010000，求A+B</p><p>A[补]=1,01110000    B[补]=1,10110000</p><p>A[补]+B[补]=<strong>1,00100000</strong></p><p>A+B=1,00100000[补]=-11100000</p><p>验证：A=-144 B=-80 A+B=-224</p><p><strong>例4</strong>：A=-10010000，B=-11010000，求A+B</p><p>A[补]=1,01110000    B[补]=1,00110000</p><p>A[补]+B[补]=0,10100000</p><p>A+B=0,10100000[补]=10100000</p><p>验证：A=-144 B=-208 <strong>但是</strong>A+B=160</p><p>产生矛盾</p><p>这是因为A、B都是八位，但是A+B的结果用八位表示不出来，发生了<strong>溢出</strong></p><h4 id="判断溢出"><a href="#判断溢出" class="headerlink" title="判断溢出"></a>判断溢出</h4><p>双符号位判断法</p><p>单符号位表示变为双符号位：0=&gt;00,1=&gt;11</p><p>双符号位产生的进位丢弃</p><p>结果的双符号位不同则表示溢出</p><p>所以例4：</p><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-20200404183948040.png" alt="image-20200404183948040"></p><p>说明例题4原结果无效！</p><h4 id="定点数的减法"><a href="#定点数的减法" class="headerlink" title="定点数的减法"></a>定点数的减法</h4><p>整数减法：<br>$$<br>A[补]-B[补]=A+(-B)<a href="mod2%5E%7Bn+1%7D">补</a><br>$$<br>小数减法：<br>$$<br>A[补]-B[补]=A+(-B)<a href="mod2">补</a><br>$$<br><strong>(-B)[补]等于B[补]连同符号位按位取反，末位加一</strong></p><p><strong>例5：</strong>A=11001000,B=-00110100，求A-B</p><p>A[补]=A[原]=0,11001000    B[补]=1,1100100</p><p>(-B)[补]=0,00110100</p><p>建议用双符号位相加检查溢出</p><p>A-B=A+(-B)[补]=0,11111100=11111100</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</strong></p><p><strong>双符号位判断溢出：</strong></p><p>单符号位表示变为双符号位：0=&gt;00,1=&gt;11</p><p>双符号位产生的进位丢弃</p><p>结果的双符号位不同则表示溢出</p><p><strong>(-B)[补]等于B[补]连同符号位按位取反，末位加一</strong></p><h3 id="浮点数的加减法运算"><a href="#浮点数的加减法运算" class="headerlink" title="浮点数的加减法运算"></a>浮点数的加减法运算</h3><p>步骤：对阶——尾数求和——尾数规格化——舍入——溢出判断</p><h4 id="对阶"><a href="#对阶" class="headerlink" title="对阶"></a>对阶</h4><p><em>对阶的目的是使得两个浮点数阶码一致，使得尾数可以进行运算</em></p><ul><li>浮点数尾数运算简单</li><li>浮点数位数实际小数位于阶码有关</li><li>阶码按小阶看齐大阶的原则</li></ul><p>x=0.1101×2<sup>01</sup></p><p>y=(-0.1010)×2<sup>11</sup></p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>0001</td><td>00</td><td>1101</td><td>x</td></tr><tr><td>00</td><td>0011</td><td>11</td><td>1010</td><td>y</td></tr></tbody></table><p>小阶看齐大阶，所以x=0.001101×2<sup>11</sup>，此时尾数数值位需要舍去两位</p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>0011</td><td>00</td><td>0011(01)</td><td>x</td></tr></tbody></table><h4 id="尾数求和"><a href="#尾数求和" class="headerlink" title="尾数求和"></a>尾数求和</h4><ul><li><p>使用补码进行运算</p></li><li><p>减法运算转化为加法运算：A-B=A+(-B)</p></li></ul><p>x=0.001101×2<sup>11</sup></p><p>y=(-0.1010)×2<sup>11</sup></p><p>x[原]=00.0011    x[补]=00.0011</p><p>y[原]=11.1010    y[补]=11.0110</p><p>S=(x+y)[补]=11.1001</p><p>此时</p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>0011</td><td>11</td><td>1001</td><td>x+y</td></tr></tbody></table><h4 id="尾数规格化"><a href="#尾数规格化" class="headerlink" title="尾数规格化"></a>尾数规格化</h4><p>对补码进行规格化需要判断两种情况：S&gt;0和S&lt;0</p><p>S[补]=00.1xxxxxx(S&gt;0)</p><p>S[补]=11.0xxxxxx(S&lt;0)</p><p>如果不满足以上格式（符号位与最高位不一致的格式），需要进行左移操作，同时阶码相应变化，以满足规格化</p><p>刚才的例子中S=(x+y)[补]=11.1001 不满足格式，需要左移操作（舍去最高位1，末位加0）</p><p>同时阶码数值位减1</p><p>即S=(x+y)[补]=11.0010</p><p>（x+y）[原]=-0.1110</p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>0010</td><td>11</td><td>0010</td><td>S</td></tr></tbody></table><p>x+y=-0.1110×2<sup>10</sup></p><h4 id="尾数规格化（右移）"><a href="#尾数规格化（右移）" class="headerlink" title="尾数规格化（右移）"></a>尾数规格化（右移）</h4><ul><li>一般情况下都是左移</li><li>尾数双符号位不一致下需要右移（定点运算的溢出情况）</li><li>右移的话则需要进行<strong>舍入</strong>操作</li></ul><h4 id="舍入"><a href="#舍入" class="headerlink" title="舍入"></a>舍入</h4><p>‘0舍1入’法（相当于二进制的四舍五入）</p><p>S[补]=10.10110111</p><p>此时双符号位不一致，需要右移，</p><p>S[补]=11.01011011(1)</p><p>末位舍去1，“0舍1入”整体还要再加1。同时阶码需要加1哦</p><p>S[补]=11.01011100</p><p><strong>该方法可以大大挺高精度，但是可能会溢出</strong></p><h4 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h4><ul><li><p>定点运算双符号位不一致位溢出</p></li><li><p>浮点运算尾数双符号位不一致不算溢出，因为尾数双符号位可以进行右规</p></li><li><p>浮点运算主要通过阶码的双符号位判断是否溢出。如果规格化后，阶码双符号位不一致，则认为是溢出</p></li></ul><p><img src="%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/image-2020.png" alt="image-20200404223253625"></p><p>例子：x=0.11010011×2<sup>1101</sup>, y=0.11101110×2<sup>1100</sup>, 假设阶码4位，尾数8位，计算x+y</p><p>结果为：</p><table><thead><tr><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位</th><th></th></tr></thead><tbody><tr><td>00</td><td>1110</td><td>00</td><td>10100101</td><td>x+y</td></tr></tbody></table><h3 id="浮点数的乘除法运算"><a href="#浮点数的乘除法运算" class="headerlink" title="浮点数的乘除法运算"></a>浮点数的乘除法运算</h3><p>乘法：阶码相加，尾数求积</p><p>x=S<sub>x</sub>×r<sup>jx</sup>    y=S<sub>y</sub>×r<sup>jy</sup></p><p>x×y=(S<sub>x</sub>×S<sub>y</sub>)×r<sup>(jx+jy)</sup></p><p>除法：阶码相减，尾数求商</p><p>x/y=(S<sub>x</sub>/S<sub>y</sub>)×r<sup>(jx-jy)</sup></p><p>步骤：阶码运算——尾数运算——尾数规格化——舍入——溢出判断</p><h2 id="原理实践"><a href="#原理实践" class="headerlink" title="原理实践"></a>原理实践</h2><p>实现双向链表→实现置换算法（先进先出算法、最近最少使用算法、最不经常使用算法）</p><p><strong>先进先出算法（FIFO）</strong>：把高速缓存看作是一个先进先出的队列，优先替换最先进入队列的字块</p><p><strong>最不经常使用算法（LFU）</strong>：优先淘汰最不经常使用的字块，需要额外的空间记录字块的使用频率</p><p><strong>最近最少使用算法（LRU）</strong>：优先淘汰一段时间内没有使用的字块。有多种实现方法，一般使用双向链表，把当前访问节点置于链表前面（保证链表头部节点是最近使用的）</p><h3 id="双向链表的原理与实践"><a href="#双向链表的原理与实践" class="headerlink" title="双向链表的原理与实践"></a>双向链表的原理与实践</h3><p><strong>单向链表</strong>：节点1→节点2→节点3→节点4→节点5</p><p>每一个节点都有下一个节点的地址或引用</p><p><strong>双向链表</strong>：节点1&lt;=&gt;节点2&lt;=&gt;节点3&lt;=&gt;节点4&lt;=&gt;节点5</p><p>每一个节点都有上一个节点和下一个节点的地址或引用</p><ul><li>可以快速找到一个节点的下一个节点</li><li>可以快速找到一个节点的上一个节点</li><li>可以快速去掉链表中的某一个节点</li></ul><ol><li><p>实现链表节点，存放Key-Value数据</p></li><li><p>实现双向链表（往头部增加节点、往尾部增加节点、删除任意节点、增加任意节点、弹出头部节点、弹出尾部节点）</p><p>增加任意节点就是往头部或尾部增加，不做重复演示</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! -*- encoding=utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;实现链表节点&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.value = value</span><br><span class="line">        <span class="comment"># 上下节点的引用</span></span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        val = <span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.key, self.value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        val = <span class="string">&#x27;&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.key, self.value)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="comment">#实现双向链表需要头部指针：head尾部指针：tail分别指向链表的头部和尾部</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;实现双向链表&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, capacity=<span class="number">0xffff</span></span>):</span></span><br><span class="line">        <span class="comment"># 0xffff是int的最大值</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.head = <span class="literal">None</span></span><br><span class="line">        self.tail = <span class="literal">None</span></span><br><span class="line">        <span class="comment"># 当前列表存储的节点</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 往头部添加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add_head</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="comment"># 判断当前列表头部是否为空（没有节点）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            self.head = node</span><br><span class="line">            self.tail = node</span><br><span class="line">            self.head.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">            self.head.prev = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.<span class="built_in">next</span> = self.head</span><br><span class="line">            self.head.prev = node</span><br><span class="line">            self.head = node</span><br><span class="line">            self.head.prev = <span class="literal">None</span></span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 往尾部增加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add_tail</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="comment"># 判断当前列表尾部是否为空</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tail:</span><br><span class="line">            self.head = node</span><br><span class="line">            self.tail = node</span><br><span class="line">            self.head.prev = <span class="literal">None</span></span><br><span class="line">            self.tail.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail.<span class="built_in">next</span> = node</span><br><span class="line">            node.prev = self.tail</span><br><span class="line">            self.tail = node</span><br><span class="line">            self.tail.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从尾部删除</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del_tail</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.tail:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = self.tail</span><br><span class="line">        <span class="keyword">if</span> node.prev:</span><br><span class="line">            self.tail = node.prev</span><br><span class="line">            self.tail.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail = self.head = <span class="literal">None</span></span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从头部删除</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del_head</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">if</span> node.<span class="built_in">next</span>:</span><br><span class="line">            self.head = node.<span class="built_in">next</span></span><br><span class="line">            self.head.prev = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.head = self.tail = <span class="literal">None</span></span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除任意节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__remove</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="comment"># 如果node=None 默认删除尾部节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            node = self.tail</span><br><span class="line">        <span class="keyword">if</span> node == self.tail:</span><br><span class="line">            self.__del_tail()</span><br><span class="line">        <span class="keyword">elif</span> node == self.head:</span><br><span class="line">            self.__del_head()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.prev.<span class="built_in">next</span> = node.<span class="built_in">next</span></span><br><span class="line">            node.<span class="built_in">next</span>.prev = node.prev</span><br><span class="line">            self.size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义公有api供外部使用&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 弹出头部节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__del_head()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加节点(从尾部）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__add_tail(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 往头部添加节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_front</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__add_head(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span>(<span class="params">self, node=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.__remove(node)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印链表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span>(<span class="params">self</span>):</span></span><br><span class="line">        p = self.head</span><br><span class="line">        line = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            line += <span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(p)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                line += <span class="string">&#x27;=&gt;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>接下来模拟双向链表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    l = DoubleLinkedList(<span class="number">10</span>)</span><br><span class="line">    nodes = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        node = Node(i, i)</span><br><span class="line">        nodes.append(node)</span><br><span class="line">    l.append(nodes[<span class="number">0</span>])</span><br><span class="line">    l.<span class="built_in">print</span>()</span><br><span class="line">    l.append(nodes[<span class="number">1</span>])</span><br><span class="line">    l.<span class="built_in">print</span>()</span><br><span class="line">    l.pop()</span><br><span class="line">    l.<span class="built_in">print</span>()</span><br><span class="line">    l.append(nodes[<span class="number">2</span>])</span><br><span class="line">    l.<span class="built_in">print</span>()</span><br><span class="line">    l.append_front(nodes[<span class="number">3</span>])</span><br><span class="line">    l.<span class="built_in">print</span>()</span><br><span class="line">    l.append(nodes[<span class="number">4</span>])</span><br><span class="line">    l.<span class="built_in">print</span>()</span><br><span class="line">    l.remove(nodes[<span class="number">2</span>])</span><br><span class="line">    l.<span class="built_in">print</span>()</span><br><span class="line">    l.remove()</span><br><span class="line">    l.<span class="built_in">print</span>() </span><br></pre></td></tr></table></figure><p>可以把每个功能都自己尝试下！</p><h3 id="实践FIFO缓存置换算法"><a href="#实践FIFO缓存置换算法" class="headerlink" title="实践FIFO缓存置换算法"></a>实践FIFO缓存置换算法</h3><p>FIFO先进先出算法的实现。淘汰缓存时，把先进入列表的淘汰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> computer_principle.DoubleLinkedList <span class="keyword">import</span> DoubleLinkedList, Node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FIFOcache</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, capacity</span>):</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">map</span> = &#123;&#125;</span><br><span class="line">        self.<span class="built_in">list</span> = DoubleLinkedList(self.capacity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="comment"># 定义get方法查看node是否存在</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.<span class="built_in">map</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = self.<span class="built_in">map</span>.get(key)</span><br><span class="line">            <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="comment"># 添加node</span></span><br><span class="line">        <span class="keyword">if</span> self.capacity == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">map</span>:</span><br><span class="line">            node = self.<span class="built_in">map</span>.get(key)</span><br><span class="line">            self.<span class="built_in">list</span>.remove(node)</span><br><span class="line">            node.value = value</span><br><span class="line">            self.<span class="built_in">list</span>.append(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.size == self.capacity:</span><br><span class="line">                node = self.<span class="built_in">list</span>.pop()</span><br><span class="line">                <span class="keyword">del</span> self.<span class="built_in">map</span>[node.key]</span><br><span class="line">                self.size -= <span class="number">1</span></span><br><span class="line">            node = Node(key, value)</span><br><span class="line">            self.<span class="built_in">list</span>.append(node)</span><br><span class="line">            self.<span class="built_in">map</span>[key] = node</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.<span class="built_in">list</span>.<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cache = FIFOcache(<span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(cache.get(<span class="number">1</span>))</span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br><span class="line">    <span class="built_in">print</span>(cache.get(<span class="number">1</span>))</span><br><span class="line">    cache.put(<span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="实践LRU缓存置换算法"><a href="#实践LRU缓存置换算法" class="headerlink" title="实践LRU缓存置换算法"></a>实践LRU缓存置换算法</h3><p>最近最少使用算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> computer_principle.DoubleLinkedList <span class="keyword">import</span> Node, DoubleLinkedList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUcache</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, capacity</span>):</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.<span class="built_in">map</span> = &#123;&#125;</span><br><span class="line">        self.<span class="built_in">list</span> = DoubleLinkedList(self.capacity)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="comment"># 添加节点，若存在就将它提到最前面</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">map</span>:</span><br><span class="line">            node = self.<span class="built_in">map</span>[key]</span><br><span class="line">            self.<span class="built_in">list</span>.remove(node)</span><br><span class="line">            node.value = value</span><br><span class="line">            self.<span class="built_in">list</span>.append_front(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = Node(key, value)</span><br><span class="line">            <span class="keyword">if</span> self.<span class="built_in">list</span>.size &gt;= self.<span class="built_in">list</span>.capacity:</span><br><span class="line">                <span class="comment"># 链表满了，剔除最后一个再添加</span></span><br><span class="line">                self.<span class="built_in">list</span>.remove()</span><br><span class="line">                self.<span class="built_in">list</span>.append_front(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.<span class="built_in">list</span>.append_front(node)</span><br><span class="line">                self.<span class="built_in">map</span>[key]=node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.<span class="built_in">list</span>.<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cache=LRUcache(<span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    cache.put(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">    cache.put(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br><span class="line">    cache.put(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br><span class="line">    cache.put(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br><span class="line">    cache.put(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="实践LFU缓存置换算法"><a href="#实践LFU缓存置换算法" class="headerlink" title="实践LFU缓存置换算法"></a>实践LFU缓存置换算法</h3><p>最不经常使用算法，同使用频率节点按FIFO算法淘汰。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> computer_principle.DoubleLinkedList <span class="keyword">import</span> DoubleLinkedList, Node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUNode</span>(<span class="params">Node</span>):</span></span><br><span class="line"><span class="comment"># 定义LFU的节点，需要多一个频率属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self.freq = <span class="number">0</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUcache</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, capacity</span>):</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.<span class="built_in">map</span> = &#123;&#125;</span><br><span class="line">        <span class="comment"># key：频率，value：频率对应的双向链表</span></span><br><span class="line">        self.freq_map = &#123;&#125;</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新节点频率的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__update_freq</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        freq = node.freq</span><br><span class="line">        <span class="comment"># 将node从原有频率图中剔除</span></span><br><span class="line">        node = self.freq_map[freq].remove(node)</span><br><span class="line">        <span class="keyword">if</span> self.freq_map[freq].size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">del</span> self.freq_map[freq]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新</span></span><br><span class="line">        freq += <span class="number">1</span></span><br><span class="line">        node.freq = freq</span><br><span class="line">        <span class="keyword">if</span> freq <span class="keyword">not</span> <span class="keyword">in</span> self.freq_map:</span><br><span class="line">            self.freq_map[freq] = DoubleLinkedList()</span><br><span class="line">        self.freq_map[freq].append(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.<span class="built_in">map</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        node = self.<span class="built_in">map</span>.get(key)</span><br><span class="line">        self.__update_freq(node)</span><br><span class="line">        <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.capacity == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 缓存命中 增加频率</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.<span class="built_in">map</span>:</span><br><span class="line">            node = self.<span class="built_in">map</span>.get(key)</span><br><span class="line">            node.value = value</span><br><span class="line">            self.__update_freq(node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 缓存没有命中 剔除最小频率节点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.capacity == self.size:</span><br><span class="line">                min_freq = <span class="built_in">min</span>(self.freq_map)</span><br><span class="line">                node = self.freq_map[min_freq].pop()</span><br><span class="line">                <span class="keyword">del</span> self.<span class="built_in">map</span>[node.key]</span><br><span class="line">                self.size -= <span class="number">1</span></span><br><span class="line">            node = LFUNode(key, value)</span><br><span class="line">            node.freq = <span class="number">1</span></span><br><span class="line">            self.<span class="built_in">map</span>[key] = node</span><br><span class="line">            <span class="keyword">if</span> node.freq <span class="keyword">not</span> <span class="keyword">in</span> self.freq_map:</span><br><span class="line">                self.freq_map[node.freq] = DoubleLinkedList()</span><br><span class="line">            node = self.freq_map[node.freq].append(node)</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.freq_map.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;freq:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(k))</span><br><span class="line">            self.freq_map[k].<span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;*********************\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cache = LFUcache(<span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">    cache.<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavasCript入门学习</title>
      <link href="/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/12/javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="javascript概述"><a href="#javascript概述" class="headerlink" title="javascript概述"></a>javascript概述</h2><blockquote><p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名的，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。</p></blockquote><p><em>放在head中的JS代码会在页面加载完成之前就读取，而放在body中的JS代码，会在整个页面加载完成之后读取。<br>这就说明了，如果我们想定义一个全局对象，而这个对象是页面中的某个按钮时，我们必须将其放入body中，道理很明显：如果放入head，那当你定义的时候，那个按钮都没有被加载，可能获得的是一个undefind。</em></p><p>javascript外部引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>javascript在html内部使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ***；</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>js变量</strong>与其他程序设计语言相同，是用来临时存储信息</p><p>创建的时候不区分数据类型，但是在赋值的时候区分数据类型，是<strong>弱数据类型语言</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">1</span>；</span><br><span class="line"><span class="keyword">var</span> x=<span class="number">2</span>,name=<span class="string">&quot;zhangsan&quot;</span>；</span><br><span class="line">第二种方法：</span><br><span class="line"><span class="keyword">var</span> x；</span><br><span class="line">x=<span class="number">1</span>；</span><br></pre></td></tr></table></figure><p><strong>js调试</strong><code>alert(flag)</code>弹框调试，<code>console.log(flag)</code>控制台输出调试。用于观察变量值的变化规律，是否符合程序设计的目的。</p><h2 id="自定义函数与数据类型"><a href="#自定义函数与数据类型" class="headerlink" title="自定义函数与数据类型"></a>自定义函数与数据类型</h2><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p><strong>自定义函数</strong>自定义函数是完成某一功能的代码段，可重复执行，方便管理和维护。</p><p>创建方法一：函数声明，可以先使用后定义(但是一般都遵循先定义后使用原则)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">代码片段</span><br><span class="line"><span class="keyword">return</span>***;</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure><p>创建方法二：这种叫做函数表达式，必须先定义后使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun1=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型及类型转换"><a href="#数据类型及类型转换" class="headerlink" title="数据类型及类型转换"></a>数据类型及类型转换</h3><p><img src="javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200312220242268.png" alt="image-20200312220242268"></p><p><img src="javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200312220446200.png" alt="image-20200312220446200"></p><p>类型转换的函数：parseInt()、parseFloat() 、Number() 、Boolean()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str+<span class="number">1</span>); <span class="comment">//输出1231</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)+<span class="number">1</span>); <span class="comment">//输出124</span></span><br></pre></td></tr></table></figure><p>说明转换为int型起了作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str*<span class="number">1</span>+<span class="number">1</span>); <span class="comment">//输出124</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)+<span class="number">1</span>); <span class="comment">//输出124</span></span><br></pre></td></tr></table></figure><p><code>str*1</code>完成了字符串的<strong>隐式类型转换</strong>，第三行则是<strong>强制类型转换</strong></p><p> 若要字符转为数值，需要用<code>isNaN()</code>先进行判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(str1))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时isNaN()返回的是false，最后转换成了Int类型，!是对结果进行取反</span></span><br></pre></td></tr></table></figure><p>对比parseInt()、parseFloat() 、Number()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;123a1&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str)); <span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;a123&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str)); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); <span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;1.1&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(str)); <span class="comment">//1.1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(str)); <span class="comment">//1.1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(str)); <span class="comment">//若是字符类型，则空字符或者null都是返回false</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="number">0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(str)); <span class="comment">//返货false，非零返回true</span></span><br></pre></td></tr></table></figure><h2 id="变量与运算符"><a href="#变量与运算符" class="headerlink" title="变量与运算符"></a>变量与运算符</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>全局变量、局部变量<br>局部变量：在函数内部创建的变量，称为局部变量，其他函数不能使用。<br>全局变量：在函数外部创建的变量，称为全局变量，在函数之间可以共享使用。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><strong>比较运算符</strong>：用于比较两个值。结果是true或者false<br>运算符范围：&gt;、&gt;=、!=、&lt;、&lt;=<br><strong>逻辑运算符</strong>：包含逻辑与、或、非等，其结果为true或false<br>格式：&amp;&amp; and    || or    ! 非<br><strong>三目运算符(三元运算符）</strong>：根据不同的条件，执行不同的操作/返回不同的值<br>格式：条件？ 值1：值2<br>条件成立返回值1，条件不成立返回值2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> flag=x&gt;<span class="number">10</span>?<span class="string">&#x27;大于&#x27;</span>:<span class="string">&#x27;小于&#x27;</span>;<span class="comment">//先运行三目运算符，然后赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(str); <span class="comment">//此时返回‘小于’</span></span><br></pre></td></tr></table></figure><p><strong>运算符优先级</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> flag=x&lt;<span class="number">10</span>; <span class="comment">//比较运算符优先级高于赋值，所以flag=True</span></span><br><span class="line"><span class="built_in">console</span>.log(flag);</span><br></pre></td></tr></table></figure><p><img src="javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200313105419392.png" alt="image-20200313105419392"></p><p>优先级从高到低，当不清楚运算顺序的时候，建议添加小括号。</p><h2 id="程序控制语句"><a href="#程序控制语句" class="headerlink" title="程序控制语句"></a>程序控制语句</h2><h3 id="条件控制语句"><a href="#条件控制语句" class="headerlink" title="条件控制语句"></a>条件控制语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    ***; <span class="comment">//满足条件1执行</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">***; <span class="comment">//满足条件2执行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ***; <span class="comment">//不满足以上条件执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多条件控制语句"><a href="#多条件控制语句" class="headerlink" title="多条件控制语句"></a>多条件控制语句</h3><p>switch 中用于case判断，但是不能带运算符，默认==。<br>除此以外的case用default。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*根据成绩输出相应评级*/</span></span><br><span class="line"><span class="keyword">var</span> score=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> dgree=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> sco=<span class="built_in">parseInt</span>(score/<span class="number">10</span>);</span><br><span class="line"><span class="keyword">switch</span>(sco)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        degree=<span class="string">&#x27;满分&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//必须添加break停止运行，否则会运行到下一个break为止</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        degree=<span class="string">&#x27;优秀&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        degree=<span class="string">&#x27;良好&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        degree=<span class="string">&#x27;不及格&#x27;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(degree);</span><br></pre></td></tr></table></figure><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><p>分为for循环、while循环、do-while循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*for循环计算100以内奇数相加*/</span></span><br><span class="line"><span class="comment">/*for循环*/</span></span><br><span class="line"><span class="comment">/*第一行可以直接声明i=0，for(;i&lt;=100;i++)&#123;&#125;*/</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">/*while循环*/</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">/*do while循环*/</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sum+=i;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;123321&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">//123，第一个参数表示起始位置，第二个表示截取长度</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">//123，第一个参数表示起始位置，第二个表示结束位置（前闭后开）</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(-<span class="number">1</span>,<span class="number">3</span>)); <span class="comment">//123，当第一个参数为负数，为认为是0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">2</span>)); <span class="comment">//3,参数表示位置，第3个位置的字符</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">//6，str长度，注意后面没有小括号</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="number">1</span>,<span class="number">4</span>))； <span class="comment">//5，从第5个位置开始找‘1’这个字符第一次出现的位置。第二参数可不填，默认为0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;gg,jj,ww,rice,and,bran&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">&#x27;,&#x27;</span>); <span class="comment">//按逗号分隔为数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">//输出数组中第一个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.concat(<span class="string">&#x27;site&#x27;</span>,<span class="string">&#x27;blog&#x27;</span>)); <span class="comment">//在数组中添加这两个元素</span></span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">&#x27;site&#x27;</span>,<span class="string">&#x27;blog&#x27;</span>)); <span class="comment">//直接在字符后面接上siteblog，无分隔！</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">&#x27;gg&#x27;</span>,<span class="string">&#x27;99&#x27;</span>)); <span class="comment">//只替换第一个gg为99</span></span><br></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d1=<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//获取当前时间日期</span></span><br><span class="line"><span class="keyword">var</span> d2=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2021-6-3 0:59:36&#x27;</span>); <span class="comment">//指定日期时间</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getDate()); <span class="comment">//获取当前日</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getMonth()+<span class="number">1</span>); <span class="comment">//获取当前月份，js月份从0开始，0-11</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getFullYear()); <span class="comment">//获取当前年份</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getHours()); <span class="comment">//获取当前小时</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getMinutes()); <span class="comment">//获取当前分钟</span></span><br><span class="line"><span class="built_in">console</span>.log(d1.getSeconds()); <span class="comment">//获取当前秒数</span></span><br><span class="line"><span class="keyword">var</span> n=d2.getTime()-d1.getTime(); <span class="comment">//getTime()转化为毫秒数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(n/(<span class="number">24</span>*<span class="number">3600</span>*<span class="number">1000</span>))); <span class="comment">//计算相差的天数</span></span><br></pre></td></tr></table></figure><p>日期格式化yy-mm-dd hh:mm:ss，将当前日期格式化输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_FmtDate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> y,m,dd,h,m,s;</span><br><span class="line">y=d.getFullYear();</span><br><span class="line">m=d.getMonth()+<span class="number">1</span>;</span><br><span class="line">dd=d.getDate();</span><br><span class="line">h=d.getHours();</span><br><span class="line">m=d.getMinutes();</span><br><span class="line">s=d.getSeconds();</span><br><span class="line">FmtDate = y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+dd+<span class="string">&quot; &quot;</span>+h+<span class="string">&#x27;:&#x27;</span>+m+<span class="string">&#x27;:&#x27;</span>+s;</span><br><span class="line"><span class="keyword">return</span> FmtDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fun_FmtDate());</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p>Math.sqrt()、Math.random()…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=-<span class="number">3.141592653</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(n)); <span class="comment">//四舍五入取整</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toFixed(<span class="number">2</span>)); <span class="comment">//保留两位小数,四舍五入</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min(<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>)); <span class="comment">//取最小值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>)); <span class="comment">//取最大值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(n)); <span class="comment">//取绝对值</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组对象的作用是：使用单独的变量名来存储一系列的值。</p><p>数组创建的几种方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 申明或创建一个不指定长度的数组，又称实例化创建：</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="comment">// 申明或创建一个数组并指定长度：</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 申明或创建一个带有默认值的数组：</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//创建一个数组并赋值的简写：</span></span><br><span class="line"><span class="keyword">var</span> arrayObj=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 数组赋值、字符下标、数组遍历</span></span><br><span class="line"><span class="built_in">console</span>.log(arrayObj[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arrayObj)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arrayObj[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表单元素设置"><a href="#表单元素设置" class="headerlink" title="表单元素设置"></a>表单元素设置</h2><p><strong>表单</strong> 表单的主要作用是在客户端接收用户的信息，然后将数据递交给后台的程序来操控这些数据。jS就是用来设置或获取各种表单元素的值</p><p><code>document.getElementById()</code>获取元素，<code>onclick()</code>点击事件，<code>onload()</code>加载事件</p><p><code>document.getElementsById()</code>获取多个元素(数组)</p><blockquote><p>onload 事件会在页面或图像加载完成后立即发生。</p><p>onload 通常用于 <body> 元素，在页面完全载入后(包括图片、css文件等等)执行脚本代码</p></blockquote><p>实现页面中出现表单，刷新后表单中默认值改变，点击后表单默认值改变，并弹出页面提示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;alter()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&#x27;text/javascript&#x27;</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onload</span>=<span class="string">&quot;alter()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;userName&#x27;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ganjiawei&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;btn&#x27;</span> <span class="attr">onclick</span>=<span class="string">&quot;show()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;btn&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// document.getElementById()——静态方法获取元素，获取之后通过.value修改value值</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;userName&#x27;</span>).value=<span class="string">&#x27;your name&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;hhhh&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;userName&#x27;</span>).value=<span class="string">&#x27;ganjiawei&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 实现<strong>单选框radio</strong>，并alert返回其值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    // radio是表单圆形选择框，check=&#x27;checked&#x27;表示默认选择，name属性设置成同名则可以实现仅单选</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;sex&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">check</span>=<span class="string">&#x27;checked&#x27;</span>/&gt;</span>male</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;radio&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;sex&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;0&#x27;</span>/&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;btn&#x27;</span> <span class="attr">onclick</span>=<span class="string">&#x27;show_sex()&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;btn&#x27;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_sex</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sex=<span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;sex&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(sex[<span class="number">0</span>].checked)&#123;</span><br><span class="line">        <span class="comment">//checked 返回布尔值，选中则是true</span></span><br><span class="line">        alert(<span class="string">&#x27;male&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;female&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>列表选择框form</strong></p><p>实现年月日选择框，并实现多级联动（方法一：重新给天数赋值）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onload</span>=<span class="string">&#x27;date_select()&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&#x27;y&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;y&#x27;</span> <span class="attr">onchange</span>=<span class="string">&#x27;date_change()&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>年</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&#x27;m&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;m&#x27;</span> <span class="attr">onchange</span>=<span class="string">&#x27;date_chage()&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>月</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&#x27;d&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;d&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span>日</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">date_select</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取id为y,m,d的控件</span></span><br><span class="line">    <span class="keyword">var</span> y=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> m=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> year=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> now_year=<span class="built_in">parseInt</span>(year.getFullYear());</span><br><span class="line">    for_d(y,<span class="number">1996</span>,now_year);</span><br><span class="line">    for_d(m,<span class="number">1</span>,<span class="number">12</span>);</span><br><span class="line">    for_d(d,<span class="number">1</span>,<span class="number">31</span>);</span><br><span class="line">    <span class="comment">// 获取列表框的长度</span></span><br><span class="line">    <span class="keyword">var</span> n=y.length;</span><br><span class="line">    <span class="comment">// 使年份的默认选项在中间年份</span></span><br><span class="line">    y.selectedIndex=<span class="built_in">Math</span>.round(n/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义循环函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">for_d</span>(<span class="params">obj,start,end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=start;i&lt;=end;i++)&#123;</span><br><span class="line">        <span class="comment">// option 集合可返回包含 &lt;select&gt; 元素中所有 &lt;option&gt; 的一个数组。</span></span><br><span class="line">        <span class="comment">// 具体用法文章后面DOM章节会涉及到</span></span><br><span class="line">        obj.options.add(<span class="keyword">new</span> Option(i,i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义年月日三级联动的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">date_change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> m=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> d_end;</span><br><span class="line">    <span class="keyword">var</span> m_value=<span class="built_in">parseInt</span>(m.value);</span><br><span class="line">    <span class="keyword">var</span> y_value=<span class="built_in">parseInt</span>(y.value);</span><br><span class="line">    <span class="keyword">if</span> (m_value==<span class="number">4</span> || m_value==<span class="number">6</span> || m_value==<span class="number">9</span> || m_value==<span class="number">11</span>)&#123;</span><br><span class="line">        d_end=<span class="number">30</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m_value==<span class="number">2</span>)&#123;</span><br><span class="line">        d_end=<span class="number">28</span>;</span><br><span class="line">        <span class="keyword">if</span>((y_value%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y_value%<span class="number">100</span>!=<span class="number">0</span>) || y_value%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            d_end=<span class="number">29</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        d_end=<span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d.options.length=<span class="number">0</span>; <span class="comment">//将天数清零，重新赋值</span></span><br><span class="line">    for_d(d,<span class="number">1</span>,d_end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：移除多余天数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义年月日三级联动的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">date_change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> m=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> d=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> m_value=<span class="built_in">parseInt</span>(m.value);</span><br><span class="line">    <span class="keyword">var</span> y_value=<span class="built_in">parseInt</span>(y.value);</span><br><span class="line">    for_d(d,<span class="number">1</span>,<span class="number">31</span>);</span><br><span class="line">    <span class="keyword">if</span> (m_value==<span class="number">4</span> || m_value==<span class="number">6</span> || m_value==<span class="number">9</span> || m_value==<span class="number">11</span>)&#123;</span><br><span class="line">        d.options.remove(d.length-<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m_value==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            d.options.remove(d.length-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((y_value%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; y_value%<span class="number">100</span>!=<span class="number">0</span>) || y_value%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">                d.options.remove(d.length-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复选框checkbox</strong></p><p>实现全选、全不选以及反选效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CheckBox<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;CheckBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>swim<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;CheckBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>jog<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;CheckBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>hike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;CheckBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>ride<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;all&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;CheckInt1()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oppsite&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;CheckInt2()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag=<span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 实现全选与全不选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckInt1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> interests=<span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;interest&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;interests.length;i++)&#123;</span><br><span class="line">        interests[i].checked=flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="comment">// 注意这个地方获取的是单个控件element不加s</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>).value=<span class="string">&#x27;none&#x27;</span>;    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>).value=<span class="string">&#x27;all&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flag=!flag; <span class="comment">// 开关变量来控制CheckBox的选中状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现反选</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckInt2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> interests=<span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;interest&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=interests.length;i++)&#123;</span><br><span class="line">        interests[i].checked=!interests[i].checked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM与事件总结"><a href="#DOM与事件总结" class="headerlink" title="DOM与事件总结"></a>DOM与事件总结</h2><p><strong>事件</strong>是指被程序发现的行为或发生的事情，而且它可能会被程序处理</p><p>特点：js事件都是以on开头，onclick、onchange、onload…</p><p>分类：键盘事件、鼠标事件、表单事件</p><p><img src="javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200319181000800.png" alt="image-20200319181000800"></p><p><strong>DOM(Document Object Model)</strong> 文档对象模型，将文档（页面）表现为结构化的表达方法，使得每一个页面元素都是可操控，DOM将网页和脚本以及其他的编程语言联系了起来。</p><p>特点：利用js控制页面中的所有元素，是页面更加“聪明”</p><p>分类：元素节点、属性节点、文本节点</p><p><img src="javascript%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20200319181351074.png" alt="image-20200319181351074"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将hexo部署到github</title>
      <link href="/2020/03/09/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
      <url>/2020/03/09/%E5%B0%86hexo%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<h3 id="在github中添加ssh-keys（非必要步骤）"><a href="#在github中添加ssh-keys（非必要步骤）" class="headerlink" title="在github中添加ssh keys（非必要步骤）"></a>在github中添加ssh keys（非必要步骤）</h3><p><strong>获取本地公钥</strong></p><p>命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;githu注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>输入指令后会要求你提供一个位置和文件名去存放键值对和密码，可以Enter键去使用默认值</p><p><strong>添加在github</strong></p><p>打开user/用户名/.ssh/id_rsa.pub文件，将ssh keys复制到github/setting/SSH keys中保存。本地命令行输入代码测试是否成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h3><p>github首页新建仓库New repository，Repository name设置为用户名.github.io</p><p>打开博客根目录下_config.yml文件</p><p><strong>修改deploy：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: https://github.com/flying-rat/flying-rat.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>安装git部署插件</strong></p><p>命令行切换到博客根目录，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p><strong>给git配置身份</strong></p><p>打开git bash依次执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;flying-rat&#x27;</span><br><span class="line">git config --global user.email &#x27;jwei.gan@qq.com&#x27;</span><br></pre></td></tr></table></figure><p><strong>部署</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp; hexo d</span><br></pre></td></tr></table></figure><p><a href="https://flying-rat.github.io/">https://flying-rat.github.io</a></p><p>大功告成！！！</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将hexo博客搭建到云服务器上(通过Nginx)</title>
      <link href="/2020/03/08/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>/2020/03/08/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="本地电脑ssh连接远程服务器-免密访问"><a href="#本地电脑ssh连接远程服务器-免密访问" class="headerlink" title="本地电脑ssh连接远程服务器(免密访问)"></a>本地电脑ssh连接远程服务器(免密访问)</h2><p>win10 centos7.3</p><h3 id="免密访问服务器"><a href="#免密访问服务器" class="headerlink" title="免密访问服务器"></a>免密访问服务器</h3><p><strong>在本地修改~/.ssh/config文件内容</strong></p><p>看看是否存在config文件，没有的话在.ssh文件中创建一个config文件，然后修改/添加内容（host名字取为aliyun）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host aliyun</span><br><span class="line">HostName 公网ip</span><br><span class="line">User root</span><br></pre></td></tr></table></figure><p><strong>获取本地公钥</strong></p><p>命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;githu注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>输入指令后会要求你提供一个位置和文件名去存放键值对和密码，可以Enter键去使用默认值</p><p><em>同时可以将ssh keys复制到github中，用以下代码测试是否成功</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><strong>从本地拷贝ssh公钥到服务器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp C:\Users\gan\.ssh\id_rsa.pub root@aliyun:~</span><br></pre></td></tr></table></figure><p>然后ssh登录到服务器，输入，查看是否存在authorized_keys</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后再直接输入<code>:wq</code>保存文件并退出</p><p>继续输入以下代码，将公钥复制到authoried_keys中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>此时就可以通过<code>ssh root@aliyun</code>免密访问服务器</p><p>顺便可以修改一下<strong>链接超时的时间限制</strong>，防止连接超时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure><p>输入<code>/Port</code>确认默认端口是否为22</p><p>输入<code>/ClientAlive</code>修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClientAliveInterval 30</span><br><span class="line">ClientAliveCountMax 3</span><br></pre></td></tr></table></figure><p><code>:wq</code>保存文件并退出</p><p>重启sshd服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><h3 id="关闭服务器的密码登录"><a href="#关闭服务器的密码登录" class="headerlink" title="关闭服务器的密码登录"></a>关闭服务器的密码登录</h3><p>重新进入ssh_config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config</span><br></pre></td></tr></table></figure><p>将PasswordAuthentication改为no</p><p>保存退出并重启sshd服务</p><h2 id="服务器搭建远程Git库"><a href="#服务器搭建远程Git库" class="headerlink" title="服务器搭建远程Git库"></a>服务器搭建远程Git库</h2><p>先<code>ssh root@aliyun</code>登录到服务器，<strong>安装git</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version // 如无，则安装</span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><p><strong>创建用户并配置其仓库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br><span class="line">passwd git // 设置密码</span><br><span class="line">su git // 这步很重要，不切换用户后面会很麻烦</span><br><span class="line">cd /home/git/</span><br><span class="line">mkdir -p projects/blog // 项目存在的真实目录</span><br><span class="line">mkdir repos &amp;&amp; cd repos</span><br><span class="line">git init --bare blog.git // 创建一个裸露的仓库</span><br><span class="line">cd blog.git/hooks</span><br><span class="line">vi post-receive // 创建 hook 钩子函数，输入了内容如下</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">git --work-tree=/home/git/projects/blog --git-dir=/home/git/repos/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>输入完毕后<code>:wq</code>退出保存</p><p>然后<strong>修改权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br><span class="line">exit // 退出到 root 登录</span><br><span class="line">chown -R git:git /home/git/repos/blog.git // 添加权限</span><br></pre></td></tr></table></figure><p>切换回来本地测试git仓库是否可用（我命名了阿里云服务器，可以直接ssh@公网ip）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@aliyun:/home/git/repos/blog.git</span><br></pre></td></tr></table></figure><p>如果所在克隆了空文件夹到本地说明git仓库可用</p><p><strong>建立ssh信任关系</strong>，使得git不需要密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i C:/Users/yourname/.ssh/id_rsa.pub git@server_ip //这一行在C:\Program Files\Git\bin\sh.exe命令行中输入</span><br><span class="line">ssh git@server_ip // 测试能否登录</span><br></pre></td></tr></table></figure><p><em>此时不需要密码即可登录成功</em></p><h2 id="搭建Nginx服务器"><a href="#搭建Nginx服务器" class="headerlink" title="搭建Nginx服务器"></a>搭建Nginx服务器</h2><p><strong>下载安装nginx</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br><span class="line">wget http://nginx.org/download/nginx-1.17.9.tar.gz</span><br><span class="line">tar xzvf nginx-1.17.9.tar.gz</span><br><span class="line">cd nginx-1.17.9</span><br><span class="line">./configure // 如果后面还想要配置 SSL 协议，就执行后面一句！</span><br><span class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">alias nginx=&#x27;/usr/local/nginx/sbin/nginx&#x27; // 为 nginx 取别名，后面可直接用</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf</span><br><span class="line">vi nginx.conf</span><br><span class="line">修改 root 解析路径，如下图，否则nginx无法访问 /home/git/project/blog</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><img src="%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/image-20200312182635546.png" alt="image-20200312182635546"></p><h3 id="通过公网ip访问服务器设置"><a href="#通过公网ip访问服务器设置" class="headerlink" title="通过公网ip访问服务器设置"></a>通过公网ip访问服务器设置</h3><p>找到ecs实例—配置规则—添加安全组规则，添加如下内容</p><p><img src="%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/image-20200312175400260.png" alt="image-20200312175400260"></p><h3 id="hexo中修改-config-yml"><a href="#hexo中修改-config-yml" class="headerlink" title="hexo中修改_config.yml"></a>hexo中修改_config.yml</h3><p>博客文件夹打开_config.yml，添加git服务器</p><p><img src="%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/image-20200312181245974.png" alt="image-20200312181245974"></p><p>在package.json中添加npm脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;deploy&quot;</span>: <span class="string">&quot;hexo clean &amp;&amp; hexo g -d&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样在博客文件夹调用<code>npm start</code>就可以本地调试了，<code>npm run deploy</code>就可以部署到服务器了，然后可以通过公网ip访问博客了。</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Nginx </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主量元素处理</title>
      <link href="/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/"/>
      <url>/2020/03/05/%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="岩石地球化学的主要指标"><a href="#岩石地球化学的主要指标" class="headerlink" title="岩石地球化学的主要指标"></a>岩石地球化学的主要指标</h2><h3 id="SiO2饱和度和矿物共生组合"><a href="#SiO2饱和度和矿物共生组合" class="headerlink" title="SiO2饱和度和矿物共生组合"></a>SiO<sub>2</sub>饱和度和矿物共生组合</h3><p>​    SiO<sub>2</sub>过饱和矿物 <strong>石英</strong></p><p>​    SiO<sub>2</sub>不饱和矿物 <strong>镁橄榄石、似长石类（霞石、白榴石等）</strong></p><p>​    SiO<sub>2</sub>饱和矿物 <strong>辉石、角闪石、斜长石、钾长石、云母等</strong></p><p><em><strong>SiO<sub>2</sub>不饱和矿物与SiO<sub>2</sub>反应式</strong></em></p><p>Mg<sub>2</sub>SiO<sub>4</sub>(橄榄石)+SiO<sub>2</sub>(熔体)=2MgSiO<sub>3</sub>(顽火辉石)</p><p>NaAlSiO<sub>4</sub>(霞石)+SiO<sub>2</sub>(熔体)=NaAlSi<sub>3</sub>O<sub>8</sub>(钠长石)</p><p>KAlSiO<sub>4</sub>(钾霞石)+SiO<sub>2</sub>(熔体)=KAlSi<sub>3</sub>O<sub>8</sub>(钾长石)</p><h3 id="里特曼指数σ"><a href="#里特曼指数σ" class="headerlink" title="里特曼指数σ"></a>里特曼指数σ</h3><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305113348788.png" alt="image-20200305113348788"></p><p>σ&lt;3.3 钙碱性岩</p><p>σ=3.3-9 碱性岩</p><p>σ&gt;9 过碱性岩</p><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305114145940.png" alt="image-20200305114145940"></p><h3 id="Al2O3饱和度与矿物组合"><a href="#Al2O3饱和度与矿物组合" class="headerlink" title="Al2O3饱和度与矿物组合"></a>Al<sub>2</sub>O<sub>3</sub>饱和度与矿物组合</h3><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305114601494.png" alt="image-20200305114601494"></p><h2 id="主量元素数据直接用于岩石分类和系列划分"><a href="#主量元素数据直接用于岩石分类和系列划分" class="headerlink" title="主量元素数据直接用于岩石分类和系列划分"></a>主量元素数据直接用于岩石分类和系列划分</h2><h3 id="TAS图解使用方法"><a href="#TAS图解使用方法" class="headerlink" title="TAS图解使用方法"></a>TAS图解使用方法</h3><ol><li><p>适用于新鲜的、无蚀变和未变质的<strong>火山岩</strong>（因为K和Na活泼易于带入带出），低碱高Mg岩石有更详细划分</p></li><li><p>计算投图：主量元素数据中，先剔除H2O，CO2，LOI。再重新计算到100％，之后投图。</p></li><li><p>TAS图中，有些是2个岩石类型，成分一致，但是根据特征矿物细分，例如是粗面岩还是粗面英安岩，需要根据CIPW计算结果，确定Q含量，<br>若Q&lt;20为粗面岩，<br>若Q&gt;20为粗面英安岩 。</p><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305115039745.png" alt="image-20200305115039745"></p></li></ol><h3 id="A-NK—A-CNK图解"><a href="#A-NK—A-CNK图解" class="headerlink" title="A/NK—A/CNK图解"></a>A/NK—A/CNK图解</h3><p>​    根据Al<sub>2</sub>O<sub>3</sub>/CaO+Na<sub>2</sub>O+K<sub>2</sub>O比值判定Al<sub>2</sub>O<sub>3</sub>的饱和度。同时用于判断其形成的大地构造环境</p><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305171414859.png" alt="image-20200305171414859"></p><h2 id="CIPW计算后用于岩石分类和系列划分"><a href="#CIPW计算后用于岩石分类和系列划分" class="headerlink" title="CIPW计算后用于岩石分类和系列划分"></a>CIPW计算后用于岩石分类和系列划分</h2><p><strong>模式矿物含量（Mode）</strong>是观察到的矿物体积百分数</p><p><strong>标准矿物计算（Norm）</strong>是岩石经过计算的理想化的矿物组成，肉眼无法鉴定具体矿物含量，如火山岩类</p><ol><li>岩石的CIPW标准矿物与实际矿物含量是有出入的，</li><li>主要是CIPW计算是以无水岩浆中矿物结晶顺序，按照标准矿物理想分子式进行计算，得到岩石中各种标准矿物的质量分数，</li><li>简化了很多内容，如标准矿物是无水的，因此计算中不考虑含水矿物黑云母、角闪石等。</li></ol><p>CIPW计算中的两个术语：<em>Fo，是橄榄石中Mg-Ol和Fe-Ol的比例，专指橄榄石<br>Mg#，是指全岩的MgO-FeO关系，读作Mg号，或者Mg数</em></p><p>CIPW计算之后可以进行一系列的岩石分类</p><ol><li><p>Ab-An-Or图解用于花岗岩分类</p><p>  用于标准矿物Q&gt;10％的酸性岩分类，为简便方法，可以有效地区分英云闪长岩、更长花岗岩、花岗岩和花岗闪长岩。也可以谨慎地用于变形和变质的花岗质岩石，判断原岩类型。</p></li><li><p>玄武岩Ne-Di-Ol-Hy-Q分类图</p></li><li><p>玄武岩/辉长岩详细分类图</p></li><li><p>基性岩的分类</p></li><li><p>超镁铁岩的分类</p></li></ol><h2 id="主量元素用于判别岩浆作用过程"><a href="#主量元素用于判别岩浆作用过程" class="headerlink" title="主量元素用于判别岩浆作用过程"></a>主量元素用于判别岩浆作用过程</h2><p>​    判别岩浆（地球化学）作用过程，主要是看一系列岩石的主量元素成分的变化趋势</p><h4 id="哈克图解"><a href="#哈克图解" class="headerlink" title="哈克图解"></a>哈克图解</h4><p>​    A Harker，1909年开始使用SiO2作为横坐标(x) / 其他元素作为纵坐标(y)的双变量图，后来称为哈克图解</p><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305174522715.png" alt="image-20200305174522715">    </p><p><strong>哈克图解的做法</strong></p><p>​    以SiO2为横坐标，其他氧化物为纵坐标，投出一组样品的结果，得到不同氧化物对SiO2的散点图。推广：任意两个组分之间的二元投点都可以称为哈克图解。</p><p><strong>意义</strong>：如果一组岩石样品具有成因和演化关系，则全部样品将显示正的或者负的相关关系。</p><p>横坐标表示分异结晶过程，SiO2为横坐标，可以指示从基性到酸性，范围宽，如果主要是基性熔岩，可以用MgO、或者Zr为横坐标</p><p><strong>分离结晶作用</strong>是指岩浆中，某个或者多个矿物持续从岩浆中结晶出去，剩余的岩浆就会发生成分的有规律变化。总体为液相→固相</p><p><strong>同化混染作用的影响</strong>在矿物分离结晶作用发生的同时，还存在围岩或者外来物质的加入和混合，导致主量元素图解不显示明显的连续变化趋势。</p><h4 id="哈克图解中出现转折点的含义："><a href="#哈克图解中出现转折点的含义：" class="headerlink" title="哈克图解中出现转折点的含义："></a>哈克图解中出现转折点的含义：</h4><p>转折点或者曲折趋势，表示结晶作用过程出现一个新的矿物相，或者在部分熔融的过程中消耗了一个矿物相。根据一段线性的斜率的不同，确定某一组分消耗的多少和何种矿物消耗该组分。</p><h5 id="长石类"><a href="#长石类" class="headerlink" title="长石类"></a>长石类</h5><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305212724480.png" alt="image-20200305212724480"></p><p><strong>长石的三个端元和长石分类</strong></p><p>钾长石KAlSi<sub>3</sub>O<sub>8</sub>(Or)，钠长石NaAlSi<sub>3</sub>O<sub>8</sub>(Ab)，钙长石CaAl<sub>2</sub>Si<sub>3</sub>O<sub>8</sub>(An)。</p><p>碱性长石（K-Na长石）亚类，不连续固溶体系列（An 5-10%）</p><p>斜长石（Ca-Na长石）亚类，连续固溶体系列（Or 5-10%）</p><p><strong>碱性长石分类</strong></p><ol><li>富钾长石类：透长石、正长石、微斜长石</li><li>富钠长石类： 钠长石、歪长石</li><li>钾钠质长石类：条纹长石 (不混熔的结果)</li></ol><h5 id="主要造岩矿物化学成分"><a href="#主要造岩矿物化学成分" class="headerlink" title="主要造岩矿物化学成分"></a>主要造岩矿物化学成分</h5><p>橄榄石(Mg,Fe)<sub>2</sub>[SiO<sub>4</sub>]</p><p>斜方辉石(Mg,Fe)<sub>2</sub>[Si<sub>2</sub>O<sub>6</sub>]</p><p>单斜辉石(Ca,Mg,Fe)[Si<sub>2</sub>O<sub>6</sub>]</p><p><em>上述3个矿物使用的Fe-Mg，CaO的量是不同的</em></p><p><em>Ol:  FeO+MgO=58~60 wt.%</em></p><p><em>Opx：FeO+MgO=40 wt.%</em></p><p><em>Cpx：FeO+MgO=20<del>22 wt.%，CaO=22</del>25 wt.%</em></p><p>长石(K,Na,Ca,Ba)[(Al,Si)Si<sub>2</sub>O<sub>8</sub>]</p><p>磷灰石Ca<sub>5</sub>[PO<sub>4</sub>]<sub>3</sub>(F,Cl,OH)</p><p>磁铁矿FeFe<sub>2</sub>O<sub>4</sub></p><p>然后接着讨论<strong>哈克图解转折点的含义</strong></p><p>例1：夏威夷火山岩CaO－MgO图解中，</p><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305220341716.png" alt="image-20200305220341716"></p><p><em><strong>思路：从分离的矿物成分和残余岩浆成分2方面考虑</strong></em></p><p>当MgO低于7％，CaO与MgO呈现正相关性，表明斜长石和单斜辉石同时从岩浆熔体中结晶出来（早起分离的矿物可以是堆晶，也可以是斑晶）。当MgO高于7％，CaO和MgO呈现负相关，主要是单独由橄榄石分离结晶控制岩浆作用过程。</p><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305221258660.png" alt="image-20200305221258660"></p><p>图中右半段各种矿物开始分离结晶</p><p><img src="%E4%B8%BB%E9%87%8F%E5%85%83%E7%B4%A0%E5%A4%84%E7%90%86/image-20200305230627949.png" alt="image-20200305230627949"></p><p>图中显示了橄榄石的分离结晶过程（Mg减少，Al增加）和堆晶过程（Mg增加，Al减少）</p><p><strong>岩浆作用过程小结：</strong></p><ul><li>掌握不同矿物的组成</li><li>主量元素线性变化——矿物结晶脱离熔体(同时导致平衡熔体中该组分线性降低)</li><li>主量元素线性变化——或者部分熔融中矿物进入熔体相(同时导致平衡熔体中该组分线性升高)</li><li>需要找到岩浆演化的起始点（原始岩浆）</li><li>拐点代表结晶或者熔融加入的矿物相变化</li><li>注意用于哈克图解的一系列样品，必须具有成因关联（时-空关系）</li><li>上述的矿物分离结晶过程，就是鲍文反应序列、岩浆岩从超基性-基性-中性-酸性的演化序列。</li></ul><p><em><strong>使用</strong></em></p><ul><li>一个明显属于同期产出、空间上成分不同的杂岩体，可以使用统一投点</li><li>一个小区域、属于一个岩浆岩省的，同期产出的可以统一投点</li><li>一个造山带内同期产出的，要注意造山带的岩石圈不均一性质，不要一起投图，例如青藏高原拉萨地块东西分段，东段和西段同时期的岩浆岩源区有差异，不一起投点</li></ul><p>参考资料：赵志丹《岩石地球化学》课件</p>]]></content>
      
      
      <categories>
          
          <category> 地球化学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地球化学 </tag>
            
            <tag> 主量元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS定位</title>
      <link href="/2020/03/04/CSS%E5%AE%9A%E4%BD%8D/"/>
      <url>/2020/03/04/CSS%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h1><p>&emsp;&emsp;<strong>CSS定位</strong>是使用<strong>position</strong>属性，分为：relative、absolute、static、fixed四种，默认static无定位</p><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p>position: relative;</p><p>&emsp;&emsp;相对定位的偏移参考元素是元素本身（该元素以前所在的位置），不会使元素脱离文档流。元素的初始位置占据的空间会被保留。<br>&emsp;&emsp;偏移一般为两个方向上边距（top）和左边距（left）</p><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>position: absolute;</p><p>&emsp;&emsp;相对于已定位的最近的祖先元素，如果没有已定位的最近的祖先元素，那么它的位置相对于最初的包含块（如body）</p><p><em><strong>相对定位—-不破坏文档流<br>绝对定位—-破坏文档流</strong></em></p><p><strong>练习：</strong>把蓝色方块放置在红色方块中间，效果图如下：</p><p><img src="CSS%E5%AE%9A%E4%BD%8D/image-20200304141656094.png" alt="image-20200304141656094"></p><p>实现：将父类设为相对定位，子类设为绝对定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="comment">/*完善下列代码*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.per</span>&#123;</span></span><br><span class="line"><span class="css">     <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">     <span class="attribute">margin-left</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">margin-top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="css">   &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">   <span class="selector-class">.son</span>&#123;</span></span><br><span class="line"><span class="css">     <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">     <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">     <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">     <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">   &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;per&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定位和浮动"><a href="#定位和浮动" class="headerlink" title="定位和浮动"></a>定位和浮动</h2><p>&emsp;&emsp;绝对定位和float的区别：绝对定位的区块会覆盖顶上的内容，而float不会。</p><p>&emsp;&emsp;相对定位和float组合会显示各自特点，float可以产生不会被忽略的浮动（不会重叠），相对定位可以设置元素移动位置。</p><h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p>&emsp;&emsp;z-index决定谁在前面谁在后面，数字越大就在越上面。且为方便以后的扩张，数字最好设置为整倍数如：10,20,30</p><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p>&emsp;&emsp;<strong>固定定位</strong>是相对于浏览器窗口进行定位，无论如何拉动拉条都固定在浏览器的某个位置</p><p>​        position：fixed</p>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用指南（持续更新）</title>
      <link href="/2020/03/02/hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/03/02/hexo%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="关于hexo文章中插入图片的问题"><a href="#关于hexo文章中插入图片的问题" class="headerlink" title="关于hexo文章中插入图片的问题"></a>关于hexo文章中插入图片的问题</h2><ol><li><p>安装cnpm</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></li><li><p>使用cnpm 安装<strong>0.05版本</strong>的hexo-asset-image插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>该插件作用是创建博文时自动生成同名文件夹，用于存放图片</p></li><li><p>修改_config.yml文件，将post_asset_folder选项改为true</p></li><li><p>在文章用引用图片使用相对路径</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">你想替换的文字</span>](<span class="link">xx/图片名称.jpg &#x27;光标停留图片时候显示的内容&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="hexo-g-遇到的报错"><a href="#hexo-g-遇到的报错" class="headerlink" title="hexo g 遇到的报错"></a>hexo g 遇到的报错</h2><h3 id="YAMLException-can-not-read-a-block-mapping-entry"><a href="#YAMLException-can-not-read-a-block-mapping-entry" class="headerlink" title="YAMLException: can not read a block mapping entry"></a>YAMLException: can not read a block mapping entry</h3><p>解决办法：文章中 tags: 后面一定要有半角空格！！！注意冒号后边要有空格，“-”符号前后都要有空格！cover: 后面也要有一个空格！</p><h3 id="Template-render-error-unknown-path"><a href="#Template-render-error-unknown-path" class="headerlink" title="Template render error: (unknown path)"></a>Template render error: (unknown path)</h3><p>文章中出现了这类字符，但是没有放入代码区域中，尽量避免使用他们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &#125;  &#123;% %&#125;</span><br></pre></td></tr></table></figure><h2 id="hexo子分类"><a href="#hexo子分类" class="headerlink" title="hexo子分类"></a>hexo子分类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"> - python</span><br><span class="line"> - Django</span><br></pre></td></tr></table></figure><h2 id="mathjax"><a href="#mathjax" class="headerlink" title="mathjax"></a>mathjax</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># MathJax</span><br><span class="line"># Please see doc for more details: https://docs.jerryc.me/config.html#mathjax</span><br><span class="line"># ---------------</span><br><span class="line">mathjax:</span><br><span class="line">  enable: true</span><br><span class="line">  # true 表示每一頁都加載mathjax.js</span><br><span class="line">  # false 需要時加載，須在使用的Markdown Front-matter 加上 mathjax: true</span><br><span class="line">  per_page: false</span><br></pre></td></tr></table></figure><p>在hexo主题中_config.yml文件中设置mathjax开启</p><p>然后需要在博客目录下安装渲染模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm uninstall hexo-renderer-marked --save</span><br><span class="line">cnpm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><h2 id="local-search"><a href="#local-search" class="headerlink" title="local_search"></a>local_search</h2><p>现在博客目录下安装hexo-generator-search模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>然后再hexo的_config.yml中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  # path - file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</span><br><span class="line">  # field - the search scope you want to search, you can chose:</span><br><span class="line">  # post (Default) - will only covers all the posts of your blog.</span><br><span class="line">  # page - will only covers all the pages of your blog.</span><br><span class="line">  # all - will covers all the posts and pages of your blog.</span><br><span class="line">  # content - whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.</span><br></pre></td></tr></table></figure><p>在主题设置_config.yml中开启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Please see doc for more details: https://docs.jerryc.me/config.html#本地搜索</span><br><span class="line"># ---------------</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot; # if there are no result</span><br></pre></td></tr></table></figure><p>若本地搜索依旧无法正常使用建议重装主题</p><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><p>在确保主题支持的情况下开启mermaid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># mermaid</span><br><span class="line"># see https://github.com/knsv/mermaid</span><br><span class="line"># -------------------------------</span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  # built-in themes: default/forest/dark/neutral</span><br><span class="line">  theme: default</span><br></pre></td></tr></table></figure><p>mermaid书写格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line">    title Key elements in Product X</span><br><span class="line">    &quot;Calcium&quot; : 42.96</span><br><span class="line">    &quot;Potassium&quot; : 50.05</span><br><span class="line">    &quot;Magnesium&quot; : 10.01</span><br><span class="line">    &quot;Iron&quot; :  5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><div class="mermaid">pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5</div><p>使用mermaid一定要注意别直接写在文章结尾！！！，否则会报未知错误！</p>]]></content>
      
      
      <categories>
          
          <category> 杂七杂八 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS浮动</title>
      <link href="/2020/02/28/CSS%E6%B5%AE%E5%8A%A8/"/>
      <url>/2020/02/28/CSS%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML—浮动特性"><a href="#HTML—浮动特性" class="headerlink" title="HTML—浮动特性"></a>HTML—浮动特性</h1><h1 id="CSS浮动"><a href="#CSS浮动" class="headerlink" title="CSS浮动"></a>CSS浮动</h1><h2 id="float的崩溃"><a href="#float的崩溃" class="headerlink" title="float的崩溃"></a>float的崩溃</h2><p>&emsp;&emsp;<strong>float崩溃</strong>（也叫破坏、崩塌）是指：float作为子元素设置以后，父级元素的高度发生了崩溃（将子元素设置为浮动之后，父元素没有指定高度的情况下，父元素的高度将不存在）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>float崩溃<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#div2</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-id">#div3</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div1&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div2&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;div3&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;因为div2和div3都是<strong>块级元素</strong>，所以自然显示为<strong>文档流</strong>的特点，即div2和div3按上下顺序显示。div1没有设定宽度，所以继承父级<body>的宽度。效果如下图</p><p><img src="CSS%E6%B5%AE%E5%8A%A8/float%E5%B4%A9%E6%BA%83%E4%B8%8E%E5%8C%85%E8%A3%B9.png" alt="float崩溃与包裹"></p><p>&emsp;&emsp;将div3标签添加float属性，使得div3变成脱离了<strong>文档流</strong>，变成了浮动层，就不被包含在父一级中了。此时父级的高度变成了div2的高度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#div3&#123;</span><br><span class="line">height: 300px;</span><br><span class="line">width: 200px;</span><br><span class="line">background-color: blue;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="CSS%E6%B5%AE%E5%8A%A8/float%E5%B4%A9%E6%BA%83%E4%B8%8E%E5%8C%85%E8%A3%B91.png" alt="image-20200301222731177" title="此时div3脱离了文档流"></p><p>&emsp;&emsp;若再将div2也设置为浮动状态，div1高度将不存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#div2&#123;</span><br><span class="line">height:200px;</span><br><span class="line">width: 600px;</span><br><span class="line">background-color: yellow;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="CSS%E6%B5%AE%E5%8A%A8/float%E5%B4%A9%E6%BA%83%E4%B8%8E%E5%8C%85%E8%A3%B92.png" alt="image-20200301224011467" title="div2和div1均变为了浮动状态"></p><h2 id="float包裹"><a href="#float包裹" class="headerlink" title="float包裹"></a>float包裹</h2><p>&emsp;&emsp;当父级块元素变成浮动了，父级元素的宽高变成了子元素的宽高，这就称为<strong>包裹特性</strong>。</p><p>&emsp;&emsp;html页面中的图文混排，可以将图片与文字放置在同一个div中，并将div和图片都添加float属性，也可以将图片放置在div中，段落和div同级，div添加float属性即可。</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p><strong>清除浮动的目的：</strong></p><ol><li><p>为了父元素不会出现“高度崩塌”；</p></li><li><p>如果强制规定外层容器的尺寸，则显得就不那么灵活了，高度就不能自动适应了;</p></li><li><p>从某个元素开始，不在需要浮动效果了。</p></li></ol><p>&emsp;&emsp;当有三个同级div（div1，div2，div3）时候，前两个div设置float属性，div3会在前两个div后面显示。如果此时给div3设置清除浮动，div3会继续变为文档流，前两个div在第一行显示，div3在第二行显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#div3&#123;</span><br><span class="line">clear:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前最主流做法：在三个div之外专门建立一个用于清除浮动的div，设置清除浮动的属性。适用于复杂页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#clearDiv::after&#123;</span><br><span class="line"><span class="comment">&lt;!--需要对该div添加一些内容，添加content，同时防止content中的内容被其他设置误操作而显示出来，添加visibility属性。行高设置为默认0px，display将content转化为块级元素--&gt;</span></span><br><span class="line">content: &#x27;&#x27;;</span><br><span class="line">visibility: hidden;</span><br><span class="line">height: 0px;</span><br><span class="line">display: block;</span><br><span class="line">clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;针对ie浏览器可能出现的一些bug，如边距重叠，浮动不能清除等。需要添加以下代码，zoom属性是页面对象重新加载和计算。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#clearDiv&#123;</span><br><span class="line">zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
